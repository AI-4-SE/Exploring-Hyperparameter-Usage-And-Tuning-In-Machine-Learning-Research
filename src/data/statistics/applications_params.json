{
    "brain_connectome/spd_fmri.py": {
        "sklearn": {
            "KFold_97": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_112": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_123": {
                "variable": {
                    "value": "conf[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_182": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_119": {
                "y_true": {
                    "value": "labels[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_120": {
                "y_true": {
                    "value": "labels[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_121": {
                "y_true": {
                    "value": "labels[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_122": {
                "y_true": {
                    "value": "labels[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_187": {
                "y_true": {
                    "value": "labels[stop:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_188": {
                "y_true": {
                    "value": "labels[stop:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_189": {
                "y_true": {
                    "value": "labels[stop:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_190": {
                "y_true": {
                    "value": "labels[stop:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_117": {
                "y_true": {
                    "value": "labels[train_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/keras/examples/mnist_sklearn_wrapper.py": {
        "sklearn": {
            "GridSearchCV_81": {
                "variable": {
                    "value": "validator",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "my_classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KerasClassifier(make_model, batch_size=32)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "{'dense_layer_sizes': dense_size_candidates, 'epochs': [3, 6], 'filters': [8], 'kernel_size': [3], 'pool_size': [2]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_log_loss",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/examples/neural_doodle.py": {
        "sklearn": {
            "k_means_128": {
                "variable": {
                    "value": "(_, labels, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "xs.astype('float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/examples/cifar10_cnn_tfaugment2d.py": {
        "tensorflow": {
            "convert_image_dtype_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(inputs, f, interpolation='BILINEAR')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_71": {
                "variable": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(inputs, f, interpolation='BILINEAR')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_73": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0, 0, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "augmentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_87": {
                "variable": {
                    "value": "coin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([batch_size], 0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_89": {
                "variable": {
                    "value": "flip_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1.0, 0.0, width, 0.0, 1.0, 0.0, 0.0, 0.0]",
                            "List"
                        ],
                        [
                            "[1.0, 0.0, 0.0, 0.0, -1.0, height, 0.0, 0.0]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_90": {
                "variable": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(flip_transform, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "noflip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(identity, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_95": {
                "variable": {
                    "value": "coin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([batch_size], 0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "flip_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1.0, 0.0, width, 0.0, 1.0, 0.0, 0.0, 0.0]",
                            "List"
                        ],
                        [
                            "[1.0, 0.0, 0.0, 0.0, -1.0, height, 0.0, 0.0]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_98": {
                "variable": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(flip_transform, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_99": {
                "variable": {
                    "value": "noflip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(identity, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "flip_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 0, 0, 0, 1, 0, 0, 0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_92": {
                "condition": {
                    "value": "coin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([batch_size], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform([batch_size], 0, 1.0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(flip_transform, 0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(flip_transform, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noflip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "flip_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 0, 0, 0, 1, 0, 0, 0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_100": {
                "condition": {
                    "value": "coin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([batch_size], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform([batch_size], 0, 1.0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(flip_transform, 0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(flip_transform, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noflip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(identity, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/keras/examples/mnist_dataset_api.py": {
        "tensorflow": {
            "one_hot_61": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y_train, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/keras/examples/mnist_tfrecord.py": {
        "tensorflow": {
            "shuffle_batch_147": {
                "variable": {
                    "value": "(x_train_batch, y_train_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.train.images, data.train.labels.astype(np.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3000",
                            "int"
                        ]
                    ]
                },
                "enqueue_many": {
                    "value": "enqueue_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_155": {
                "variable": {
                    "value": "x_train_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_train_batch, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_train_batch, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "x_train_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_train_batch, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_train_batch, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, 28, 28, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_158": {
                "variable": {
                    "value": "y_train_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_train_batch, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y_train_batch, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_159": {
                "variable": {
                    "value": "y_train_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_train_batch, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y_train_batch, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "batch_176": {
                "variable": {
                    "value": "(x_test_batch, y_test_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.test.images, data.test.labels.astype(np.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "enqueue_many": {
                    "value": "enqueue_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_185": {
                "variable": {
                    "value": "x_test_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_test_batch, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_test_batch, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "x_test_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_test_batch, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_test_batch, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, 28, 28, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_188": {
                "variable": {
                    "value": "y_test_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_test_batch, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y_test_batch, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_189": {
                "variable": {
                    "value": "y_test_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_test_batch, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(y_test_batch, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "Coordinator_206": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_207": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.get_session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/keras/keras/backend/tensorflow_backend.py": {
        "tensorflow": {
            "get_default_graph_70": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_94": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keras_learning_phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_127": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_170": {
                "variable": {
                    "value": "default_session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_241": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_398": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(low, high, dtype=tf_dtype, seed=seed)(shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean, scale, dtype=tf_dtype, seed=seed)(shape)",
                            "Call"
                        ],
                        [
                            "np.asarray(value, dtype=dtype(x))",
                            "Call"
                        ],
                        [
                            "np.asarray(value, dtype=dtype(x))",
                            "Call"
                        ],
                        [
                            "(indices, sparse_coo.data, sparse_coo.shape)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.as_dtype(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_697": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_698": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_729": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_730": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_760": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_855": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_892": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_1340": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_1341": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1394": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1409": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1474": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(0.0, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(0.0, x.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(np.inf, x.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_1725": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "reduction_axes",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_1727": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_1748": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "reduction_axes",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_1756": {
                "variable": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1758": {
                "variable": {
                    "value": "broadcast_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1759": {
                "variable": {
                    "value": "broadcast_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_1769": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "broadcast_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(mean, target_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "broadcast_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, target_shape)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "broadcast_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.reshape(beta, target_shape)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "broadcast_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.reshape(gamma, target_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_2021": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_2022": {
                "variable": {
                    "value": "x_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "auxiliary_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_2025": {
                "variable": {
                    "value": "x_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s for s in splits for _ in range(rep)]",
                            "ListComp"
                        ],
                        [
                            "tf.expand_dims(x, axis=auxiliary_axis)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_rep, reps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rep, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(len(x.get_shape()) + 1)",
                            "Call"
                        ],
                        [
                            "np.delete(reps, auxiliary_axis)",
                            "Call"
                        ],
                        [
                            "tf.constant(reps, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_2030": {
                "variable": {
                    "value": "reps",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(len(x.get_shape()) + 1)",
                            "Call"
                        ],
                        [
                            "np.delete(reps, auxiliary_axis)",
                            "Call"
                        ],
                        [
                            "tf.constant(reps, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_2032": {
                "variable": {
                    "value": "x_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s for s in splits for _ in range(rep)]",
                            "ListComp"
                        ],
                        [
                            "tf.expand_dims(x, axis=auxiliary_axis)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_rep, reps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rep, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(x_shape)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "x_shape * reps",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_2055": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2056": {
                "variable": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, prod(shape(x)[1:])])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_dtype_2350": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "x.dtype.name.split('_')[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_2606": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ],
                        [
                            "reverse(inputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(axes, axes)",
                            "Tuple"
                        ],
                        [
                            "[x_ndim - 1, y_ndim - 2]",
                            "List"
                        ],
                        [
                            "[axes]",
                            "List"
                        ],
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_2789": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.stack(successive_outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.stack(successive_outputs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(axes, axes)",
                            "Tuple"
                        ],
                        [
                            "[x_ndim - 1, y_ndim - 2]",
                            "List"
                        ],
                        [
                            "[axes]",
                            "List"
                        ],
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_2954": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_3053": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(output_shape[-1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_3054": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(flatten(target), 'int64')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(output, [-1, int(output_shape[-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_3118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(0.0, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(0.0, x.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(1.0, x.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "convolution_3306": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(dilation_rate,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(strides,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "convolution_3344": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + dilation_rate",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "conv2d_transpose_3401": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[4], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "expand_dims_3441": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "spatial_start_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "expand_dims_3442": {
                "variable": {
                    "value": "depthwise_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depthwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depthwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3443": {
                "variable": {
                    "value": "pointwise_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pointwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "separable_conv2d_3446": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "depthwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depthwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "pointwise_filter": {
                    "value": "pointwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + dilation_rate",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "squeeze_3452": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[spatial_start_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "separable_conv2d_3492": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "depthwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depthwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "pointwise_filter": {
                    "value": "pointwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pointwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + dilation_rate",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_3533": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "depthwise_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(depthwise_kernel, 0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + dilation_rate",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "convolution_3570": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + dilation_rate",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "conv3d_transpose_3627": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[4], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "shape_3913": {
                "variable": {
                    "value": "label_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_3914": {
                "variable": {
                    "value": "num_batches_tns",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_3915": {
                "variable": {
                    "value": "max_num_labels_tns",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_3921": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill([1, label_shape[1]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_3922": {
                "variable": {
                    "value": "dense_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "range_less_than",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "label_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.fill([1, label_shape[1]], 0), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_3926": {
                "variable": {
                    "value": "label_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.range(label_shape[1]), num_batches_tns)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "label_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_3928": {
                "variable": {
                    "value": "label_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns), label_shape)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "dense_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "dense_mask[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_3930": {
                "variable": {
                    "value": "batch_array",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.tile(tf.range(label_shape[0]), max_num_labels_tns), reverse(label_shape, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_3932": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]), max_num_labels_tns), reverse(label_shape, 0)))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "dense_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "dense_mask[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_3933": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_3935": {
                "variable": {
                    "value": "vals_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_3957": {
                "variable": {
                    "value": "label_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(label_length, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_3958": {
                "variable": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(input_length, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_3959": {
                "variable": {
                    "value": "sparse_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ctc_label_dense_to_sparse(y_true, label_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_3961": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_3997": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_3998": {
                "variable": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(input_length, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(input_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_default_graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_129": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keras_learning_phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_304": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SparseTensor_392": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "sparse_coo.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "sparse_coo.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_426": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(low, high, dtype=tf_dtype, seed=seed)(shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean, scale, dtype=tf_dtype, seed=seed)(shape)",
                            "Call"
                        ],
                        [
                            "np.asarray(value, dtype=dtype(x))",
                            "Call"
                        ],
                        [
                            "np.asarray(value, dtype=dtype(x))",
                            "Call"
                        ],
                        [
                            "(indices, sparse_coo.data, sparse_coo.shape)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_placeholder_511": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_513": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_562": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_786": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_811": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_824": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_953": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_969": {
                "ref": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_add_982": {
                "ref": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "increment",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_sub_995": {
                "ref": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "decrement",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1074": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1075": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y, perm=y_permute_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[y_shape[-2], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1081": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1149": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(y), [1] * diff], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1167": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "adj_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axes[0] == ndim(x) - 1 else True",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "adj_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if axes[1] == ndim(y) - 1 else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "squeeze_1173": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(x, y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(x, y), axes[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(tf.transpose(x, [1, 0]), y), axes[1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, y, adjoint_a=adj_x, adjoint_b=adj_y)",
                            "Call"
                        ],
                        [
                            "expand_dims(out, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, list(range(idx, idx + diff)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(idx, idx + diff))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_1211": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1224": {
                "params": {
                    "value": "reference",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1244": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_1261": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_1278": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_1295": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cumsum_1308": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cumprod_1321": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_1339": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1342": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_1361": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1380": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_any_1395": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_1410": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_1423": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmin_1436": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_1448": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1460": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1475": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1487": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1499": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_1520": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_1534": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_1546": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_1559": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_1579": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(min_value, x.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_value",
                            "variable"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "_to_tensor(max_value, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(max_value, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_1592": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_1605": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_1618": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_1631": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1644": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1657": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1670": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1683": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_1695": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_1707": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1763": {
                "variable": {
                    "value": "broadcast_gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1767": {
                "variable": {
                    "value": "broadcast_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1802": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[normalization_axis]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1806": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[normalization_axis]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fused_batch_norm_1810": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "batch_normalization_1869": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1907": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_1921": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1, n, 1])",
                            "Call"
                        ],
                        [
                            "[[0, 0], [padding[0], padding[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], list(padding[0]), list(padding[1])]",
                            "List"
                        ],
                        [
                            "[[0, 0], list(padding[0]), list(padding[1]), [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_1944": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2:]",
                            "Subscript"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('int32'))",
                            "BinOp"
                        ],
                        [
                            "tf.shape(x)[1:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_2009": {
                "variable": {
                    "value": "splits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "x_shape[axis]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(x_shape)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "x_shape * reps",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_2057": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1, n, 1])",
                            "Call"
                        ],
                        [
                            "[[0, 0], [padding[0], padding[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], list(padding[0]), list(padding[1])]",
                            "List"
                        ],
                        [
                            "[[0, 0], list(padding[0]), list(padding[1]), [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "tile_2110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_2122": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_2150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_2163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2179": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1, n, 1])",
                            "Call"
                        ],
                        [
                            "[[0, 0], [padding[0], padding[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], list(padding[0]), list(padding[1])]",
                            "List"
                        ],
                        [
                            "[[0, 0], list(padding[0]), list(padding[1]), [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_2213": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1, n, 1])",
                            "Call"
                        ],
                        [
                            "[[0, 0], [padding[0], padding[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], list(padding[0]), list(padding[1])]",
                            "List"
                        ],
                        [
                            "[[0, 0], list(padding[0]), list(padding[1]), [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_2264": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1, n, 1])",
                            "Call"
                        ],
                        [
                            "[[0, 0], [padding[0], padding[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], list(padding[0]), list(padding[1])]",
                            "List"
                        ],
                        [
                            "[[0, 0], list(padding[0]), list(padding[1]), [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [padding[0][0], padding[0][1]], [padding[1][0], padding[1][1]], [padding[2][0], padding[2][1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_2277": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_2292": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reverse_2308": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(axes, axes)",
                            "Tuple"
                        ],
                        [
                            "[x_ndim - 1, y_ndim - 2]",
                            "List"
                        ],
                        [
                            "[axes]",
                            "List"
                        ],
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_2355": {
                "variable": {
                    "value": "assign_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_2420": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_2528": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_2613": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "expand_dims(mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask, axes)",
                            "Call"
                        ],
                        [
                            "reverse(mask, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(axes, axes)",
                            "Tuple"
                        ],
                        [
                            "[x_ndim - 1, y_ndim - 2]",
                            "List"
                        ],
                        [
                            "[axes]",
                            "List"
                        ],
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_2629": {
                "variable": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ],
                        [
                            "reverse(inputs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorArray_2696": {
                "variable": {
                    "value": "output_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "output_ta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_2700": {
                "variable": {
                    "value": "input_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "input_ta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_2705": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_2775": {
                "variable": {
                    "value": "final_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda time, *_: time < time_steps",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(time, output_ta) + states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_2812": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_2825": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "then_expression_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "then_expression",
                            "variable"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "else_expression_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "else_expression",
                            "variable"
                        ]
                    ]
                }
            },
            "where_2851": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "then_expression",
                    "type": "variable",
                    "possible_values": [
                        [
                            "then_expression()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "else_expression",
                    "type": "variable",
                    "possible_values": [
                        [
                            "else_expression()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_2934": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_2936": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_2940": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_value",
                            "variable"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "_to_tensor(max_value, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(max_value, x.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_2972": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_2984": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "softsign_2996": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_3022": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - _epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_3048": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1 - _epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_3049": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_3083": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "_to_tensor(epsilon(), output.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1 - _epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_3084": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output / (1 - output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_3086": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_3099": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_3131": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_3153": {
                "x": {
                    "value": "x * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "rate": {
                    "value": "retain_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - level",
                            "BinOp"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_3166": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "in_top_k_3182": {
                "targets": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(flatten(target), 'int64')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_3199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_3220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_3241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_3353": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_3382": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[4], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_3393": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list(output_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_3405": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3455": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3498": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3539": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3578": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 4, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_3607": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ],
                        [
                            "(output_shape[0], output_shape[2], output_shape[3], output_shape[4], output_shape[1])",
                            "Tuple"
                        ],
                        [
                            "(tf.shape(x)[0],) + tuple(output_shape[1:])",
                            "BinOp"
                        ],
                        [
                            "tf.stack(list(output_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_3619": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list(output_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_3631": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 4, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool_3670": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ],
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "transpose_3681": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool3d_3719": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ],
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "transpose_3730": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 4, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_3866": {
                "condition": {
                    "value": "tf.random_uniform(shape, dtype=dtype, seed=seed) <= p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(shape, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros(shape, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_3893": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SparseTensor_3937": {
                "indices": {
                    "value": "tf.to_int64(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "vals_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels, indices)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "tf.to_int64(label_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_3963": {
                "input": {
                    "value": "ctc.ctc_loss(inputs=y_pred, labels=sparse_labels, sequence_length=input_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ctc_greedy_decoder_4001": {
                "variable": {
                    "value": "(decoded, log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ],
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(input_length, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(input_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ctc_beam_search_decoder_4005": {
                "variable": {
                    "value": "(decoded, log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ],
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(input_length, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(input_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "beam_width": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "top_paths": {
                    "value": "top_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_4029": {
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "foldl_4045": {
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "foldr_4061": {
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_182": {
                "variable": {
                    "value": "_SESSION",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=num_thread, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_186": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_761": {
                "num_rows": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_859": {
                "minval": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_896": {
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(10000000.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1076": {
                "tensor": {
                    "value": "tf.matmul(xt, yt)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape[:-1] + y_shape[:-2] + y_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x), [1] * diff], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_1159": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.transpose(x, [1, 0]), y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_concat_1892": {
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sp_inputs": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_1894": {
                "values": {
                    "value": "[to_dense(x) for x in tensors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ndim(x))",
                            "Call"
                        ],
                        [
                            "axis % rank",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_1942": {
                "value": {
                    "value": "np.array([height_factor, width_factor]).astype('int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_1953": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2:]",
                            "Subscript"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('int32'))",
                            "BinOp"
                        ],
                        [
                            "tf.shape(x)[1:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_2136": {
                "values": {
                    "value": "[-1, prod(shape(x)[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_dtype_2374": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "x.dtype.name.split('_')[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "group_2467": {
                "variable": {
                    "value": "self.updates_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stop_gradient_2545": {
                "input": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_2610": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "expand_dims(mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask, axes)",
                            "Call"
                        ],
                        [
                            "reverse(mask, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_2634": {
                "variable": {
                    "value": "mask_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "expand_dims(mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask, axes)",
                            "Call"
                        ],
                        [
                            "reverse(mask, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_2676": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "successive_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_2686": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "successive_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_2718": {
                "variable": {
                    "value": "mask_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "mask_ta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_2845": {
                "variable": {
                    "value": "cond_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(condition), [1] * ndim_diff]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_2846": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cond_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(condition), [1] * ndim_diff], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2847": {
                "variable": {
                    "value": "expr_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "then_expression",
                    "type": "variable",
                    "possible_values": [
                        [
                            "then_expression()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_2849": {
                "variable": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "shape_diff > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "expr_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(then_expression)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(expr_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_2850": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(shape_diff > 0, expr_shape, tf.ones_like(expr_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_2958": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=targets, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_3017": {
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_3026": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_3060": {
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=targets, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(output)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_3203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_3245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool_3674": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ],
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "avg_pool3d_3723": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ],
                        [
                            "(1,) + pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + pool_size",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides * 2 + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides * 2",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "(1,) + strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "(1, 1) + strides",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "str"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "'valid'",
                            "str"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "_preprocess_padding(padding)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "((1",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "tf_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NHWC'",
                            "str"
                        ],
                        [
                            "'NCHW'",
                            "str"
                        ],
                        [
                            "'NDHWC'",
                            "str"
                        ],
                        [
                            "'NCDHW'",
                            "str"
                        ],
                        [
                            "'NWC'",
                            "str"
                        ],
                        [
                            "'NCW'",
                            "str"
                        ]
                    ]
                }
            },
            "ones_3867": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_3868": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([None for _ in range(ndim)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_3921": {
                "dims": {
                    "value": "[1, label_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_3926": {
                "input": {
                    "value": "tf.range(label_shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "num_batches_tns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([label_shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_3930": {
                "tensor": {
                    "value": "tf.tile(tf.range(label_shape[0]), max_num_labels_tns)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "reverse(label_shape, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_3933": {
                "tensor": {
                    "value": "concatenate([batch_ind, label_ind], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_3937": {
                "x": {
                    "value": "label_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_3957": {
                "input": {
                    "value": "label_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(label_length, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_3958": {
                "input": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(input_length, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(input_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ctc_loss_3963": {
                "inputs": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ],
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "sparse_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(ctc_label_dense_to_sparse(y_true, label_length))",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.squeeze(input_length, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(input_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_to_dense_4010": {
                "sparse_indices": {
                    "value": "st.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "st.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "st.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_177": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_180": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_thread",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('OMP_NUM_THREADS'))",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_398": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "floatx()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'int32'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_1059": {
                "value": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_1066": {
                "value": {
                    "value": "tf.shape(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_1075": {
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "y_permute_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(ndim(y)))",
                            "Call"
                        ],
                        [
                            "[y_permute_dim.pop(-2)] + y_permute_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_1076": {
                "a": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, x_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1149": {
                "values": {
                    "value": "[tf.shape(y), [1] * diff]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1941": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1952": {
                "value": {
                    "value": "np.array([height_factor, width_factor]).astype('int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_2087": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "start < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0, dtype=start.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : start",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_2379": {
                "variable": {
                    "value": "assign_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(x.dtype.name.split('_')[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_2458": {
                "control_inputs": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_2653": {
                "variable": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ta.read(time)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([1, tf.shape(output)[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_2661": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(new_state)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prev_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros_like(output)",
                            "Call"
                        ],
                        [
                            "successive_outputs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_2694": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ],
                        [
                            "reverse(inputs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_2745": {
                "variable": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ta.read(time)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([1, tf.shape(output)[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_2747": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(new_state)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "states[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_3023": {
                "input_tensor": {
                    "value": "target * tf.log(output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_3799": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_3918": {
                "input": {
                    "value": "tf.range(label_shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_3918": {
                "dims": {
                    "value": "max_num_labels_tns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([label_shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ta.read(time)",
                            "Call"
                        ],
                        [
                            "input_ta.read(time)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_3930": {
                "input": {
                    "value": "tf.range(label_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "max_num_labels_tns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([label_shape[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_3961": {
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ],
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_3997": {
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ],
                        [
                            "tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1059": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1066": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1152": {
                "values": {
                    "value": "[tf.shape(x), [1] * diff]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_1157": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1159": {
                "x": {
                    "value": "tf.transpose(x, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1951": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_2666": {
                "variable": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ta.read(time)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([1, tf.shape(new_state)[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_2849": {
                "input": {
                    "value": "expr_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(then_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_3060": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "range_3930": {},
            "shape_1149": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1159": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1755": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_2654": {
                "values": {
                    "value": "[1, tf.shape(output)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2746": {
                "values": {
                    "value": "[1, tf.shape(output)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_2748": {
                "condition": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(new_state)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_states[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "states[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_2845": {
                "input": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, cond_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, tile_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_3023": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_3392": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_3618": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_3775": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_3783": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_variable_initialized_195": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables",
                            "variable"
                        ],
                        [
                            "tf.SparseTensor(indices=indices, values=sparse_coo.data, dense_shape=sparse_coo.shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(value, dtype=tf.as_dtype(dtype), name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=shape, dtype=tf_dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=shape, dtype=tf_dtype, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_202": {
                "var_list": {
                    "value": "uninitialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_1152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x), [1] * diff], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, floatx())",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, zero, inf)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "permute_dimensions(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, then_expression_fn, else_expression_fn)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, then_expression, else_expression)",
                            "Call"
                        ],
                        [
                            "switch(training, x, alt)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, max_value)",
                            "Call"
                        ],
                        [
                            "0.2 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x, zero, one)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 4, 1))",
                            "Call"
                        ],
                        [
                            "temporal_padding(x, (left_pad, 0))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=(dilation_rate,), strides=(strides,), padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, spatial_start_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, [spatial_start_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, depthwise_kernel, strides=strides, padding=padding, rate=dilation_rate, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(input=x, filter=kernel, dilation_rate=dilation_rate, strides=strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(x, pool_size, strides, padding=padding, data_format=tf_data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 4, 1, 2, 3))",
                            "Call"
                        ],
                        [
                            "x + reshape(bias, (1,) + bias_shape)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias, data_format='NHWC')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_2463": {
                "ref": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_2667": {
                "values": {
                    "value": "[1, tf.shape(new_state)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_2668": {
                "condition": {
                    "value": "tiled_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(new_state)[1]]))",
                            "Call"
                        ],
                        [
                            "tf.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_2088": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "start.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2654": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2746": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repeat_elements(x, depth_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=4)",
                            "Call"
                        ],
                        [
                            "repeat_elements(x, depth_factor, axis=1)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, height_factor, axis=2)",
                            "Call"
                        ],
                        [
                            "repeat_elements(output, width_factor, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, prev_output)",
                            "Call"
                        ],
                        [
                            "tf.where(tiled_mask_t, output, states[0])",
                            "Call"
                        ],
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1 - _epsilon)",
                            "Call"
                        ],
                        [
                            "tf.log(output / (1 - output))",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "batch_dot(x_aggregate, kernel)",
                            "Call"
                        ],
                        [
                            "reshape(output, (output_row, output_col, -1, filters))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 3, 0, 1))",
                            "Call"
                        ],
                        [
                            "permute_dimensions(output, (2, 0, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2667": {
                "input": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/keras/callbacks.py": {
        "tensorflow": {
            "merge_all_782": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_785": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_788": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_801": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "list(embeddings.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_868": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_734": {
                "name": {
                    "value": "mapped_weight_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.name.replace(':', '_')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_746": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "histogram_780": {
                "name": {
                    "value": "'{}_out'.format(layer.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "layer.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_744": {
                "name": {
                    "value": "'{}_grad'.format(mapped_weight_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.optimizer.get_gradients(model.total_loss, weight)",
                            "Call"
                        ],
                        [
                            "[grad.values if is_indexed_slices(grad) else grad for grad in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_752": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, shape[0], shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_777": {
                "name": {
                    "value": "mapped_weight_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.name.replace(':', '_')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_750": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_762": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_760": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_767": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], shape[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w_img, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_img, [1, shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/keras/layers/cudnn_recurrent.py": {
        "tensorflow": {
            "transpose_271": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.reverse(inputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "variable": {
                    "value": "input_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input_h, axis=0)",
                            "Call"
                        ],
                        [
                            "initial_state[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input_h, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_477": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.reverse(inputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_480": {
                "variable": {
                    "value": "input_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input_h, axis=0)",
                            "Call"
                        ],
                        [
                            "initial_state[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input_h, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_481": {
                "variable": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state[1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input_c, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "weights + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_516": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/keras/optimizers.py": {
        "tensorflow": {
            "scalar_mul_27": {
                "variable": {
                    "value": "then_expression",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "c / n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.switch(K.greater_equal(n, c), g * c / n, g)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n >= c",
                            "Compare"
                        ],
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n >= c",
                            "Compare"
                        ],
                        [
                            "tf.cast(condition, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/keras/utils/multi_gpu_utils.py": {
        "tensorflow": {
            "shape_182": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[size, input_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[step, input_shape * 0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_193": {
                "input_": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride * i",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size - step * i",
                            "BinOp"
                        ],
                        [
                            "step",
                            "variable"
                        ],
                        [
                            "tf.concat([size, input_shape], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_230": {
                "device_name": {
                    "value": "'/cpu:0' if cpu_merge else '/gpu:%d' % target_gpu_ids[0]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_197": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_207": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "'replica_%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/tests/keras/engine/test_topology.py": {
        "tensorflow": {
            "placeholder_478": {
                "variable": {
                    "value": "j_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_479": {
                "variable": {
                    "value": "k_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_489": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/tests/keras/engine/test_training.py": {
        "tensorflow": {
            "placeholder_1109": {
                "variable": {
                    "value": "pl_target_a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_673": {
                "initial_value": {
                    "value": "input_a_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_718": {
                "initial_value": {
                    "value": "input_a_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_760": {
                "initial_value": {
                    "value": "input_a_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_894": {
                "initial_value": {
                    "value": "input_a_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_951": {
                "initial_value": {
                    "value": "input_a_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ],
                        [
                            "np.random.random((10, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/tests/keras/optimizers_test.py": {
        "tensorflow": {
            "AdamOptimizer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/keras/tests/keras/utils/multi_gpu_test.py": {
        "tensorflow": {
            "device_139": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_208": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/tf_patch/variables.py": {
        "tensorflow": {
            "register_tensor_conversion_function_1722": {
                "base_type": {
                    "value": "PartitionedVariable",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "PartitionedVariable._TensorConversionFunction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_412": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_1421": {
                "key": {
                    "value": "ops.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_1474": {
                "key": {
                    "value": "ops.GraphKeys.LOCAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_1491": {
                "key": {
                    "value": "ops.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_1513": {
                "key": {
                    "value": "ops.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_1535": {
                "key": {
                    "value": "ops.GraphKeys.MOVING_AVERAGE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_1561": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'report_uninitialized_variables'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "executing_eagerly_1581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_1603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_variable_initialized_1628": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._partitioned_variable._variable_list[self._ix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "executing_eagerly_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_493": {
                "input": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "read",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_623": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "use_locking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_add_638": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "use_locking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_sub_653": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "use_locking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scatter_sub_674": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sparse_delta.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "sparse_delta.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "use_locking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "count_up_to_723": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "limit": {
                    "value": "limit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "executing_eagerly_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_first_n_1055": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable += will be deprecated. Use variable.assign_add if you want assignment to the variable value or 'x = x + y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1063": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable -= will be deprecated. Use variable.assign_sub if you want assignment to the variable value or 'x = x - y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1071": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable *= will be deprecated. Use variable.assign_mul if you want assignment to the variable value or 'x = x * y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1079": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable /= will be deprecated. Use variable.assign_div if you want assignment to the variable value or 'x = x / y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1087": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable /= will be deprecated. Use variable.assign_div if you want assignment to the variable value or 'x = x / y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1095": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable /= will be deprecated. Use variable.assign_div if you want assignment to the variable value or 'x = x / y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_first_n_1103": {
                "level": {
                    "value": "logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "\"Variable **= will be deprecated. Use 'x = x ** y' if you want a new python Tensor object.\"",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "executing_eagerly_1266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_1343": {
                "variable": {
                    "value": "concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self._variable_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "partition_ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partition_axes[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_1445": {
                "key": {
                    "value": "ops.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_1446": {
                "key": {
                    "value": "ops.GraphKeys.SAVEABLE_OBJECTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_1560": {
                "*inputs": {
                    "value": "*[v.initializer for v in var_list]",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'report_uninitialized_variables'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_1582": {
                "name": {
                    "value": "global_variables_initializer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_op_1604": {
                "name": {
                    "value": "local_variables_initializer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_1658": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_1700": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'report_uninitialized_variables'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "init_scope_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collections_395": {
                "names": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ops.GraphKeys.GLOBAL_VARIABLES]",
                            "List"
                        ],
                        [
                            "list(collections) + [ops.GraphKeys.TRAINABLE_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "init_scope_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_572": {
                "pred": {
                    "value": "is_variable_initialized(self)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "self.read_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.initial_value",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_1342": {
                "name": {
                    "value": "self._name + '/ConcatPartitions/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_1345": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_1346": {
                "input": {
                    "value": "concatenated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(self._variable_list, partition_ix)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_1358": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "executing_eagerly_1559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1671": {
                "values": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_default_graph_1697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_1702": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_not_1709": {
                "variable": {
                    "value": "variables_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.stack([state_ops.is_variable_initialized(v) for v in var_list])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1713": {
                "variable": {
                    "value": "variable_names_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[s.op.name for s in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_325": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'init'",
                            "Method Argument"
                        ],
                        [
                            "'report_uninitialized_variables'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AttrValue_333": {
                "variable": {
                    "value": "attr",
                    "type": "variable",
                    "possible_values": []
                },
                "list": {
                    "value": "attr_value_pb2.AttrValue.ListValue(s=[compat.as_bytes('loc:@%s' % true_name)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_351": {
                "variable": {
                    "value": "self._initial_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_value.wrapped_value",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_value",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_1331": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_1332": {
                "input": {
                    "value": "self._variable_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "colocate_with_1666": {
                "op": {
                    "value": "var.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1706": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_1717": {
                "tensor": {
                    "value": "variable_names_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.constant([s.op.name for s in var_list])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "variables_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_not(array_ops.stack([state_ops.is_variable_initialized(v) for v in var_list]))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_380": {
                "ref": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._try_guard_against_uninitialized_dependencies(self._initial_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "validate_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_391": {
                "variable": {
                    "value": "self._snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "read",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_394": {
                "variable": {
                    "value": "self._snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "read",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1710": {
                "values": {
                    "value": "[state_ops.is_variable_initialized(v) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_default_graph_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_339": {
                "variable": {
                    "value": "self._initial_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_value",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_390": {
                "device_name": {
                    "value": "caching_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "colocate_with_393": {
                "op": {
                    "value": "self._variable.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "Initializer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_338": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_1711": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_list",
                            "variable"
                        ]
                    ]
                }
            },
            "as_bytes_335": {
                "bytes_or_text": {
                    "value": "'loc:@%s' % true_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "se3_pose_estimation/make_dataset_kingscollege.py": {
        "tensorflow": {
            "TFRecordWriter_95": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "FLAGS.out_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_56": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_60": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_116": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(X.shape[0]), 'width': _int64_feature(X.shape[1]), 'channel': _int64_feature(X.shape[2]), 'image': _bytes_feature(img_raw), 'pose': _bytes_feature(pose_raw), 'pose_q': _bytes_feature(pose_q_raw), 'pose_x': _bytes_feature(pose_x_raw)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_52": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_56": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_60": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_116": {
                "feature": {
                    "value": "{'height': _int64_feature(X.shape[0]), 'width': _int64_feature(X.shape[1]), 'channel': _int64_feature(X.shape[2]), 'image': _bytes_feature(img_raw), 'pose': _bytes_feature(pose_raw), 'pose_q': _bytes_feature(pose_q_raw), 'pose_x': _bytes_feature(pose_x_raw)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "se3_pose_estimation/test_se3_kingscollege.py": {
        "tensorflow": {
            "group_97": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_44": {
                "variable": {
                    "value": "self.file_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecord_list",
                    "type": "variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordReader_48": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_52": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([], tf.string), 'pose': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_59": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_60": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['pose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, (1, 480, 270, 3))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image=image, target_height=224, target_width=224)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 480, 270, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.nn.tanh(py_x[:, :3]), py_x[:, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lie_group.loss(y_pred, y_true, SE3_GROUP, metric)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_106": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_107": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_111": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_112": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_156": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + UNPARSED_ARGV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_148": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_151": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, (1, 480, 270, 3))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image=image, target_height=224, target_width=224)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_92": {
                "x": {
                    "value": "py_x[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FixedLenFeature_55": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_56": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "se3_pose_estimation/train_se3_kingscollege.py": {
        "tensorflow": {
            "group_140": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_147": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_76": {
                "variable": {
                    "value": "self.file_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecord_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_79": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_83": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([], tf.string), 'pose': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_90": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_91": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['pose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, (480, 270, 3))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image=image, target_height=224, target_width=224)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(480, 270, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shuffle_batch_103": {
                "variable": {
                    "value": "(image_batch, pose_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, pose]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.nn.tanh(py_x[:, :3]), py_x[:, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lie_group.loss(y_pred, y_true, SE3_GROUP, metric)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_136": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(lie_group.loss(y_pred, y_true, SE3_GROUP, metric))",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_155": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_156": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_159": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logs_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_162": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_212": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + UNPARSED_ARGV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_134": {
                "name": {
                    "value": "Adam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_165": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_204": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_207": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, (480, 270, 3))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image=image, target_height=224, target_width=224)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "x": {
                    "value": "py_x[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_graph_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_86": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_87": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}