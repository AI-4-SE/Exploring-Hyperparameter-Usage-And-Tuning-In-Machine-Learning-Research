{
    "code/GAN_Detection_Test.py": {
        "torch": {
            "load_291": {
                "variable": {
                    "value": "load_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}{}/checkpoint_{}.pth'.format(args.model_dir, suffix, args.epochs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_207": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(image_pair)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_154": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "dataset": {
                    "value": "GANDataset(train=args.leave_one_out, batch_size=args.test_batch_size, root=args.dataroot, name=name, check_cached=args.check_cached, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/GAN_Detection_Train.py": {
        "torch": {
            "DataLoader_259": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "GANDataset(train=True, batch_size=args.batch_size, root=args.dataroot, name=args.training_set, check_cached=args.check_cached, leave_one_out=args.leave_one_out, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_383": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_329": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(image_pair)",
                            "Call"
                        ],
                        [
                            "model(image_pair)",
                            "Call"
                        ],
                        [
                            "out.data.cpu().numpy().reshape(-1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_368": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "new_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "dampening": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_421": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_151": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}{}/checkpoint_{}.pth'.format(args.model_dir, suffix, epoch + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_372": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "new_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_392": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_394": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "dataset": {
                    "value": "GANDataset(train=False, leave_one_out=False, batch_size=args.test_batch_size, root=args.dataroot, name=name, check_cached=args.check_cached, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/Utils.py": {
        "torch": {
            "sqrt_44": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(x * x, dim=dim) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_54": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x / norm.unsqueeze(dim=dim).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "x / norm.expand_as(x)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/cycleGAN_dataset.py": {
        "torch": {
            "load_69": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.root, '{}_train.pt'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root, '{}_test.pt'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_104": {
                "obj": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "read_image_file(self.image_dir, name, self.train)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/pggan_dnet.py": {
        "torch": {
            "LeakyReLU_390": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_398": {
                "variable": {
                    "value": "nins",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "lods",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_497": {
                "variable": {
                    "value": "self.lods",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_334": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.adjusted_std(x, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "vals.expand(*target_shape)",
                            "Call"
                        ],
                        [
                            "mean(vals, axis=[2, 3], keepdim=True)",
                            "Call"
                        ],
                        [
                            "mean(x, [0, 2, 3], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.adjusted_std(x)])",
                            "Call"
                        ],
                        [
                            "vals.view(self.n, self.shape[1] / self.n, self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "mean(vals, axis=0, keepdim=True).view(1, self.n, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_352": {
                "tensors": {
                    "value": "[x, vals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "orthogonal_455": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_146": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "self.incoming.weight.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "ndarray": {
                    "value": "rnd",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "np.random.binomial(1, p=p, size=rnd_shape) / p",
                            "BinOp"
                        ],
                        [
                            "(1 + self.strength) ** np.random.normal(size=rnd_shape)",
                            "BinOp"
                        ],
                        [
                            "np.random.normal(size=rnd_shape) * coef + 1",
                            "BinOp"
                        ],
                        [
                            "rnd / np.linalg.norm(rnd, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(rnd).type(x.data.type()))",
                            "Call"
                        ],
                        [
                            "rnd.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_326": {
                "input": {
                    "value": "torch.mean((x - torch.mean(x, **kwargs)) ** 2, **kwargs) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_510": {
                "in_channels": {
                    "value": "ic",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "ic + 1",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ],
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_513": {
                "in_channels": {
                    "value": "self.get_nf(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ],
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_417": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "*args": {
                    "value": "*net",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_505": {
                "in_channels": {
                    "value": "ic",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "ic + 1",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ],
                        [
                            "1 + self.label_size",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_507": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_326": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.scale * x",
                            "BinOp"
                        ],
                        [
                            "x + self.bias.view(1, self.bias.size()[0], 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.chain[max_level](x, y)",
                            "Call"
                        ],
                        [
                            "self.chain[max_level](x)",
                            "Call"
                        ],
                        [
                            "resize_activations(out['min_level'], out['max_level'].size()) * min_level_weight + out['max_level'] * max_level_weight",
                            "BinOp"
                        ],
                        [
                            "self.chain[min_level](x, y)",
                            "Call"
                        ],
                        [
                            "self.chain[min_level](x)",
                            "Call"
                        ],
                        [
                            "self.chain[level](x, y)",
                            "Call"
                        ],
                        [
                            "self.chain[level](x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}