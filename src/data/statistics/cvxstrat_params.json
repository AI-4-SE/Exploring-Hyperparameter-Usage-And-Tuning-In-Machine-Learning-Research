{
    "examples/crime.py": {
        "sklearn": {
            "shuffle_29": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "raw_df.query('Year == 2017 | Year == 2018').copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_49": {
                "variable": {
                    "value": "df_2017",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df.query('Year == 2017')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_50": {
                "variable": {
                    "value": "df_2018",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df.query('Year == 2018')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/eigen_stratified_models/cardio.py": {
        "sklearn": {
            "train_test_split_40": {
                "variable": {
                    "value": "(X_train, X_, Y_train, Y_, Z_train, Z_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_41": {
                "variable": {
                    "value": "(X_val, X_test, Y_val, Y_test, Z_val, Z_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Z_",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.94736",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StandardScaler_47": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/eigen_stratified_models/weather.py": {
        "sklearn": {
            "train_test_split_20": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_21": {
                "variable": {
                    "value": "(val, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/house.py": {
        "sklearn": {
            "train_test_split_43": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StandardScaler_70": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_118": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mesothelioma.py": {
        "sklearn": {
            "train_test_split_48": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test, Z_train, Z_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StandardScaler_51": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "strat_models/losses.py": {
        "sklearn": {
            "LabelEncoder_217": {
                "variable": {
                    "value": "self.le",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_364": {
                "variable": {
                    "value": "self.le",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "nu_tch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "theta_i",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "G._node[z]['theta_tilde']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(G._node[z]['theta'])",
                            "Call"
                        ],
                        [
                            "(-b + np.sqrt(b ** 2 - 4 * c)) / 2.0",
                            "BinOp"
                        ],
                        [
                            "np.array(pool.map(find_solution, coefs))[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LBFGS_77": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta_i]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "nu_tch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "theta_i",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "G._node[z]['theta_tilde']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(G._node[z]['theta'])",
                            "Call"
                        ],
                        [
                            "(-b + np.sqrt(b ** 2 - 4 * c)) / 2.0",
                            "BinOp"
                        ],
                        [
                            "np.array(pool.map(find_solution, coefs))[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "Y_tch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(vertex['Y']).double()",
                            "Call"
                        ],
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "self.le.fit_transform(Y).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.le.transform(data['Y']))",
                            "Call"
                        ],
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "vertex['Y']",
                            "Subscript"
                        ],
                        [
                            "y @ y.T / nk",
                            "BinOp"
                        ],
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "self.le.fit_transform(Y).copy()",
                            "Call"
                        ],
                        [
                            "turn_into_iterable(self.le.transform(data['Y']))",
                            "Call"
                        ],
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "turn_into_iterable(data['Y'])",
                            "Call"
                        ],
                        [
                            "data['Y']",
                            "Subscript"
                        ],
                        [
                            "turn_into_iterable(data['Y'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LBFGS_94": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta_i]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "XtX",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "cache['n']",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "sigmas[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "cache['n']",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "sigmas[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ],
                        [
                            "len(G.nodes())",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "cache['n']",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "sigmas[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "lu_176": {
                "variable": {
                    "value": "A_LU",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "XtX + 1.0 / (2 * t) * torch.eye(n).unsqueeze(0).double()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lu_solve_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtY + 1.0 / (2 * t) * torch.from_numpy(nu)",
                            "BinOp"
                        ],
                        [
                            "t * N - nu",
                            "BinOp"
                        ],
                        [
                            "1 + nu",
                            "BinOp"
                        ]
                    ]
                },
                "LU_data": {
                    "value": "*A_LU",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[G._node[z]['theta_tilde'] for z in data['Z']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_259": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.le.transform(data['Y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_261": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, torch.ones_like(X[:, 0]).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[G._node[z]['theta_tilde'] for z in data['Z']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, torch.ones_like(X[:, 0]).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "G._node[z]['theta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_411": {
                "variable": {
                    "value": "Y_tch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nodes[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "(theta_i - nu_tch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vertex['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vertex['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, torch.ones_like(X[:, 0]).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "(theta_i - nu_tch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "torch.sum(torch.exp(theta_i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.exp(theta_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, torch.ones_like(X[:, 0]).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_267": {
                "input": {
                    "value": "X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_267": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_278": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scores(data, G)",
                            "Call"
                        ],
                        [
                            "(X.unsqueeze(-1) * theta).sum(1)",
                            "Call"
                        ],
                        [
                            "self.scores(data, G)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_177": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "cache['n']",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n + 1",
                            "BinOp"
                        ],
                        [
                            "sigmas[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_187": {
                "input": {
                    "value": "X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_187": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "data": {
                    "value": "vertex['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_98": {
                "input": {
                    "value": "theta_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_244": {
                "input": {
                    "value": "X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_244": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_276": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_158": {
                "input": {
                    "value": "X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_412": {
                "input": {
                    "value": "torch.sum(torch.exp(theta))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_412": {
                "input": {
                    "value": "torch.exp(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_412": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "torch.tensor([G._node[z]['theta_tilde'] for z in data['Z']])",
                            "Call"
                        ],
                        [
                            "G._node[z]['theta_tilde']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(G._node[z]['theta'])",
                            "Call"
                        ],
                        [
                            "(-b + np.sqrt(b ** 2 - 4 * c)) / 2.0",
                            "BinOp"
                        ],
                        [
                            "np.array(pool.map(find_solution, coefs))[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "strat_models/models.py": {
        "torch": {}
    }
}