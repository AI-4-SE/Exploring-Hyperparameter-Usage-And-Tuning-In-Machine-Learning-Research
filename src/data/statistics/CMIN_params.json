{
    "datasets/ActivityNet.py": {
        "torch": {}
    },
    "datasets/TACOS.py": {
        "torch": {}
    },
    "models_/gcn_final.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiHeadAttention(args.frame_dim, args.num_heads) for _ in range(args.num_attn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_30": {
                "variable": {
                    "value": "self.self_attn_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_num_frames",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_num_frames",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "g(x, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_words)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(words, word_mask, node_pos, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "torch.cat([frames1, x1], -1)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, frames_len, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.gcn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GraphConvolution(args.word_dim) for _ in range(args.num_gcn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "g(x, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_words)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(words, word_mask, node_pos, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "torch.cat([frames1, x1], -1)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, frames_len, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_116": {
                "variable": {
                    "value": "self.fc_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors << 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_120": {
                "variable": {
                    "value": "self.criterion1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_121": {
                "variable": {
                    "value": "self.criterion2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_128": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(frames, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.video_encoder(frames, frame_mask)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(words, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[frames1, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "g(x, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_words)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(words, word_mask, node_pos, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "torch.cat([frames1, x1], -1)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, frames_len, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_score(x.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.proposals",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "g(x, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_words)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(words, word_mask, node_pos, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "torch.cat([frames1, x1], -1)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, frames_len, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "g(x, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "self.rnn(x, length, self.max_num_words)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(words, word_mask, node_pos, node_mask, adj_mat)",
                            "Call"
                        ],
                        [
                            "torch.cat([frames1, x1], -1)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, frames_len, self.max_num_frames)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_154": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict.contiguous().view(predict.size(0), -1) * label_mask.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_156": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/bilinear.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feature",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/cross_gate.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc_gate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc_gate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_13": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_gate1(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_15": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_gate2(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/dynamic_rnn.py": {
        "torch": {
            "GRU_11": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_16": {
                "variable": {
                    "value": "(sorted_seq_len, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_17": {
                "variable": {
                    "value": "(_, original_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_24": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.index_select(0, sorted_idx)",
                            "Call"
                        ],
                        [
                            "x.index_select(1, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_len.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_29": {
                "variable": {
                    "value": "(unpacked_x, unpacked_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpacked_x.index_select(0, original_idx)",
                            "Call"
                        ],
                        [
                            "unpacked_x.index_select(1, original_idx)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, max_num_frames - out.shape[1]])",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpacked_x.index_select(0, original_idx)",
                            "Call"
                        ],
                        [
                            "unpacked_x.index_select(1, original_idx)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, max_num_frames - out.shape[1]])",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, max_num_frames - out.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpacked_x.index_select(0, original_idx)",
                            "Call"
                        ],
                        [
                            "unpacked_x.index_select(1, original_idx)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, max_num_frames - out.shape[1]])",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, max_num_frames - out.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/graph_convolution.py": {
        "torch": {
            "ParameterList_16": {
                "variable": {
                    "value": "self.fc_dir_bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_dir_bias[-1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_17": {
                "variable": {
                    "value": "self.fc_dir_bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_dir_bias[:self.num_relations - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_18": {
                "variable": {
                    "value": "self.fc_dir_bias3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_dir_bias[self.num_relations - 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_23": {
                "variable": {
                    "value": "self.fc_gate_bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_gate_bias[-1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_24": {
                "variable": {
                    "value": "self.fc_gate_bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_gate_bias[:self.num_relations - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_25": {
                "variable": {
                    "value": "self.fc_gate_bias3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.fc_gate_bias[self.num_relations - 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yes.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.max_num_keys).type_as(degrees_inv).unsqueeze(0) * degrees_inv.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "node",
                            "variable"
                        ],
                        [
                            "torch.matmul(normalize, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(x))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "yes.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(x, yes.float()), x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.max_num_keys).type_as(degrees_inv).unsqueeze(0) * degrees_inv.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "node",
                            "variable"
                        ],
                        [
                            "torch.matmul(normalize, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g + bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(adj_mat == r).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(x + bias) * g1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "out + self._compute_one_direction(node, self.fc_dir_weight[0], self.fc_dir_bias1, adj_mat, [1], self.fc_gate_weight[0], self.fc_gate_bias1)",
                            "BinOp"
                        ],
                        [
                            "self._compute_one_direction(node, self.fc_dir_weight[1], self.fc_dir_bias2, adj_mat, range(2, self.num_relations + 1), self.fc_gate_weight[1], self.fc_gate_bias2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "data": {
                    "value": "torch.zeros(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "torch.zeros(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "degrees + 1 - yes.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_66": {
                "n": {
                    "value": "self.max_num_keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/multihead_attention.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "utils.softmax(attn_weights, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(key_padding_mask.unsqueeze(1).unsqueeze(2), torch.Tensor([float('-Inf')]), attn_weights.float()).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_175": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "utils.softmax(attn_weights, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(key_padding_mask.unsqueeze(1).unsqueeze(2), torch.Tensor([float('-Inf')]), attn_weights.float()).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_215": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros(key_padding_mask.size(0), 1).type_as(key_padding_mask)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_padding_mask.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.Tensor([float('-Inf')])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "attn_weights.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "key_padding_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules_/tanh_attention.py": {
        "torch": {
            "Dropout_9": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.ws1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.ws2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.wst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wst(torch.tanh(item)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(memory_mask == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.softmax(S, -1))",
                            "Call"
                        ],
                        [
                            "S.masked_fill(forward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(backward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "forward_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_37": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wst(torch.tanh(item)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(memory_mask == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.softmax(S, -1))",
                            "Call"
                        ],
                        [
                            "S.masked_fill(forward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(backward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "backward_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_20": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item1.unsqueeze(2) + item2.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optimizer/adam_optimizer.py": {
        "torch": {
            "zeros_like_105": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_124": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "optimizer/base_optimizer.py": {
        "torch": {
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimizer/lr_scheduler/reduce_lr_on_plateau.py": {
        "torch": {}
    },
    "runners/runner_final.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, args.feature_path, args.train_data, self.word2vec, args.max_num_frames, args.max_num_words, args.max_num_nodes, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_39": {
                "dataset": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, args.feature_path, args.val_data, self.word2vec, args.max_num_frames, args.max_num_words, args.max_num_nodes, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, args.feature_path, args.test_data, self.word2vec, args.max_num_frames, args.max_num_words, args.max_num_nodes, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "'cuda:%d' % device_ids[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_saved_path, 'model-%d' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "ModuleList_12": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}