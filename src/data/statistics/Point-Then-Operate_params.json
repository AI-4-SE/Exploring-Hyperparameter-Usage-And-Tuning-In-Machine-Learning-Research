{
    "PTO-amazon/Experiment.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_242": {
                "variable": {
                    "value": "self.criterionCls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_416": {
                "variable": {
                    "value": "oprt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_423": {
                "variable": {
                    "value": "bare_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_424": {
                "variable": {
                    "value": "T_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_427": {
                "variable": {
                    "value": "IF_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_434": {
                "variable": {
                    "value": "IB_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_441": {
                "variable": {
                    "value": "Del_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 3",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_447": {
                "variable": {
                    "value": "Rep_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_484": {
                "variable": {
                    "value": "star_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_499": {
                "variable": {
                    "value": "IF_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IF_word_prob_f * IF_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_506": {
                "variable": {
                    "value": "IB_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IB_word_prob_f * IB_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_513": {
                "variable": {
                    "value": "Rep_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rep_word_prob_f * Rep_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_577": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'test': self.test_set, 'val': self.val_set}[val_or_test]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_696": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_697": {
                "variable": {
                    "value": "bare_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_615": {
                "variable": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_709": {
                "variable": {
                    "value": "__active_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 - direction - cls_mask) > cls_stop",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_716": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_mask[res_idx]",
                            "Subscript"
                        ],
                        [
                            "att_mask[__active_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_751": {
                "variable": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sent_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_758": {
                "variable": {
                    "value": "oprt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sent_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_759": {
                "variable": {
                    "value": "bare_bars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bare_bars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bare_bar_InsFront, bare_bar_InsBehind, bare_bar_Replace, bare_bar_Delthis, bare_bar_Delbefore, bare_bar_Delafter, bare_bar_NotChange]",
                            "List"
                        ],
                        [
                            "torch.stack(bare_bars, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_764": {
                "variable": {
                    "value": "__infront_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_765": {
                "variable": {
                    "value": "__insbehind_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_766": {
                "variable": {
                    "value": "__replace_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_767": {
                "variable": {
                    "value": "__notchange_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "config.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_466": {
                "input": {
                    "value": "cls - cls_bare_bar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_627": {
                "variable": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_748": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction - cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_839": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_847": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_142": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "getattr(self, module).state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_165": {
                "obj": {
                    "value": "getattr(self, module).state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_207": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_236": {
                "params": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "getattr(self, scope + '_lr')",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "[config.beta1, config.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_749": {
                "input": {
                    "value": "torch.sqrt(sent_prob_f * sent_prob_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "_pow_lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_709": {
                "input": {
                    "value": "1 - direction - cls_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_749": {
                "input": {
                    "value": "sent_prob_f * sent_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_775": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_782": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_799": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_807": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_815": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_823": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/data.py": {
        "torch": {}
    },
    "PTO-amazon/LM/dataloaders/amazon.py": {
        "torch": {
            "narrow_73": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start": {
                    "value": "nbatch * bsz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_75": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/embed_regularize.py": {
        "torch": {
            "embedding_18": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random_integers(low=0, high=V - 1, size=(batch_size, bptt))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(words)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-amazon/LM/finetune.py": {
        "torch": {
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ASGD_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.dropouth, args.dropouti, args.dropoute, args.wdrop, args.tied)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/generate.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.div(args.temperature).exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/lm_config.py": {
        "torch": {
            "is_available_35": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/locked_dropout.py": {
        "torch": {}
    },
    "PTO-amazon/LM/main.py": {
        "torch": {}
    },
    "PTO-amazon/LM/model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.idrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouti",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.hdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/pointer.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax_output_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, ntokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, size), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[one_hot(t.data[0], ntokens) for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[pointer_history, Variable(rnn_out.data)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_99": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_pointer_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointer_history[start_idx + idx - window:start_idx + idx]",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "rnn_out[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "ptr_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "target_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[targets[idx].data]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-amazon/LM/splitcross.py": {
        "torch": {
            "Embedding_183": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(embed.parameters()) + list(crit.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_144": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/LM/utils.py": {
        "torch": {}
    },
    "PTO-amazon/LM/weight_drop.py": {
        "torch": {
            "Linear_65": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_83": {
                "*args": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/Losses/BackLoss.py": {
        "torch": {
            "cross_entropy_17": {
                "input": {
                    "value": "lgt",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_16": {
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/Losses/GANLoss.py": {
        "torch": {
            "pow_23": {
                "input": {
                    "value": "F.sigmoid(input) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "F.sigmoid(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gpu_wrapper(Variable(torch.ones(input.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gpu_wrapper(Variable(torch.zeros(input.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "input + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_30": {
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/Losses/Reward.py": {
        "torch": {
            "log_23": {
                "variable": {
                    "value": "sample_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_probs.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.float().contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-amazon/Modules/Losses/SeqLoss.py": {
        "torch": {
            "cross_entropy_28": {
                "input": {
                    "value": "logits.contiguous().view(-1, self.voc_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gts.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "voc_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/attention_classifier.py": {
        "torch": {
            "GRU_23": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.dim_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim_h * self.n_dir, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.dim_h * self.n_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/delete.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "_del",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/discriminator.py": {
        "torch": {
            "Dropout_32": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.kernels) * self.conv_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Dropout(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Dropout(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "(pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'block{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "(pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'block{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "nn.Conv2d(1, conv_dim, kernel_size=(kernel, self.dim_h), padding=(0, 0), stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Conv1d(self.dim_h, self.conv_dim, kernel_size=kernel, padding=kernel // 2, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel, self.dim_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "self.dim_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/gate.py": {
        "torch": {
            "GRU_19": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "oprt_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(oprt_prob, oprt_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(oprt_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/insback.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "ib_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ib_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "ib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ib_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(ib_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/insfront.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "if_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "if_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "_if",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "if_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(if_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/replace.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "rep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(rep_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/Modules/subModules/attention.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(torch.tanh(t_query + t_key)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(keys, trans_queries).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "key_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(queries).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "alpha_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(torch.tanh(t_query + t_key)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(keys, trans_queries).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_75": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sm.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "input": {
                    "value": "t_query + t_key",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/classifier.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'test': self.test_set, 'val': self.val_set}[val_or_test]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "n_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "n_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.C.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.Emb.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "path_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_188": {
                "variable": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C(bare_emb_0).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.C(bare_emb_0).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_wrapper(torch.zeros(n_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_189": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C(bare_emb_1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.C(bare_emb_1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_wrapper(torch.ones(n_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_262": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_81": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "np.array(labels, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_232": {
                "input": {
                    "value": "pred_1 - label_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/config.py": {
        "torch": {
            "is_available_74": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/dataloaders/amazon.py": {
        "torch": {
            "squeeze_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/language_model.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "(self.model, self.criterion, self.optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "self.ntokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_242": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data_source[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_245": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-nll",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(index).unsqueeze(1) + self.go, data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_248": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(index).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_252": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(seq_len).unsqueeze(1) + self.eos, reversed_data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_267": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reversed_data_source[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_270": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-nll",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_304": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(index).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_308": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(index).unsqueeze(1) + self.eos, reversed_data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_321": {
                "variable": {
                    "value": "prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ASGD_127": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_251": {
                "variable": {
                    "value": "reversed_data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_307": {
                "variable": {
                    "value": "reversed_data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(5, int(np.random.normal(bptt, 5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_229": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(5, int(np.random.normal(bptt, 5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_252": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_308": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/utils/utils.py": {
        "torch": {
            "zeros_like_29": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_47": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.div(torch.log(probs + 1e-20), config.temp_att))",
                            "Call"
                        ],
                        [
                            "probs",
                            "Name"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "input": {
                    "value": "(logits + G) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_44": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(torch.log(probs + 1e-20), config.temp_att)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_44": {
                "input": {
                    "value": "torch.log(probs + 1e-20)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "config.temp_att",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "probs + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-amazon/utils/vocab.py": {
        "torch": {}
    },
    "PTO-yelp/Experiment.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_243": {
                "variable": {
                    "value": "self.criterionCls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_418": {
                "variable": {
                    "value": "oprt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_425": {
                "variable": {
                    "value": "bare_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_426": {
                "variable": {
                    "value": "T_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_429": {
                "variable": {
                    "value": "IF_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_436": {
                "variable": {
                    "value": "IB_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_443": {
                "variable": {
                    "value": "Del_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 3",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_449": {
                "variable": {
                    "value": "Rep_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_486": {
                "variable": {
                    "value": "star_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_501": {
                "variable": {
                    "value": "IF_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IF_word_prob_f * IF_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_508": {
                "variable": {
                    "value": "IB_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IB_word_prob_f * IB_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_515": {
                "variable": {
                    "value": "Rep_word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rep_word_prob_f * Rep_word_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_579": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'test': self.test_set, 'val': self.val_set}[val_or_test]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_698": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_699": {
                "variable": {
                    "value": "bare_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bare",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_711": {
                "variable": {
                    "value": "__active_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 - direction - cls_mask) > cls_stop",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_718": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_mask[res_idx]",
                            "Subscript"
                        ],
                        [
                            "att_mask[__active_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_753": {
                "variable": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sent_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_760": {
                "variable": {
                    "value": "oprt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sent_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_761": {
                "variable": {
                    "value": "bare_bars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bare_bars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bare_bar_InsFront, bare_bar_InsBehind, bare_bar_Replace, bare_bar_Delthis, bare_bar_Delbefore, bare_bar_Delafter, bare_bar_NotChange]",
                            "List"
                        ],
                        [
                            "torch.stack(bare_bars, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_766": {
                "variable": {
                    "value": "__infront_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_767": {
                "variable": {
                    "value": "__insbehind_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_768": {
                "variable": {
                    "value": "__replace_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_769": {
                "variable": {
                    "value": "__notchange_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt == 6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "config.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_468": {
                "input": {
                    "value": "cls - cls_bare_bar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_629": {
                "variable": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_0, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat(clss_1, dim=0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_750": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction - cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_841": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_849": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_143": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "getattr(self, module).state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_166": {
                "obj": {
                    "value": "getattr(self, module).state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_208": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, '{}-{}.ckpt'.format(self.iter_num, module))",
                            "Call"
                        ],
                        [
                            "os.path.join(config.save_model_dir, 'best-{}.ckpt'.format(module))",
                            "Call"
                        ],
                        [
                            "os.path.join('pretrained/pretrained-{}.ckpt'.format(module))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_237": {
                "params": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "getattr(self, scope + '_lr')",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "[config.beta1, config.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_751": {
                "input": {
                    "value": "torch.sqrt(sent_prob_f * sent_prob_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "_pow_lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_711": {
                "input": {
                    "value": "1 - direction - cls_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_751": {
                "input": {
                    "value": "sent_prob_f * sent_prob_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_777": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_784": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_801": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_809": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_817": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_825": {
                "input": {
                    "value": "before_indices < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/data.py": {
        "torch": {}
    },
    "PTO-yelp/LM/dataloaders/yelp.py": {
        "torch": {
            "narrow_74": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start": {
                    "value": "nbatch * bsz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_76": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/embed_regularize.py": {
        "torch": {
            "embedding_18": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random_integers(low=0, high=V - 1, size=(batch_size, bptt))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(words)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-yelp/LM/finetune.py": {
        "torch": {
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ASGD_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.dropouth, args.dropouti, args.dropoute, args.wdrop, args.tied)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/generate.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.div(args.temperature).exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/lm_config.py": {
        "torch": {
            "is_available_35": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/locked_dropout.py": {
        "torch": {}
    },
    "PTO-yelp/LM/main.py": {
        "torch": {}
    },
    "PTO-yelp/LM/model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.idrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouti",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.hdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/pointer.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax_output_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, ntokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, size), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[one_hot(t.data[0], ntokens) for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[pointer_history, Variable(rnn_out.data)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_99": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_pointer_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointer_history[start_idx + idx - window:start_idx + idx]",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "rnn_out[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "ptr_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "target_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[targets[idx].data]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-yelp/LM/splitcross.py": {
        "torch": {
            "Embedding_183": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(embed.parameters()) + list(crit.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_144": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/LM/utils.py": {
        "torch": {}
    },
    "PTO-yelp/LM/weight_drop.py": {
        "torch": {
            "Linear_65": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_83": {
                "*args": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/Losses/BackLoss.py": {
        "torch": {
            "cross_entropy_17": {
                "input": {
                    "value": "lgt",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_16": {
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/Losses/GANLoss.py": {
        "torch": {
            "pow_23": {
                "input": {
                    "value": "F.sigmoid(input) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "F.sigmoid(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gpu_wrapper(Variable(torch.ones(input.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gpu_wrapper(Variable(torch.zeros(input.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "input + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_30": {
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/Losses/Reward.py": {
        "torch": {
            "log_23": {
                "variable": {
                    "value": "sample_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_probs.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.float().contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "PTO-yelp/Modules/Losses/SeqLoss.py": {
        "torch": {
            "cross_entropy_28": {
                "input": {
                    "value": "logits.contiguous().view(-1, self.voc_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gts.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "voc_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/attention_classifier.py": {
        "torch": {
            "GRU_23": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.dim_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim_h * self.n_dir, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.dim_h * self.n_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/delete.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "_del",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/discriminator.py": {
        "torch": {
            "Dropout_32": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.kernels) * self.conv_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Dropout(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Dropout(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "(pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'block{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "(pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'block{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "nn.Conv2d(1, conv_dim, kernel_size=(kernel, self.dim_h), padding=(0, 0), stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Conv1d(self.dim_h, self.conv_dim, kernel_size=kernel, padding=kernel // 2, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel, self.dim_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "self.dim_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/gate.py": {
        "torch": {
            "GRU_19": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "oprt_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(oprt_prob, oprt_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "oprt_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(oprt_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/insback.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "ib_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ib_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "ib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ib_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(ib_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/insfront.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "if_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "if_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "_if",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "if_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(if_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/replace.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self.Encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h * (2 if bi else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.voc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gthr_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gthr_hid, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "rep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP(gthr_hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(sample_prob, sample_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(rep_lgt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/Modules/subModules/attention.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "atten_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(torch.tanh(t_query + t_key)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(keys, trans_queries).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_40": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "key_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(queries).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "alpha_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(torch.tanh(t_query + t_key)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(keys, trans_queries).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sm.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "attened_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "input": {
                    "value": "t_query + t_key",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/classifier.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'test': self.test_set, 'val': self.val_set}[val_or_test]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "n_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "n_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.C.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.Emb.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "path_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join('utils', 'best-{}-Emb.ckpt'.format(self.model_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_188": {
                "variable": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C(bare_emb_0).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.C(bare_emb_0).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_wrapper(torch.zeros(n_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_189": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C(bare_emb_1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.C(bare_emb_1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_wrapper(torch.ones(n_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_262": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bare_0.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_81": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "np.array(labels, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_232": {
                "input": {
                    "value": "pred_1 - label_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/config.py": {
        "torch": {
            "is_available_74": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/dataloaders/yelp.py": {
        "torch": {
            "squeeze_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/language_model.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "(self.model, self.criterion, self.optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "self.ntokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_84": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_243": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data_source[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_246": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-nll",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(index).unsqueeze(1) + self.go, data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_249": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(index).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(seq_len).unsqueeze(1) + self.eos, reversed_data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_268": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reversed_data_source[1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_271": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-nll",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(seq_len).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(index).unsqueeze(1) + self.go, data_source], dim=1)",
                            "Call"
                        ],
                        [
                            "data_source.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_309": {
                "variable": {
                    "value": "reversed_data_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(index).unsqueeze(1) + self.eos, reversed_data_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output).view(-1, self.ntokens)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.model.decoder(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ASGD_128": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_252": {
                "variable": {
                    "value": "reversed_data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_308": {
                "variable": {
                    "value": "reversed_data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_source[B, :l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(5, int(np.random.normal(bptt, 5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_230": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_286": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_286": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_253": {
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(5, int(np.random.normal(bptt, 5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_253": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_309": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_309": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/utils/utils.py": {
        "torch": {
            "zeros_like_29": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_47": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.div(torch.log(probs + 1e-20), config.temp_att))",
                            "Call"
                        ],
                        [
                            "probs",
                            "Name"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "input": {
                    "value": "(logits + G) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_44": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(torch.log(probs + 1e-20), config.temp_att)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_44": {
                "input": {
                    "value": "torch.log(probs + 1e-20)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "config.temp_att",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "probs + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PTO-yelp/utils/vocab.py": {
        "torch": {}
    }
}