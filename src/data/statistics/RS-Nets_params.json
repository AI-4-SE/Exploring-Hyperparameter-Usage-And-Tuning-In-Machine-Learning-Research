{
    "quantization/learned_quant.py": {
        "tensorflow": {
            "constant_initializer_34": {
                "variable": {
                    "value": "init_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[NORM_PPF_0_75 * 2 / (2 ** nbit - 1) * 2.0 ** i for i in range(nbit)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_149": {
                "variable": {
                    "value": "init_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[NORM_PPF_0_75 * 2 / (2 ** nbit - 1) * 2.0 ** i for i in range(nbit)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel_shape + [in_channel // split, 1]",
                            "BinOp"
                        ],
                        [
                            "kernel_shape + [in_channel // split, out_channel]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_368": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_378": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_388": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_398": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "basis",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "bit_dims",
                    "type": "List",
                    "possible_values": [
                        [
                            "[nbit, 1]",
                            "List"
                        ],
                        [
                            "[nbit, num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[NORM_PPF_0_75 * 2 / (2 ** nbit - 1) * 2.0 ** i for i in range(nbit)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "level_codes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_level_multiplier",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "level_codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(init_level_multiplier)",
                            "Call"
                        ],
                        [
                            "tf.constant(init_level_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('basis', bit_dims, tf.float32, initializer=init_basis, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('basis', bit_dims, tf.float32, initializer=init_basis, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_64": {
                "variable": {
                    "value": "(levels, sort_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(levels, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "num_levels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 ** nbit",
                            "BinOp"
                        ],
                        [
                            "2 ** nbit",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reverse_65": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_66": {
                "variable": {
                    "value": "sort_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sort_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "sort_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sort_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "thrs_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_thrs_multiplier",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "thrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "thrs_multiplier",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(init_thrs_multiplier)",
                            "Call"
                        ],
                        [
                            "tf.constant(init_thrs_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "reshape_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "zero_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(reshape_x)[0], nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_76": {
                "variable": {
                    "value": "bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "zero_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([tf.shape(reshape_x)[0], nbit])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.shape(reshape_x)[0] * num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "zero_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_78": {
                "variable": {
                    "value": "zero_bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "zero_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([tf.shape(reshape_x)[0], nbit])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.shape(reshape_x)[0] * num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_118": {
                "variable": {
                    "value": "x_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "levels[num_levels - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_174": {
                "variable": {
                    "value": "basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "basis",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "bit_dims",
                    "type": "List",
                    "possible_values": [
                        [
                            "[nbit, 1]",
                            "List"
                        ],
                        [
                            "[nbit, num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[NORM_PPF_0_75 * 2 / (2 ** nbit - 1) * 2.0 ** i for i in range(nbit)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant_initializer(init_basis)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_180": {
                "variable": {
                    "value": "level_codes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_level_multiplier",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_181": {
                "variable": {
                    "value": "thrs_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_thrs_multiplier",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_182": {
                "variable": {
                    "value": "sum_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, tf.reshape(x, [-1, num_filters]).get_shape()[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_183": {
                "variable": {
                    "value": "sum_multiplier_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "level_codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(init_level_multiplier)",
                            "Call"
                        ],
                        [
                            "tf.constant(init_level_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('basis', bit_dims, tf.float32, initializer=init_basis, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('basis', bit_dims, tf.float32, initializer=init_basis, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_188": {
                "variable": {
                    "value": "(levels, sort_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(levels, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "num_levels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 ** nbit",
                            "BinOp"
                        ],
                        [
                            "2 ** nbit",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reverse_189": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_190": {
                "variable": {
                    "value": "sort_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sort_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "variable": {
                    "value": "levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "sort_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sort_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "thrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "thrs_multiplier",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(init_thrs_multiplier)",
                            "Call"
                        ],
                        [
                            "tf.constant(init_thrs_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "reshape_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "level_codes_channelwise_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[num_levels * num_filters, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_198": {
                "variable": {
                    "value": "level_codes_channelwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "level_codes_channelwise_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([num_levels * num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "level_codes_channelwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "level_codes_channelwise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(level_codes_channelwise_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(eq, [-1]), level_codes_channelwise + level_codes[i], level_codes_channelwise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(level_codes_channelwise, [num_levels, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_levels, num_filters, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "zero_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(reshape_x)[0] * num_filters, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_206": {
                "variable": {
                    "value": "bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "zero_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([tf.shape(reshape_x)[0], nbit])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.shape(reshape_x)[0] * num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "variable": {
                    "value": "zero_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_208": {
                "variable": {
                    "value": "zero_bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "zero_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([tf.shape(reshape_x)[0], nbit])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.shape(reshape_x)[0] * num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "zero_bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zero_bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zero_bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), zero_bits_y + level_codes[sort_id[i + 1][0]], bits_y)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit]), bits_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, in_channel, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_328": {
                "variable": {
                    "value": "b_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_332": {
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.abs(W))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_339": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_347": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_348": {
                "variable": {
                    "value": "kernels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "quantized_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "QuantizedWeight('weight_quant', kernel_in, n, nbit=nbit)",
                            "Call"
                        ],
                        [
                            "kernel_in",
                            "Name"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_351": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.conv2d(i, k, stride, padding, data_format=data_format) for (i, k) in zip(inputs, kernels)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ret",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nl(tf.nn.bias_add(conv, b, data_format=data_format) if use_bias else conv, name='output')",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, [-1, out_channel])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, out_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "ActivationQuantization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_80": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "thrs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_81": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ],
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "zero_y + levels[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "tf.where(g, zero_y + levels[i + 1], y)",
                            "Call"
                        ],
                        [
                            "x_clip + tf.stop_gradient(-x_clip) + tf.stop_gradient(y)",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(x) + levels[0]",
                            "BinOp"
                        ],
                        [
                            "tf.where(g, zero_y + levels[i + 1], y)",
                            "Call"
                        ],
                        [
                            "x + tf.stop_gradient(-x) + tf.stop_gradient(y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_82": {
                "variable": {
                    "value": "bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reshape(g, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_bits_y + level_codes[sort_id[i + 1][0]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), zero_bits_y + level_codes[sort_id[i + 1][0]], bits_y)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit]), bits_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_transpose_85": {
                "variable": {
                    "value": "BT",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), zero_bits_y + level_codes[sort_id[i + 1][0]], bits_y)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit]), bits_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "BTxB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=BTxB)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "BTxX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=BTxX)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_200": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sort_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(sort_id, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sort_id, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, num_levels)",
                            "Call"
                        ],
                        [
                            "range(1, num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels - 1)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(num_levels)",
                            "Call"
                        ],
                        [
                            "range(1, num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels - 1)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_201": {
                "variable": {
                    "value": "level_codes_channelwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reshape(eq, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "level_codes_channelwise + level_codes[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "level_codes_channelwise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(level_codes_channelwise_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(eq, [-1]), level_codes_channelwise + level_codes[i], level_codes_channelwise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(level_codes_channelwise, [num_levels, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_211": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "thrs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_212": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ],
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "zero_y + levels[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "tf.where(g, zero_y + levels[i + 1], y)",
                            "Call"
                        ],
                        [
                            "x_clip + tf.stop_gradient(-x_clip) + tf.stop_gradient(y)",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(x) + levels[0]",
                            "BinOp"
                        ],
                        [
                            "tf.where(g, zero_y + levels[i + 1], y)",
                            "Call"
                        ],
                        [
                            "x + tf.stop_gradient(-x) + tf.stop_gradient(y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_213": {
                "variable": {
                    "value": "bits_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reshape(g, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), zero_bits_y + level_codes[sort_id[i + 1][0]], bits_y)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit]), bits_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "BT",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bits_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.fill(zero_dims, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), zero_bits_y + level_codes[sort_id[i + 1][0]], bits_y)",
                            "Call"
                        ],
                        [
                            "tf.fill(zero_dims, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reshape(g, [-1]), tf.reshape(zero_bits_y + level_codes_channelwise[i + 1], [-1, nbit]), bits_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bits_y, [-1, num_filters, nbit])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "BTxB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=BTxB)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, nbit, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "BTxX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=BTxX)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "new_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=new_basis)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_332": {
                "input_tensor": {
                    "value": "tf.abs(W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_343": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "quantized_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "QuantizedWeight('weight_quant', kernel_in, n, nbit=nbit)",
                            "Call"
                        ],
                        [
                            "kernel_in",
                            "Name"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_345": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "quantized_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "QuantizedWeight('weight_quant', kernel_in, n, nbit=nbit)",
                            "Call"
                        ],
                        [
                            "kernel_in",
                            "Name"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_64": {
                "a": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "BTxXi0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BT[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "reshape_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "BTxXi0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "BTxXi0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(BT[i], reshape_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(BTxXi0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(BT[i], reshape_x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(sum_multiplier, BTxXi0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "new_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "BTxB_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(BTxB)",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(BTxB_transpose)",
                            "Call"
                        ],
                        [
                            "tf.transpose(BTxB_inv, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(values=inv), [nbit, nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "tf.reciprocal(BTxB)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "BTxX",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "BTxX + delta * basis",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_119": {
                "input": {
                    "value": "-x_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_188": {
                "a": {
                    "value": "levels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(level_codes, basis)",
                            "Call"
                        ],
                        [
                            "tf.reverse(levels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(levels, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_231": {
                "variable": {
                    "value": "BTxB_transpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "BTxB",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_235": {
                "variable": {
                    "value": "BTxB_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "BTxB_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(BTxB)",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(BTxB_transpose)",
                            "Call"
                        ],
                        [
                            "tf.transpose(BTxB_inv, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(values=inv), [nbit, nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "tf.reciprocal(BTxB)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_249": {
                "variable": {
                    "value": "BTxXi0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BT[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "reshape_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "BTxXi0",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sum_multiplier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=[1, tf.reshape(x, [-1, num_filters]).get_shape()[0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "BTxXi0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(BT[i], reshape_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(BTxXi0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(BT[i], reshape_x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(sum_multiplier, BTxXi0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_257": {
                "variable": {
                    "value": "new_basis_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BTxB_inv[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "BTxX",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "BTxX + delta * basis",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_258": {
                "variable": {
                    "value": "new_basis_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sum_multiplier_basis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=[1, nbit])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "new_basis_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(BTxB_inv[i], BTxX)",
                            "Call"
                        ],
                        [
                            "tf.matmul(sum_multiplier_basis, new_basis_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_265": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "updata_moving_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(basis, new_basis, MOVING_AVERAGES_FACTOR)",
                            "Call"
                        ],
                        [
                            "moving_averages.assign_moving_average(basis, new_basis, MOVING_AVERAGES_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_267": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_332": {
                "x": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=W_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_349": {
                "input": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, num_levels)",
                            "Call"
                        ],
                        [
                            "range(1, num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels - 1)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(num_levels)",
                            "Call"
                        ],
                        [
                            "range(1, num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels - 1)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ],
                        [
                            "range(nbit)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_353": {
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(outputs, channel_axis)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, quantized_weight, stride, padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, quantized_weight, stride, padding, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ],
                        [
                            "tf.greater(x, thrs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_90": {
                "variable": {
                    "value": "BTxBij",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BT[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "BT[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "BTxBij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "BTxBij",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(BT[i], BT[j])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(BTxBij)",
                            "Call"
                        ],
                        [
                            "tf.multiply(BT[i], BT[j])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sum_multiplier, BTxBij)",
                            "Call"
                        ],
                        [
                            "BTxBij + delta * mat_one",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_93": {
                "values": {
                    "value": "BTxB",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_103": {
                "values": {
                    "value": "BTxX",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "BTxX + delta * basis",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_111": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "updata_moving_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(basis, new_basis, MOVING_AVERAGES_FACTOR)",
                            "Call"
                        ],
                        [
                            "moving_averages.assign_moving_average(basis, new_basis, MOVING_AVERAGES_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_116": {
                "name": {
                    "value": "'basis%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "basis[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "tensor": {
                    "value": "eq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(sort_id, i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "tensor": {
                    "value": "zero_bits_y + level_codes_channelwise[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nbit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_222": {
                "variable": {
                    "value": "BTxBij",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BT[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "BT[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "BTxBij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sum_multiplier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=[1, tf.reshape(x, [-1, num_filters]).get_shape()[0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "BTxBij",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(BT[i], BT[j])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(BTxBij)",
                            "Call"
                        ],
                        [
                            "tf.multiply(BT[i], BT[j])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sum_multiplier, BTxBij)",
                            "Call"
                        ],
                        [
                            "BTxBij + delta * mat_one",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_228": {
                "values": {
                    "value": "BTxB",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "BTxB_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(values=inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbit, nbit, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_252": {
                "values": {
                    "value": "BTxX",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxX), [nbit, num_filters])",
                            "Call"
                        ],
                        [
                            "BTxX + delta * basis",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_260": {
                "values": {
                    "value": "new_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(BTxB_inv, BTxX)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=new_basis), [nbit, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "reshape_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_113": {
                "name": {
                    "value": "'new_basis%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "new_basis[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "mat_one",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reciprocal_245": {
                "variable": {
                    "value": "BTxB_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BTxB",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(values=BTxB), [nbit, nbit, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_182": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, in_channel, 1, 1])",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant', x)",
                            "Call"
                        ],
                        [
                            "BatchNorm('bn', x, data_format='NHWC', use_scale=False, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_205": {
                "input": {
                    "value": "reshape_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_237": {
                "x": {
                    "value": "BTxB[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "BTxB[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_243": {
                "values": {
                    "value": "inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "quantization/models/resnet.py": {
        "tensorflow": {
            "pad_26": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AvgPooling('poolshortcut', l, stride, stride, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, paddings, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-preact%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant2', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, nl=get_bn(scale, zero_init=False))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 1, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant2', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant3', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv3', l, ch_out * 4, 1, nl=get_bn(scale, zero_init=False))",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-last%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant_last', l)",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale, preact, block_type='B')",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-last%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale, preact, block_type='A')",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, nl=get_bn(scale, zero_init=True))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 1, stride=stride if stride_first else 1, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, stride=1 if stride_first else stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv3', l, ch_out * 4, 1, nl=get_bn(scale, zero_init=True))",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[0, 0], [0, n_out - n_in], [0, 0], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, n_out - n_in]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_62": {
                "features": {
                    "value": "BatchNorm(scope_name, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AvgPooling('poolshortcut', l, stride, stride, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, paddings, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-preact%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant1', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant2', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, nl=get_bn(scale, zero_init=False))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 1, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant2', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant3', l)",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv3', l, ch_out * 4, 1, nl=get_bn(scale, zero_init=False))",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-last%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "QuantizedActiv('quant_last', l)",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale, preact, block_type='B')",
                            "Call"
                        ],
                        [
                            "BNReLU('bn-last%03d' % scale, l)",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale, preact, block_type='A')",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 3, stride=stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, nl=get_bn(scale, zero_init=True))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv1', l, ch_out, 1, stride=stride if stride_first else 1, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv2', l, ch_out, 3, stride=1 if stride_first else stride, nl=get_bnrelu(scale))",
                            "Call"
                        ],
                        [
                            "Conv2DQuant('conv3', l, ch_out * 4, 1, nl=get_bn(scale, zero_init=True))",
                            "Call"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, scale)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "'block{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "'block{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'block{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "quantization/utils.py": {
        "tensorflow": {
            "add_n_237": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss, wd_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_251": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_275": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logit / SOFTMAX_TEM",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_276": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss + SOFTMAX_TEM ** 2 * loss_distill / distill_num * len(scales)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logit, labels=label)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='xentropy-loss')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logit, labels=soft_label)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='kl-loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy-loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_293": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logit / SOFTMAX_TEM",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "soft_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.nn.softmax(logit_ensemble))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.nn.softmax(logit[scales[i]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss + SOFTMAX_TEM ** 2 * loss_distill / distill_num * len(scales)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logit, labels=label)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='xentropy-loss')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logit, labels=soft_label)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='kl-loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "kl-loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_211": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(scales)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "alpha_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('alpha', [len(scales)], initializer=tf.constant_initializer(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_220": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(logit_ensemble)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "polynomial_decay_254": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_global_step_var()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "640000 if self.double_iter else 320000",
                    "type": "IfExp",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_256": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=self.lr, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(self.lr, global_step, 640000 if self.double_iter else 320000, 1e-05, power=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_257": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=self.lr, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(self.lr, global_step, 640000 if self.double_iter else 320000, 1e-05, power=1.0)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "image_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_270": {
                "variable": {
                    "value": "image_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_gpu_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_190": {
                "shape": {
                    "value": "[None, self.image_shape, self.image_shape, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorSpec_191": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image_origin, [scale, scale], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(image - image_mean) / image_std",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_261": {
                "name": {
                    "value": "image_preprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image_origin, [scale, scale], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(image - image_mean) / image_std",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_280": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.in_top_k(logit, label, topk)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_281": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.nn.in_top_k(logit, label, topk))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'incorrect_vector'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_285": {
                "input_tensor": {
                    "value": "wrong",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prediction_incorrect(logit, label, 1, name='wrong-scale%s-top1' % scale)",
                            "Call"
                        ],
                        [
                            "prediction_incorrect(logit, label, 5, name='wrong-scale%s-top5' % scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'train-error-scale%s-top1' % scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "input_tensor": {
                    "value": "wrong",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prediction_incorrect(logit, label, 1, name='wrong-scale%s-top1' % scale)",
                            "Call"
                        ],
                        [
                            "prediction_incorrect(logit, label, 5, name='wrong-scale%s-top5' % scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'train-error-scale%s-top5' % scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "'alpha%03d' % scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha_soft[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_220": {
                "logits": {
                    "value": "logit_ensemble",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "logit_ensemble + alpha_soft[i] * tf.stop_gradient(logit[scale])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_225": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(logit[scales[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_279": {
                "name": {
                    "value": "prediction_incorrect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_211": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_214": {
                "input": {
                    "value": "logit[scale]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "in_top_k_280": {
                "targets": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logit / SOFTMAX_TEM",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_225": {
                "logits": {
                    "value": "logit[scales[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/imagenet.py": {
        "torch": {
            "Parameter_171": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_sizes, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_182": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](baseWidth=args.base_width, cardinality=args.cardinality)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](groups=args.groups)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](extent=args.extent, theta=args.theta, excite=args.excite)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](num_parallel=n_sizes)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "alpha_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.ones(n_sizes, requires_grad=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_377": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "n_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(args.sizes)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_176": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](baseWidth=args.base_width, cardinality=args.cardinality)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](groups=args.groups)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](extent=args.extent, theta=args.theta, excite=args.excite)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](num_parallel=n_sizes)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_200": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_351": {
                "variable": {
                    "value": "alpha_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.ones(n_sizes, requires_grad=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_307": {
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_308": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_309": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_313": {
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_314": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_315": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/models/imagenet/parallel.py": {
        "torch": {
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/models/imagenet/parallel_mobilenetv2.py": {
        "torch": {
            "Sequential_37": {
                "*args": {
                    "value": "ModuleParallel(nn.Conv2d(inp, oup, 3, stride, 1, bias=False))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "ModuleParallel(nn.Conv2d(inp, oup, 1, 1, 0, bias=False))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ModuleParallel(nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ModuleParallel(nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_48": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_123": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_make_divisible(c * width_mult, 8)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * width_mult, 8) if width_mult > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_65": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_75": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_79": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/models/imagenet/parallel_resnet.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_141": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "non-quantization/utils/dataloaders.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[target[1] for target in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(imgs), 3, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop()]), [transforms.Compose([transforms.Resize((size, size)), transforms.RandomHorizontalFlip(), transforms.ToTensor()]) for size in sizes])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "_worker_init_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(valdir, None, [transforms.Compose([transforms.Resize(int(size / 0.875)), transforms.CenterCrop(size), transforms.ToTensor()]) for size in sizes])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "_worker_init_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "tens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nump_array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(nump_array, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(nump_array, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485 * 255, 0.456 * 255, 0.406 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229 * 255, 0.224 * 255, 0.225 * 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Stream_32": {
                "variable": {
                    "value": "stream",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_81": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop()]), [transforms.Compose([transforms.Resize((size, size)), transforms.RandomHorizontalFlip(), transforms.ToTensor()]) for size in sizes])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_107": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(valdir, None, [transforms.Compose([transforms.Resize(int(size / 0.875)), transforms.CenterCrop(size), transforms.ToTensor()]) for size in sizes])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "nump_array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(nump_array, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(nump_array, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_stream_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/utils/eval.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/utils/functional.py": {
        "torch": {
            "as_tensor_215": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean, dtype=dtype, device=tensor.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_216": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(std, dtype=dtype, device=tensor.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_438": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "matrix",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[math.cos(angle + shear[0]), math.sin(angle + shear[0]), 0, -math.sin(angle + shear[1]), math.cos(angle + shear[1]), 0]",
                            "List"
                        ],
                        [
                            "[scale / d * m for m in matrix]",
                            "ListComp"
                        ],
                        [
                            "_get_inverse_affine_matrix(center, angle, translate, scale, shear)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "startpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int32, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int16, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.float32, copy=False))",
                            "Call"
                        ],
                        [
                            "img.view(pic.size[1], pic.size[0], nchannel)",
                            "Call"
                        ],
                        [
                            "img.transpose(0, 1).transpose(0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "255 * torch.from_numpy(np.array(pic, np.uint8, copy=False))",
                            "BinOp"
                        ],
                        [
                            "torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))",
                            "Call"
                        ],
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right)), padding_mode)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ],
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), padding_mode)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right)), padding_mode)",
                            "Call"
                        ],
                        [
                            "crop(img, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(img, size, interpolation)",
                            "Call"
                        ],
                        [
                            "vflip(img)",
                            "Call"
                        ],
                        [
                            "hflip(img)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('RGB')",
                            "Call"
                        ],
                        [
                            "img.point(gamma_map)",
                            "Call"
                        ],
                        [
                            "img.convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB')",
                            "Call"
                        ],
                        [
                            "img.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "nppic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/utils/misc.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_46": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/utils/transforms.py": {
        "torch": {
            "mm_824": {
                "variable": {
                    "value": "transformed_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.view(1, -1) - self.mean_vector",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.transformation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_1269": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[img_c, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1271": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[center - value, center + value]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "non-quantization/utils/vision.py": {
        "torch": {}
    }
}