{
    "src/utils/verification.py": {
        "sklearn": {
            "KFold_34": {
                "variable": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "nrof_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/GradCam.py": {
        "torch": {
            "cosine_similarity_55": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img1)",
                            "Call"
                        ],
                        [
                            "self.extractor(img1, img2)",
                            "Call"
                        ],
                        [
                            "l2normalize(out1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img2)",
                            "Call"
                        ],
                        [
                            "self.extractor(img1, img2)",
                            "Call"
                        ],
                        [
                            "l2normalize(out2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/data_loader/base_data_loader.py": {
        "torch": {
            "SubsetRandomSampler_51": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.delete(idx_full, np.arange(0, len_valid))",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_52": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_full[0:len_valid]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.valid_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/data_loader/face_datasets.py": {
        "torch": {
            "CosineSimilarity_23": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1210": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(img) for img in imgs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_880": {
                "tensors": {
                    "value": "faces_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.transforms(img) for img in faces_imgs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_pair",
                            "variable"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.tensor(img)",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "datasets.folder.default_loader(path)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "Image.open(path).convert('RGB')",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "self.alignment.align(img, landmark)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ],
                        [
                            "Image.open(op.join(self.ijba_data_root, 'images', fname)).convert('RGB')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data_loader/mnist_result.py": {
        "torch": {}
    },
    "src/main.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "resumed_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/base_model.py": {
        "torch": {}
    },
    "src/model/face_recog.py": {
        "torch": {
            "norm_19": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, (3, 3), 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, (3, 3), 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(512, 32, (1, 1), 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0",
                            "Method Argument"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_230": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_242": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0",
                            "Method Argument"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_244": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_301": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_339": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_354": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embbedings",
                            "Method Argument"
                        ],
                        [
                            "embbedings",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_357": {
                "variable": {
                    "value": "cos_theta_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_359": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_theta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - cos_theta_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_370": {
                "variable": {
                    "value": "idx_",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(embbedings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_383": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_391": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embbedings",
                            "Method Argument"
                        ],
                        [
                            "embbedings",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_49": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_55": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_76": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_132": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "p": {
                    "value": "drop_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_ratio",
                            "Method Argument"
                        ],
                        [
                            "drop_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_137": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_171": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_175": {
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "p": {
                    "value": "drop_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_ratio",
                            "Method Argument"
                        ],
                        [
                            "drop_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_181": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/loss.py": {
        "torch": {
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "data_dict[self.target_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_dict[self.target_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_46": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_63": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_65": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "L1Loss_67": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model/metric.py": {
        "torch": {
            "topk_111": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[self.output_key]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "pred[:, i] == target",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/model.py": {
        "torch": {
            "CosineSimilarity_17": {
                "variable": {
                    "value": "cosineDim1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_194": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_200": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_201": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(c1)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "c2_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(c2_flatten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_204": {
                "variable": {
                    "value": "c2_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(c2_flatten))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_206": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(c2_dropout)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_226": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta1s, theta2s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta1s, theta2s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_200": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_201": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(c1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/networks.py": {
        "torch": {
            "ConvTranspose2d_17": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.deconv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_19": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.deconv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.deconv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_23": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.deconv4_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_25": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1_bn(self.deconv1(input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_bn(self.deconv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_bn(self.deconv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_bn(self.deconv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.conv4_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_bn(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_56": {
                "variable": {
                    "value": "new_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "getattr(self, attr_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/xcos_modules.py": {
        "torch": {
            "CosineSimilarity_8": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / x.view(x.size(0), x.size(1), -1).sum(dim=2).repeat(1, 1, x.size(2) * x.size(3)).view(x.size(0), x.size(1), x.size(2), x.size(3))",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.embedding_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "fused_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv1, conv2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "input": {
                    "value": "x.reshape(x.size(0), x.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/pipeline/base_pipeline.py": {
        "torch": {
            "load_190": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_95": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu_use > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.device_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/pipeline/training_pipeline.py": {
        "torch": {
            "save_126": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': model_state, 'optimizers': {key: optimizer.state_dict() for (key, optimizer) in self.optimizers.items()}, 'monitor_best': self.monitor_best, 'config': global_config, 'train_iteration_count': self.train_iteration_count, 'valid_iteration_counts': self.valid_iteration_counts}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.saving_dir, f'ckpt-ep{epoch:04d}-{monitored_name}{self.monitor_best:.4f}{best_str}.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/insight2xcos.py": {
        "torch": {
            "save_50": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model_state}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../pretrained_model/xcos/20200217_accu_9931_Arcface.pth'",
                            "str"
                        ],
                        [
                            "'../pretrained_model/xcos/20200226_accu_9968_Cosface.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_34": {
                "f": {
                    "value": "backbone_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'work_space/save/model_2019-08-25-14-35_accuracy:0.9931666666666666_step:218349_None.pth'",
                            "str"
                        ],
                        [
                            "'work_space/save/model_2019-09-02-08-21_accuracy:0.9968333333333333_step:436692_CosFace.pth'",
                            "str"
                        ],
                        [
                            "op.join(insight_dir, backbone_weights_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_35": {
                "f": {
                    "value": "atten_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'work_space/save/model_attention_2019-08-25-14-35_accuracy:0.9931666666666666_step:218349_None.pth'",
                            "str"
                        ],
                        [
                            "'work_space/save/model_attention_2019-09-02-08-21_accuracy:0.9968333333333333_step:436692_CosFace.pth'",
                            "str"
                        ],
                        [
                            "op.join(insight_dir, atten_weights_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_36": {
                "f": {
                    "value": "backbone_target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'work_space/save/model_ir_se50.pth'",
                            "str"
                        ],
                        [
                            "'work_space/save/model_irse50_CosFace_ms1m_9039.pth'",
                            "str"
                        ],
                        [
                            "op.join(insight_dir, backbone_target_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/insight_to_normal_face_model.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model_state}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../pretrained_model/baseline/20200228_accu_9952_Arcface_backbone.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_28": {
                "f": {
                    "value": "backbone_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.join(insight_dir, backbone_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/util.py": {
        "torch": {
            "eye_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/visualization.py": {
        "torch": {
            "SummaryWriter_13": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "writer_dir",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "src/worker/tester.py": {
        "torch": {
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_58": {
                "obj": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary[key]",
                            "Subscript"
                        ],
                        [
                            "avg_metrics.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/worker/validator.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/worker/worker_template.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "img_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['data_input']",
                            "Subscript"
                        ],
                        [
                            "torch.cat(img_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(losses.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_122": {
                "obj": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_159": {
                "mode": {
                    "value": "self.enable_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "visualizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_visualize_xcos(img1s, img2s, grid_cos_maps, attention_maps)",
                            "Call"
                        ],
                        [
                            "visualizations[:10]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}