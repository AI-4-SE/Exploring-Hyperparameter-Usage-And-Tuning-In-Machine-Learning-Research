{
    "graph_level/utils.py": {
        "sklearn": {},
        "torch": {
            "zeros_55": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join('.datasets', 'Plantoid')",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Coauthor', dataset.lower())",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Amazon', dataset.lower())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_63": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_87": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "predict + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "conv.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "graph_level/conv.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(emb_dim, 2 * emb_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.root_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_72": {
                "variable": {
                    "value": "self.iden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.root_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "self.virtualnode_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_199": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.mlp_virtualnode_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "x_j + edge_attr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "x_j + edge_attr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "x_j + edge_attr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ],
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "batch[-1].item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_237": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ],
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_239": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_134": {
                "num_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_212": {
                "num_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "torch.nn.Linear(emb_dim, 2 * emb_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_255": {
                "variable": {
                    "value": "virtualnode_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_virtualnode_list[layer](virtualnode_embedding_temp)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "x + self.root_emb.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_89": {
                "input": {
                    "value": "x + self.root_emb.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_151": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ],
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_215": {
                "num_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_216": {
                "num_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_239": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ],
                        [
                            "self.convs[layer](h_list[layer], edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.drop_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "h + h_list[layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_253": {
                "input": {
                    "value": "self.mlp_virtualnode_list[layer](virtualnode_embedding_temp)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graph_level/gnn.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "self.graph_pred_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.graph_pred_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.graph_pred_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.graph_pred_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "torch.nn.Linear(emb_dim, 2 * emb_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "torch.nn.Linear(emb_dim, 2 * emb_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_101": {
                "num_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_level/main_preg.py": {
        "torch": {
            "BCEWithLogitsLoss_17": {
                "variable": {
                    "value": "cls_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_18": {
                "variable": {
                    "value": "reg_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_106": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'Val': valid_curve[best_val_epoch], 'Test': test_curve[best_val_epoch], 'Train': train_curve[best_val_epoch], 'BestTrain': best_train, 'mu': mu, 'valid_curve': valid_curve, 'test_curve': test_curve, 'train_curve': train_curve, 'dataset': args.dataset, 'model': 'iad' + args.gnn, 'epochs': args.epochs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "result/ + args.dataset + _preg + args.gnn + _ + str(mu) + _ + str(args.epochs) + _ + str(seed) + _ + str(num_seeds) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "node_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.gnn_node.m1(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "input": {
                    "value": "node_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.gnn_node.m1(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "norm_31": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r - y_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "true_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.log_softmax(dim=self.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_21": {
                "input": {
                    "value": "torch.sum(-true_dist * pred, dim=self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "-true_dist * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "logit + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "softmax_29": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data.x, data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_30": {
                "variable": {
                    "value": "loss_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(output_1[mask] + EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "output_1[mask] + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "input": {
                    "value": "model.propagation(data.x, data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "phi.py": {
        "torch": {
            "kl_div_11": {
                "input": {
                    "value": "torch.log(soft_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_15": {
                "input": {
                    "value": "soft_target - predict",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_11": {
                "input": {
                    "value": "soft_target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_7": {
                "input": {
                    "value": "predict + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_55": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join('.datasets', 'Plantoid')",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Coauthor', dataset.lower())",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Amazon', dataset.lower())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_63": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_86": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}