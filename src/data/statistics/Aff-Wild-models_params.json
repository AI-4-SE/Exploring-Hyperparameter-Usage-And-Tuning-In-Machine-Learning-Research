{
    "affwildnet/vggface_gru.py": {
        "tensorflow": {
            "get_variable_66": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[h, w, c_i, c_o], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape().as_list())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_83": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_78": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.get_output(), kernel, [1] * 4, padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases_rnn', [num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [self.batch_size, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feed_in, [-1, self.seq_size, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1, self.seq_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.seq_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_136": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_137": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [self.batch_size, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feed_in, [-1, self.seq_size, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1, self.seq_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.seq_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_136": {
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer[3]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data_process.py": {
        "tensorflow": {
            "read_file_44": {
                "variable": {
                    "value": "file_content",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_45": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0][i])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "eval_script.py": {
        "tensorflow": {
            "DEFINE_integer_16": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The batch size to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "seq_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the sequence length: how many consecutive frames to use for the RNN; if the network is only CNN then put here any number you want : total_batch_size = batch_size * seq_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "dimensions of input images, e.g. 96x96",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "network",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "vggface_4096",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": " which network architecture we want to use,  pick between : vggface_4096, vggface_2000, affwildnet_vggface, affwildnet_resnet ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "input_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/homes/input.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the input file : it should be in the format: image_file_location,valence_value,arousal_value  and images should be jpgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "pretrained_model_checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/homes/model.ckpt-0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the pretrained model checkpoint path to restore,if there exists one  ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_41": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_51": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "label_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_input_producer_54": {
                "variable": {
                    "value": "input_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[images, labels, images]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "seed": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shared_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "to_float_56": {
                "variable": {
                    "value": "images_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(images_batch)",
                            "Call"
                        ],
                        [
                            "images_batch / 128.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(images_batch, [-1, 96, 96, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "images_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(images_batch)",
                            "Call"
                        ],
                        [
                            "images_batch / 128.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(images_batch, [-1, 96, 96, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels_batch, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_108": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_122": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_120": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.sequence_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_82": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(128) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_83": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(128) for _ in range(2)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(net, [FLAGS.batch_size, FLAGS.sequence_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (FLAGS.batch_size * FLAGS.sequence_length, 128))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(FLAGS.batch_size * FLAGS.sequence_length, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_86": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_output",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases_output",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "xw_plus_b_96": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (FLAGS.batch_size * FLAGS.sequence_length, 128))",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_output', shape=[128, 2], initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases_output', shape=[2], initializer=tf.zeros_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRUCell_82": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vggface/vggface_4096x2000x2.py": {
        "tensorflow": {
            "get_variable_70": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[h, w, c_i, c_o], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape().as_list())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_87": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_82": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.get_output(), kernel, [1] * 4, padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "vggface/vggface_4096x4096x2.py": {
        "tensorflow": {
            "get_variable_70": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[h, w, c_i, c_o], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape().as_list())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_87": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_82": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.get_output(), kernel, [1] * 4, padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_unique_name_(layer[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ],
                        [
                            "self.get_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}