{
    "code/dataloader.py": {
        "torch": {}
    },
    "code/emd_module.py": {
        "torch": {
            "rand_80": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "price",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "bid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "bid_increments",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "max_increments",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "unass_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "max_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "unass_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "unass_cnt_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "cnt_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/model.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, nchannel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.point_scales, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.latentfeature([x1, x2, x3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x_128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x_256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.conv6(x_512))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_128)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_256)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_512)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_1024, x_512, x_256, x_128]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nchannel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.Convlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Convlayer(point_scales=self.input_scale_list[i], nchannel=nchannel) for i in range(self.num_resolution)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(latentfeature))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 2)",
                            "Call"
                        ],
                        [
                            "latentfeature.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(latentfeature)))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(latentfeature, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc_fine_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1920",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc_mid_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_low_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc_fine_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_scale_list[2] * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc_mid_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_scale_list[1] * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc_low_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_scale_list[0] * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_115": {
                "variable": {
                    "value": "self.conv_mid_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.output_scale_list[1] / self.output_scale_list[0] * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.output_scale_list[1] / self.output_scale_list[0] * 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_116": {
                "variable": {
                    "value": "self.conv_fine_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "variable": {
                    "value": "self.conv_fine_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "variable": {
                    "value": "self.conv_fine_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.output_scale_list[2] / self.output_scale_list[1] * 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x_fine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_fine_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "x_mid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_mid_1(x_fine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "x_low",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_low_1(x_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "pc_mid_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_mid_2(x_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "pc_fine_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_fine_2(x_fine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "pc_fine_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_fine_1(pc_fine_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "pc_fine_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_fine_2(pc_fine_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "pc_low_xyz_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_low_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pc_low_feat.reshape(-1, self.output_scale_list[0], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "pc_mid_xyz_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_mid_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_mid_1(pc_mid_feat)",
                            "Call"
                        ],
                        [
                            "pc_mid_xyz.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pc_mid_xyz.reshape(-1, self.output_scale_list[0], int(self.output_scale_list[1] / self.output_scale_list[0]), 3)",
                            "Call"
                        ],
                        [
                            "pc_low_xyz_expand + pc_mid_xyz",
                            "BinOp"
                        ],
                        [
                            "pc_mid_xyz.reshape(-1, self.output_scale_list[1], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_151": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_153": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_156": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "xr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(xr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_164": {
                "variable": {
                    "value": "para_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(xr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_173": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_175": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_176": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_182": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.drop4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_185": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.drop5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "fea1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(fea1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "fea2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(fea2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "xr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fea1, fea2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_196": {
                "variable": {
                    "value": "para_r21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(xr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "fea3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(fea3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fea1, fea3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_204": {
                "variable": {
                    "value": "para_t21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(xt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.latentfeature([x1, x2, x3])",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn(x[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_162": {
                "input": {
                    "value": "self.bn1(self.fc1(xr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_163": {
                "input": {
                    "value": "self.bn2(self.fc2(xr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "input": {
                    "value": "self.bn1(self.fc1(xr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_195": {
                "input": {
                    "value": "self.bn2(self.fc2(xr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_202": {
                "input": {
                    "value": "self.bn4(self.fc4(xt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_203": {
                "input": {
                    "value": "self.bn5(self.fc5(xt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[i], feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/operations.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "pts_in_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=(0, 2048, nchannel))",
                            "Call"
                        ],
                        [
                            "np.concatenate((pts_in, np.array(f['in1'])), axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "pts_in[-5:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_27": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "grad_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "ctx.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad_out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_73": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, npoint]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "xyz.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_74": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[B, N]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "xyz.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/pointnet_util.py": {
        "torch": {
            "mean_163": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.bmm(trans, trans.transpose(2, 1) - I), dim=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_93": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_94": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feature], dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_138": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_139": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_140": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_141": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_142": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "emb_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_143": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_144": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_145": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_146": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_147": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feature], dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fstn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_160": {
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_163": {
                "input": {
                    "value": "torch.bmm(trans, trans.transpose(2, 1) - I)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_32": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feature], dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feature], dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_126": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feature], dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_163": {
                "input": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans.transpose(2, 1) - I",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "np.eye(self.k).flatten().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/test.py": {
        "torch": {
            "bmm_42": {
                "variable": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus.view(args.batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "minus.view(args.batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "variable": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(minus.view(args.batch_size, 1, -1), minus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_minus)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_44": {
                "variable": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plus.view(args.batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "plus.view(args.batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(plus.view(args.batch_size, 1, -1), plus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_plus)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataLoader(root=DATA_PATH, npoint=args.input_scale_list[0], split='test', category=CATES)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_comp_cr.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_orient_cr.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_regi_cr.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_comp_rc.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_orient_rc.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/best_regi_rc.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "torch.min(d_minus, d_plus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_46": {
                "input": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(minus.view(args.batch_size, 1, -1), minus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_minus)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "M21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(gt_para21_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(gt_para21_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_130": {
                "variable": {
                    "value": "M12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(gt_para12_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(gt_para12_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "in_cr_pts1_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_cr_pts1_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "in_cr_pts2_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_cr_pts2_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "gt_cr_pts12_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_cr_pts1_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "gt_cr_pts21_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_cr_pts2_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "out_cr_pts1_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_cr_pts1_comp, in_pts1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "out_cr_pts2_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_cr_pts2_comp, in_pts2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "in_rc_pts31_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_rc_pts21_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "in_rc_pts32_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_rc_pts12_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "out_rc_pts1_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_rc_pts31_comp, in_rc_pts31_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "out_rc_pts2_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_rc_pts32_comp, in_rc_pts32_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "(gt_pts1, in_pts1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "(gt_pts2, in_pts2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(gt_pts31, in_rc_pts31_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "(gt_pts32, in_rc_pts32_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_175": {
                "input": {
                    "value": "out_cr_para12_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_para12_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_189": {
                "input": {
                    "value": "out_rc_para12_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_para12_t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "torch": {
            "bmm_50": {
                "variable": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus.view(args.batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "minus.view(args.batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "variable": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(minus.view(args.batch_size, 1, -1), minus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_minus)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_52": {
                "variable": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plus.view(args.batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "plus.view(args.batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "variable": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_plus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(plus.view(args.batch_size, 1, -1), plus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_plus)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_385": {
                "variable": {
                    "value": "trainDataLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataLoader(root=DATA_PATH, npoint=args.input_scale_list[0], split='train', category=CATES)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_386": {
                "variable": {
                    "value": "valDataLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VAL_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataLoader(root=DATA_PATH, npoint=args.input_scale_list[0], split='val', category=CATES)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_456": {
                "variable": {
                    "value": "scheduler_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_comp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(comp_cr.parameters()) + list(comp_rc.parameters()), lr=args.learning_rate * len(GPU_LIST), betas=(0.9, 0.999), eps=1e-05, weight_decay=args.decay_rate)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(list(comp_cr.parameters()) + list(comp_rc.parameters()), lr=args.learning_rate, betas=(0.9, 0.999), eps=1e-05, weight_decay=args.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_457": {
                "variable": {
                    "value": "scheduler_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_regi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(regi_cr.parameters()) + list(regi_rc.parameters()), lr=args.learning_rate * len(GPU_LIST), betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(list(regi_cr.parameters()) + list(regi_rc.parameters()), lr=args.learning_rate, betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_458": {
                "variable": {
                    "value": "scheduler_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_orient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(orient_cr.parameters()) + list(orient_rc.parameters()), lr=args.learning_rate * len(GPU_LIST), betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(list(orient_cr.parameters()) + list(orient_rc.parameters()), lr=args.learning_rate, betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "torch.min(d_minus, d_plus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_76": {
                "variable": {
                    "value": "T_eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_401": {
                "variable": {
                    "value": "orient_cr",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "orient_cr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.orient_model().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(orient_cr, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "orient_cr.train()",
                            "Call"
                        ],
                        [
                            "orient_cr.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_402": {
                "variable": {
                    "value": "orient_rc",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "orient_rc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.orient_model().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(orient_rc, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "orient_rc.train()",
                            "Call"
                        ],
                        [
                            "orient_rc.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_403": {
                "variable": {
                    "value": "regi_cr",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "regi_cr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.regi_model().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(regi_cr, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "regi_cr.train()",
                            "Call"
                        ],
                        [
                            "regi_cr.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_404": {
                "variable": {
                    "value": "regi_rc",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "regi_rc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.regi_model().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(regi_rc, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "regi_rc.train()",
                            "Call"
                        ],
                        [
                            "regi_rc.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_405": {
                "variable": {
                    "value": "comp_cr",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "comp_cr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.comp_model(args.input_scale_list, args.output_scale_list, args.num_channel)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(comp_cr, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "comp_cr.train()",
                            "Call"
                        ],
                        [
                            "comp_cr.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_406": {
                "variable": {
                    "value": "comp_rc",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "comp_rc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.comp_model(args.input_scale_list, args.output_scale_list, args.num_channel)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(comp_rc, device_ids=GPU_LIST)",
                            "Call"
                        ],
                        [
                            "comp_rc.train()",
                            "Call"
                        ],
                        [
                            "comp_rc.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "GPU_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_all_409": {
                "seed": {
                    "value": "manual_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_412": {
                "variable": {
                    "value": "optimizer_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(comp_cr.parameters()) + list(comp_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate * len(GPU_LIST)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_419": {
                "variable": {
                    "value": "optimizer_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(regi_cr.parameters()) + list(regi_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate * len(GPU_LIST)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_426": {
                "variable": {
                    "value": "optimizer_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(orient_cr.parameters()) + list(orient_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate * len(GPU_LIST)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_434": {
                "variable": {
                    "value": "optimizer_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(comp_cr.parameters()) + list(comp_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_441": {
                "variable": {
                    "value": "optimizer_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(regi_cr.parameters()) + list(regi_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_448": {
                "variable": {
                    "value": "optimizer_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(orient_cr.parameters()) + list(orient_rc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_54": {
                "input": {
                    "value": "d_minus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(minus.view(args.batch_size, 1, -1), minus.view(args.batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(d_minus)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_132": {
                "variable": {
                    "value": "M21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(gt_para21_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(gt_para21_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "M12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(gt_para12_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(gt_para12_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "out_rc_pts1_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_rc_pts31_comp, in_rc_pts31_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "out_rc_pts2_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_rc_pts32_comp, in_rc_pts32_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "in_cr_pts1_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, gt_pts1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "in_cr_pts2_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, gt_pts2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "gt_cr_pts12_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, gt_pts1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "gt_cr_pts21_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, gt_pts2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "in_cr_pts1_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_cr_pts1_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "in_cr_pts2_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_cr_pts2_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "gt_cr_pts12_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_cr_pts1_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "gt_cr_pts21_regi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_cr_pts2_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "in_rc_pts31_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, gt_rc_pts21_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "in_rc_pts32_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, gt_rc_pts12_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "in_rc_pts31_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts1, out_rc_pts21_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "in_rc_pts32_comp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pts2, out_rc_pts12_regi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_279": {
                "variable": {
                    "value": "M_cr_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_cr_12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(out_cr_para12_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_cr_12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_cr_para12_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_282": {
                "variable": {
                    "value": "M_cr_21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_cr_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(out_cr_para21_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_cr_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_cr_para21_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_285": {
                "variable": {
                    "value": "M_rc_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_rc_12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(out_rc_para12_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_rc_12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_rc_para12_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_288": {
                "variable": {
                    "value": "M_rc_21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_rc_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.translation2matrix_torch(out_rc_para21_t)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_rc_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_rc_para21_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_494": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_510": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_526": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_542": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_558": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_574": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_cr.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_comp, 'model_state_dict': comp_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_regi, 'model_state_dict': regi_rc.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'total loss': loss_orient, 'model_state_dict': orient_rc.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/best_comp_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_cr.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_comp_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_regi_rc.pth'",
                            "BinOp"
                        ],
                        [
                            "str(checkpoints_dir) + '/best_orient_rc.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_199": {
                "input": {
                    "value": "out_cr_para12_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_para12_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_212": {
                "input": {
                    "value": "out_rc_para12_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_para12_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_276": {
                "input": {
                    "value": "R2_cr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_cr_para_canonical_2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "R2_rc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans.quaternion2matrix_torch(out_rc_para_canonical_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_289": {
                "input": {
                    "value": "torch.bmm(M_rc_12, M_rc_21)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "T_eye",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(4)",
                            "Call"
                        ],
                        [
                            "T_eye.reshape((1, 4, 4))",
                            "Call"
                        ],
                        [
                            "T_eye.repeat(args.batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "T_eye.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_290": {
                "input": {
                    "value": "M_cr_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(T_cr_21, R_cr_21)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M_rc_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(T_rc_21, R_rc_21)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_291": {
                "input": {
                    "value": "dist_emd(torch.cat((in_pts2, out_cr_pts2_comp), 1), out_rc_pts2_final)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_289": {
                "input": {
                    "value": "M_rc_12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(T_rc_12, R_rc_12)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "M_rc_21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(T_rc_21, R_rc_21)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(in_pts2, out_cr_pts2_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/trans.py": {
        "torch": {
            "eye_37": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_76": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "rotMat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "rotMat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quat.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "(x1, y1, z1, w1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_115": {
                "variable": {
                    "value": "(x2, y2, z2, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([-0.420084, -0.560112, 0.70014, 0.140028])",
                            "Call"
                        ],
                        [
                            "np.empty((4,))",
                            "Call"
                        ],
                        [
                            "q[[3, 0, 1, 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "[x1 * w2 + y1 * z2 - z1 * y2 + w1 * x2, -x1 * z2 + y1 * w2 + z1 * x2 + w1 * y2, x1 * y2 - y1 * x2 + z1 * w2 + w1 * z2, -x1 * x2 - y1 * y2 - z1 * z2 + w1 * w2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(rot, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "input": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform[:, :3, 3]",
                            "Subscript"
                        ],
                        [
                            "transform[:3, 3]",
                            "Subscript"
                        ],
                        [
                            "transform[:, :3, 3]",
                            "Subscript"
                        ],
                        [
                            "transform[:3, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "input": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform[:, :3, :3]",
                            "Subscript"
                        ],
                        [
                            "transform[:3, :3]",
                            "Subscript"
                        ],
                        [
                            "transform[:, :3, :3]",
                            "Subscript"
                        ],
                        [
                            "transform[:3, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}