{
    "PNAS/PNASnet.py": {
        "torch": {
            "ModuleList_35": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.conv0_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C * self.stem2.multiplier // 2",
                            "BinOp"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "PNAS/operations.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConstantPad2d_107": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(y[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_6": {
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=stride, padding=1, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SimpleNet/a.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "round_51": {
                "variable": {
                    "value": "pred_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_map.mul(255).add_(0.5).clamp_(0, 255)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SimpleNet/dataloader.py": {
        "torch": {}
    },
    "SimpleNet/loss.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "sum_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_25": {
                "variable": {
                    "value": "sum_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "sum_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "sum_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "mean_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_87": {
                "variable": {
                    "value": "std_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "mean_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_90": {
                "variable": {
                    "value": "std_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_map * gt).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_map * s_map).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt * gt).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "mean_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_113": {
                "variable": {
                    "value": "std_s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_map * gt).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "torch.sum(result, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "torch.sum(torch.min(s_map, gt), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "ab / torch.sqrt(aa * bb)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "s_map / count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "saliencyMap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "eps + gt / (s_map + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt * torch.log(eps + gt / (s_map + eps))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "torch.min(s_map, gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_79": {
                "input": {
                    "value": "s_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_map / (expand_s_map * 1.0)",
                            "BinOp"
                        ],
                        [
                            "s_map.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "normalize_map(s_map)",
                            "Call"
                        ],
                        [
                            "s_map / (expand_s_map * 1.0)",
                            "BinOp"
                        ],
                        [
                            "s_map.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "(s_map - mean_s_map) / std_s_map",
                            "BinOp"
                        ],
                        [
                            "s_map.cpu().squeeze(0).numpy()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(cv2.resize(s_map, (gt.size(2), gt.size(1)))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "s_map.cuda()",
                            "Call"
                        ],
                        [
                            "(s_map - mean_s_map) / (std_s_map + eps)",
                            "BinOp"
                        ],
                        [
                            "torch.sum((s_map * gt).view(batch_size, -1), 1)",
                            "Call"
                        ],
                        [
                            "s_map[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "s_map.numpy()",
                            "Call"
                        ],
                        [
                            "normalize_map(s_map)",
                            "Call"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ],
                        [
                            "s_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_99": {
                "input": {
                    "value": "aa * bb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_48": {
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "s_map.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SimpleNet/model.py": {
        "torch": {
            "ConstantPad2d_23": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_26": {
                "variable": {
                    "value": "self.linear_upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.deconv_layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=4320, out_channels=512, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.deconv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512 + 2160, out_channels=256, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.deconv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1080 + 256, out_channels=270, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.deconv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=540, out_channels=96, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.deconv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=192, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.deconv_layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out5, out4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_108": {
                "variable": {
                    "value": "self.linear_upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.conv_layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.dense)[:3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.conv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dense.pool0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.conv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dense.transition1[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.conv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dense.transition2[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.conv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dense.transition3[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.deconv_layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=2208, out_channels=512, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.deconv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512 + 1056, out_channels=256, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.deconv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=384 + 256, out_channels=192, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.deconv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=192 + 192, out_channels=96, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.deconv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=96 + 96, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.deconv_layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out5, out4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.conv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.conv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_221": {
                "variable": {
                    "value": "self.linear_upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.deconv_layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=2048, out_channels=1024, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.deconv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=2048, out_channels=512, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.deconv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.deconv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.deconv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=64, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.deconv_layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out5, out4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_307": {
                "variable": {
                    "value": "self.linear_upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "self.deconv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.deconv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "variable": {
                    "value": "self.deconv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.deconv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "self.deconv_layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out5, out4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_382": {
                "variable": {
                    "value": "self.linear_upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "variable": {
                    "value": "self.deconv_layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1280, out_channels=96, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_396": {
                "variable": {
                    "value": "self.deconv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=96 + 96, out_channels=32, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "self.deconv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=32 + 32, out_channels=24, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.deconv_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=24 + 24, out_channels=16, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_411": {
                "variable": {
                    "value": "self.deconv_layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16 + 16, out_channels=16, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_416": {
                "variable": {
                    "value": "self.deconv_layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16, out_channels=16, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out5, out4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "4320",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "512 + 2160",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "1080 + 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "270",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "540",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "2208",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "512 + 1056",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "384 + 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "192 + 192",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "96 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_311": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_316": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_320": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_321": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_331": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_377": {
                "f": {
                    "value": "pytorch/vision:v0.4.0",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "mobilenet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_391": {
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "96 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_403": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "24 + 24",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "16 + 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_413": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_417": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_418": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_18": {
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SimpleNet/test.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "vis_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestLoader(args.val_img_dir, val_img_ids)",
                            "Call"
                        ],
                        [
                            "SaliconDataset(val_img_dir, val_gt_dir, val_fix_dir, val_img_ids)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.no_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNASModel()",
                            "Call"
                        ],
                        [
                            "DenseModel()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "ResNetModel()",
                            "Call"
                        ],
                        [
                            "VGGModel()",
                            "Call"
                        ],
                        [
                            "MobileNetV2()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestLoader(args.val_img_dir, val_img_ids)",
                            "Call"
                        ],
                        [
                            "SaliconDataset(val_img_dir, val_gt_dir, val_fix_dir, val_img_ids)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.no_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_70": {
                "f": {
                    "value": "args.model_val_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SimpleNet/train.py": {
        "torch": {
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SaliconDataset(train_img_dir, train_gt_dir, train_fix_dir, train_img_ids)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.no_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SaliconDataset(val_img_dir, val_gt_dir, val_fix_dir, val_img_ids)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.no_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNASModel(train_enc=bool(args.train_enc), load_weight=args.load_weight)",
                            "Call"
                        ],
                        [
                            "DenseModel(train_enc=bool(args.train_enc), load_weight=args.load_weight)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "ResNetModel(train_enc=bool(args.train_enc), load_weight=args.load_weight)",
                            "Call"
                        ],
                        [
                            "VGGModel(train_enc=bool(args.train_enc), load_weight=args.load_weight)",
                            "Call"
                        ],
                        [
                            "MobileNetV2(train_enc=bool(args.train_enc), load_weight=args.load_weight)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "L1Loss_112": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(filter(lambda p: p.requires_grad, model.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(filter(lambda p: p.requires_grad, model.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(filter(lambda p: p.requires_grad, model.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_195": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adagrad(params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_count_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_val_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_val_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SimpleNet/utils.py": {
        "torch": {
            "round_53": {
                "variable": {
                    "value": "ndarr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid.mul(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}