{
    "src/agnews/utils.py": {
        "sklearn": {
            "accuracy_score_120": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(all_preds).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "y_pred.cpu().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/agnews/model.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "word_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_33": {
                "variable": {
                    "value": "self.lay_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_36": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "final_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_feature_map[i, :, :] for i in range(final_feature_map.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_184": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "word_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_187": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.config.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.config.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.config.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size * self.config.hidden_layers * (1 + self.config.bidirectional)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_202": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "final_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_feature_map[i, :, :] for i in range(final_feature_map.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_135": {
                "variable": {
                    "value": "saved_var[tensor_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_288": {
                "variable": {
                    "value": "saved_var[tensor_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__142": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__295": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_308": {
                "input": {
                    "value": "tensor.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/cifar10/dataset.py": {
        "torch": {
            "RandomSampler_20": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data, replacement=True)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "axi_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "axi_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/cifar10/resnet_si_layers.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_41": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_76": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_35": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_63": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "input": {
                    "value": "F.pad(input, expanded_padding, mode='circular')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_37": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_65": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_73": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((self.padding[1] + 1) // 2, self.padding[1] // 2, (self.padding[0] + 1) // 2, self.padding[0] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/cifar10/si_resnet.py": {
        "torch": {
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1((x, noise_std)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1((x, noise_std))))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2((out, noise_std)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut((x, noise_std))[0]",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1((x, noise_std))))",
                            "Call"
                        ],
                        [
                            "self.layer1((out, noise_std))",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out[0], 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear((out, noise_std))",
                            "Call"
                        ],
                        [
                            "self.finalbn(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1((x, noise_std)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SIConv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.finalbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/cifar10/si_vgg.py": {
        "torch": {
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.finalbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/cifar10/train.py": {
        "torch": {
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.12",
                            "Constant"
                        ]
                    ]
                }
            },
            "OneCycleLR_75": {
                "variable": {
                    "value": "scheduler_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.12",
                            "Constant"
                        ]
                    ]
                },
                "steps_per_epoch": {
                    "value": "len(train_loader)",
                    "type": "Call",
                    "possible_values": []
                },
                "epochs": {
                    "value": "epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(device), axi_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "saved_var[tensor_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(device), axi_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__30": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.5",
                            "Constant"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/cifar10/vgg_si_layers.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_41": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_35": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_63": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "input": {
                    "value": "F.pad(input, expanded_padding, mode='circular')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_149": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "1.0 / float(self.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "state_dict[num_batches_tracked_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_193": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_223": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_256": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "divisor_override": {
                    "value": "self.divisor_override",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_37": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_65": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_73": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((self.padding[1] + 1) // 2, self.padding[1] // 2, (self.padding[0] + 1) // 2, self.padding[0] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/dp_layers/dp_layers.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "variable": {
                    "value": "self.ln_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_88": {
                "variable": {
                    "value": "self.ln_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_89": {
                "variable": {
                    "value": "self.ln_ho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.hidden0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SILSTMCell(input_size=input_size if layer == 0 else hidden_size * num_directions, hidden_size=hidden_size, noise_std=self.noise_std, bias=bias) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_41": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_75": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.hidden1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SILSTMCell(input_size=input_size if layer == 0 else hidden_size * num_directions, hidden_size=hidden_size, noise_std=self.noise_std, bias=bias) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "[torch.cat((h[l0], h[l1]), dim=1) for h in ht]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_169": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ht[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ct[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[-1] for h in ht]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ht[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ct[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_like_35": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_62": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "F.pad(input, expanded_padding, mode='circular')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight + weight_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias + bias_noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_95": {
                "input": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_96": {
                "input": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_97": {
                "input": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_98": {
                "input": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_37": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_64": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_72": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((self.padding[1] + 1) // 2, self.padding[1] // 2, (self.padding[0] + 1) // 2, self.padding[0] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linear_109": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_ih + weight_noise_ih",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_ih + bias_noise_ih",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_110": {
                "input": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_zeros(input.size(0), self.hidden_size, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input.new_zeros(self.num_layers * num_directions, batch_size, self.hidden_size, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_hh + weight_noise_hh",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_hh + bias_noise_hh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "(h[l0], h[l1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/mnist/dataset.py": {
        "torch": {
            "RandomSampler_11": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_12": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_13": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "axi_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "axi_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.KMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/mnist/model.py": {
        "torch": {
            "MaxPool2d_12": {
                "variable": {
                    "value": "self.max_pool_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "variable": {
                    "value": "self.max_pool_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, noise_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, noise_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x, noise_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x, noise_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_20": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[6, 28, 28]",
                    "type": "List",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_21": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[16, 10, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_22": {
                "variable": {
                    "value": "self.n3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_23": {
                "variable": {
                    "value": "self.n4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.n3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.n4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/mnist/train.py": {
        "torch": {
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_64": {
                "variable": {
                    "value": "scheduler_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_14": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(device), axi_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "saved_var[tensor_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.to(device), axi_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__27": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "text_class.py": {
        "torch": {
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr * 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NLLLoss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_70": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}