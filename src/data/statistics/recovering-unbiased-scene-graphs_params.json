{
    "datasets/vg/generate_attribute_labels.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/build.py": {
        "torch": {
            "save_62": {
                "obj": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fg_matrix': statistics[0]['fg_matrix'], 'pred_dist': statistics[0]['pred_dist'], 'obj_classes': statistics[0]['obj_classes'], 'rel_classes': statistics[0]['rel_classes'], 'att_classes': statistics[0]['att_classes']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.OUTPUT_DIR, '{}.cache'.format(data_statistics_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_112": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "datasets[0]",
                            "Subscript"
                        ],
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "D.ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "datasets",
                            "variable"
                        ]
                    ]
                }
            },
            "SequentialSampler_114": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "datasets[0]",
                            "Subscript"
                        ],
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "D.ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "datasets",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchSampler_146": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "make_data_sampler(dataset, shuffle, is_distributed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "images_per_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.IMS_PER_BATCH",
                            "Attribute"
                        ],
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "datasets[0]",
                            "Subscript"
                        ],
                        [
                            "factory(**args)",
                            "Call"
                        ],
                        [
                            "D.ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "datasets",
                            "variable"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATALOADER.NUM_WORKERS",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, images_per_batch, drop_last=False)",
                            "Call"
                        ],
                        [
                            "samplers.GroupedBatchSampler(sampler, group_ids, images_per_batch, drop_uneven=False)",
                            "Call"
                        ],
                        [
                            "samplers.IterationBasedBatchSampler(batch_sampler, num_iters, start_iter)",
                            "Call"
                        ],
                        [
                            "make_batch_data_sampler(dataset, sampler, aspect_grouping, images_per_gpu, num_iters, start_iter)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBoxAugCollator() if not is_train and cfg.TEST.BBOX_AUG.ENABLED else BatchCollator(cfg.DATALOADER.SIZE_DIVISIBILITY)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_41": {
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.OUTPUT_DIR, '{}.cache'.format(data_statistics_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_76": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_283": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_284": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_289": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_238": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_242": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_288": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_37": {
                "obj": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/evaluation/vg/sgg_eval.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/evaluation/vg/sgg_eval_bkup.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/evaluation/vg/vg_eval.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "zeroshot_triplet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "maskrcnn_benchmark/data/datasets/evaluation/vg/zeroshot_triplet.pytorch",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "variable": {
                    "value": "attribute_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, num_attributes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "attributes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_472": {
                "input": {
                    "value": "with_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_472": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "{'predictions': new_predictions}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'soft-label_' + cache_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "stl_count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(51,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "stl_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(51,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "{'groundtruths': groundtruths, 'predictions': predictions}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, cache_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stl_probs / stl_count",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "raw_labeling_prob_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_folder, 'train_labeling_prob_raw.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stl_probs / stl_count",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "labeling_prob_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_308": {
                "obj": {
                    "value": "result_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_271": {
                "input": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stl_probs / stl_count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_269": {
                "input": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stl_probs / stl_count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/visual_genome.py": {
        "torch": {
            "from_numpy_185": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_boxes[index] / BOX_SCALE * max(w, h)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(box).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "relation_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_box, num_box)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "relation_map_multi_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_box, num_box, 51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "fg_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((num_obj_classes, num_obj_classes, num_rel_classes), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "ndarray": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(fg_matrix / fg_matrix.sum(2)[:, :, None] + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "ndarray": {
                    "value": "self.gt_classes[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "self.gt_attributes[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "stl_train_label_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_69": {
                "variable": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "raw_labeling_prob_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(stl_train_label_path.split('/')[:-1]) + '/' + raw_labeling_prob_fname",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_70": {
                "variable": {
                    "value": "nan_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(raw_labeling_prob_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_73": {
                "input": {
                    "value": "pred_soft_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field('pred_soft_labels')",
                            "Call"
                        ],
                        [
                            "pred_soft_labels / torch.sum(pred_soft_labels, dim=-1).view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "relation_map_stl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_box, num_box, 51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "relation_map_stl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(80, 80, 51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/voc.py": {
        "torch": {
            "tensor_120": {
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "gt_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "difficult_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/engine/bbox_aug.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.bbox for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.get_field('scores') for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "os.path.join(output_folder, cache_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_137": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/image_retrieval/dataloader.py": {
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGEncoding(train_ids, test_ids, sg_data=sg_data, test_on=test_on, val_on=val_on, num_test=num_test, num_val=num_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.SOLVER.IMS_PER_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not (test_on or val_on)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "SimpleCollator()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/image_retrieval/evaluation.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "cat_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_data, dim=0).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "cat_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/image_retrieval/model.py": {
        "torch": {
            "weight_norm_38": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(in_size, out_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.h_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, glimpses, 1, int(mid_features * self.hidden_aug)).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.h_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, glimpses, 1, 1).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ * self.h_weight",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(v_, q_)",
                            "Call"
                        ],
                        [
                            "h_.squeeze(3).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, self.glimpses, v_num * q_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.glimpse_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_v(v).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.drop(v_)",
                            "Call"
                        ],
                        [
                            "self.lin_v(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v_, atten.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atten.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_v(v).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.drop(v_)",
                            "Call"
                        ],
                        [
                            "self.lin_v(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v_, atten.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_q(q).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.lin_q(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "self.img_obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.img_rel_head_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.img_rel_tail_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.img_rel_pred_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_155": {
                "variable": {
                    "value": "self.txt_obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_156": {
                "variable": {
                    "value": "self.txt_rel_head_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "self.txt_rel_tail_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "variable": {
                    "value": "self.txt_rel_pred_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_160": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "BiAttention(v_features=self.embed_dim * 3, q_features=self.embed_dim, mid_features=self.hidden_dim, glimpses=self.num_layer, drop=0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_weight",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.final_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(self.hidden_dim, self.hidden_dim), nn.ReLU(inplace=True), nn.Linear(self.hidden_dim, self.final_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "rel_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rel_head_encode, rel_tail_encode, rel_pred_encode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "inp_dict[relations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_48": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.final_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/image_retrieval/modelv2.py": {
        "torch": {
            "weight_norm_38": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(in_size, out_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.glimpse_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_v(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v_, atten.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atten.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_v(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v_, atten.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_q(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_119": {
                "variable": {
                    "value": "self.img_obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_120": {
                "variable": {
                    "value": "self.img_rel_head_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.img_rel_tail_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_122": {
                "variable": {
                    "value": "self.img_rel_pred_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.img_num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_123": {
                "variable": {
                    "value": "self.txt_obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.txt_rel_head_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_125": {
                "variable": {
                    "value": "self.txt_rel_tail_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_126": {
                "variable": {
                    "value": "self.txt_rel_pred_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.txt_num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.final_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(self.hidden_dim, self.hidden_dim), nn.ReLU(inplace=True), nn.Linear(self.hidden_dim, self.final_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "rel_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rel_head_encode, rel_tail_encode, rel_pred_encode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "inp_dict[relations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "inp_dict[graph]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inp_dict['entities'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_48": {
                "variable": {
                    "value": "self.ac_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.final_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/image_retrieval/preprocessing.py": {
        "torch": {
            "load_188": {
                "variable": {
                    "value": "detected_result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "detected_path + 'eval_results.pytorch'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "rel_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, num_obj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "filter_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_matrix > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/balanced_norm.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.labeling_prob_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "labeling_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.labeling_prob_theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "fg_relation_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "rel_labels_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_relation_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(relation_logits[fg_idxs], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_16": {
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(torch.ones(1).cuda(), labeling_prob)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits) if isinstance(relation_logits, tuple) else relation_logits",
                            "IfExp"
                        ],
                        [
                            "cat(relation_logits) if isinstance(relation_logits, tuple) else relation_logits",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits) if isinstance(relation_logits, tuple) else relation_logits",
                            "IfExp"
                        ],
                        [
                            "cat(relation_logits) if isinstance(relation_logits, tuple) else relation_logits",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[init_prob] * num_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "rel_labels_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(fg_relation_probs, dtype=torch.int)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_120": {
                "input": {
                    "value": "labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.labeling_prob_theta)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.ones(1).cuda(), labeling_prob)) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.sum(fg_relation_probs * rel_labels_one_hot, dim=0) / torch.sum(rel_labels_one_hot, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "rel_labels_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(fg_relation_probs, dtype=torch.int)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/center_loss.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_31": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_28": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_conv_func.py": {
        "torch": {
            "zeros_like_211": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_214": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_conv_module.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels // self.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_172": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_pool_func.py": {
        "torch": {
            "zeros_like_71": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_pool_module.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/entropy_loss.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/kl_div_loss.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/label_smoothing_loss.py": {
        "torch": {
            "LogSoftmax_10": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "value_added",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x * smoothed_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(-x * smoothed_target, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_82": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(-x * smoothed_target, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "interpolate_80": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/sigmoid_focal_loss.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "class_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ],
                        [
                            "logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "class_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fbnet.py": {
        "torch": {
            "Sequential_101": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "rpn_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('blocks', blocks), ('last', last)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fbnet_builder.py": {
        "torch": {
            "zeros_245": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, 1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((C, 1, kernel_size, kernel_size), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "stage_info[2]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_751": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_cfg",
                            "variable"
                        ],
                        [
                            "stage_cfgs",
                            "variable"
                        ],
                        [
                            "arch_def['stages']",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "variable": {
                    "value": "bn_op",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_type[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "output_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dw1', dw1), ('dw2', dw2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_88": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p5 if self.use_P5 else c5",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_98": {
                "input": {
                    "value": "p6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_236": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu__329": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__333": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__342": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/vgg.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.conv_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/make_layers.py": {
        "torch": {
            "Linear_88": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_35": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "sqrt_38": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, final_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log2_78": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_79": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_130": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_41": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_91": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/attribute_head/attribute_head.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/roi_heads/attribute_head/loss.py": {
        "torch": {
            "zeros_69": {
                "variable": {
                    "value": "attribute_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, self.num_attri_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "attributes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_73": {
                "variable": {
                    "value": "pos_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "with_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "pos_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "selected_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_idxs, neg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_79": {
                "input": {
                    "value": "with_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_91": {
                "variable": {
                    "value": "all_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.FloatTensor([self.pos_weight] * self.num_attri_cat).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_74": {
                "n": {
                    "value": "num_obj - num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "attributes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_75": {
                "input": {
                    "value": "without_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - with_attri_idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/attribute_head/roi_attribute_feature_extractors.py": {
        "torch": {
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "*args": {
                    "value": "*xconvs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/attribute_head/roi_attribute_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_14": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.att_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_attributes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_ATTRIBUTE_HEAD.NUM_ATTRIBUTES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_ATTRIBUTE_HEAD.NUM_ATTRIBUTES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.att_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_attributes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_ATTRIBUTE_HEAD.NUM_ATTRIBUTES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_ATTRIBUTE_HEAD.NUM_ATTRIBUTES",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "softmax_66": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "nms_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nms_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(nms_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "boxes_per_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxlist.bbox, boxes_per_img[orig_inds][:, 4:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "orig_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "orig_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(orig_inds, dim=0)",
                            "Call"
                        ],
                        [
                            "orig_inds[keep]",
                            "Subscript"
                        ],
                        [
                            "final_inds",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_220": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_224": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_185": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_64": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_69": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "map_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*xconvs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_14": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/sampling.py": {
        "torch": {
            "nonzero_112": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/inference.py": {
        "torch": {
            "from_numpy_119": {
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_119": {
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "scores.split(boxes_per_image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/keypoint_head.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/loss.py": {
        "torch": {
            "nonzero_158": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "keypoint_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoint_logits[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_feature_extractors.py": {
        "torch": {
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_predictors.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_125": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "cat_68": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/inference.py": {
        "torch": {
            "softmax_103": {
                "variable": {
                    "value": "obj_class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_174": {
                "variable": {
                    "value": "(_, sorting_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "triple_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmin_56": {
                "variable": {
                    "value": "min_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.labeling_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finetune_att_logits[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "rel_class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeling_prob.clone().detach().view(1, -1)] * rel_logit.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "pred_soft_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_class_prob / self.labeling_prob.float()",
                            "BinOp"
                        ],
                        [
                            "factor_labeling_prob.float() * rel_class_prob / rel_class_prob[:, 0].view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "pred_soft_labels / torch.sum(pred_soft_labels, dim=-1).view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "variable": {
                    "value": "rel_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(rel_logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "rel_class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(rel_logit)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "num_obj_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_class_prob.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "obj_logit.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_128": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_class.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_class.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/loss.py": {
        "torch": {
            "log_softmax_21": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * (input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "attribute_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, self.num_attri_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attributes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_softmax_612": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_232": {
                "variable": {
                    "value": "self.criterion_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_335": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.centers[self.corr_order[:, 0]] - self.centers[self.corr_order[:, 1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "global_corr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(torch.sum(corr_class, dim=0) / self.num_classes).reshape(-1) for corr_class in torch.split(corr, self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "nonzero_573": {
                "input": {
                    "value": "fg_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_573": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_584": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_596": {
                "variable": {
                    "value": "attri_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, feat_dim).normal_()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "self.corr_order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[(i, j) for i in range(num_classes) for j in range(num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_243": {
                "variable": {
                    "value": "self.criterion_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_258": {
                "variable": {
                    "value": "self.loss_relation_balanced_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "obj_class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_obj_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_349": {
                "variable": {
                    "value": "loss_gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_352": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_594": {
                "tensors": {
                    "value": "[fg_loss, bg_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_594": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "self.criterion_loss_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_261": {
                "variable": {
                    "value": "self.loss_relation_balanced_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_263": {
                "variable": {
                    "value": "self.loss_relation_balanced_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_396": {
                "variable": {
                    "value": "loss_gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_591": {
                "n": {
                    "value": "bg_loss.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "bg_loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_247": {
                "variable": {
                    "value": "self.criterion_loss_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_249": {
                "variable": {
                    "value": "self.criterion_loss_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_362": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_409": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_337": {
                "tensor": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(self.centers[self.corr_order[:, 0]] - self.centers[self.corr_order[:, 1]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_381": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm[fg_idxs])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_414": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "1 / labeling_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_508": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_303": {
                "start": {
                    "value": "num_obj_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "obj_logit.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_362": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_401": {
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_409": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_495": {
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_337": {
                "input": {
                    "value": "corr_class",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_381": {
                "input": {
                    "value": "relation_probs_norm[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_423": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "labeling_prob.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_383": {
                "input": {
                    "value": "relation_probs_norm[fg_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_438": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_456": {
                "variable": {
                    "value": "loss_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(relation_probs_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "corr_factor.detach()",
                            "Call"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "labeling_prob",
                            "variable"
                        ],
                        [
                            "1 / labeling_prob",
                            "BinOp"
                        ],
                        [
                            "1 / labeling_prob.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_516": {
                "variable": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(relation_logits)",
                            "Call"
                        ],
                        [
                            "(1 - rel_labels) * constr_output.double() + rel_labels * train_output",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_421": {
                "*size": {
                    "value": "len(rel_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_423": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_455": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.sqrt(1 / p[idx - 1]) if idx != 0 else math.sqrt(1 / (3 * sum(p))) for idx in range(len(p) + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_431": {
                "*size": {
                    "value": "len(rel_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_438": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_456": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_463": {
                "variable": {
                    "value": "nonzero_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(rel_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "rel_labels / rel_labels.sum(dim=1).view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_476": {
                "variable": {
                    "value": "avg_beliefs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "avg_beliefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(avg_beliefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_479": {
                "variable": {
                    "value": "loss_avg_belief",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(avg_beliefs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.unique(rel_labels[nonzero_idxs])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_460": {
                "*size": {
                    "value": "len(rel_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_479": {
                "input": {
                    "value": "avg_beliefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(avg_beliefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_479": {
                "input": {
                    "value": "rel_labels[nonzero_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_466": {
                "input": {
                    "value": "rel_labels[nonzero_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_486": {
                "*size": {
                    "value": "len(rel_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_492": {
                "input": {
                    "value": "relation_probs_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_motifs.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.obj_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_objs * self.num_objs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_rels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.obj_classes) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.out_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.obj_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_101": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_231": {
                "variable": {
                    "value": "self.obj_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_232": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 32), nn.BatchNorm1d(32, momentum=0.001), nn.Linear(32, 128), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_253": {
                "variable": {
                    "value": "self.obj_ctx_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nl_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate if self.nl_obj > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_263": {
                "variable": {
                    "value": "self.edge_ctx_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim + self.hidden_dim + self.obj_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nl_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate if self.nl_edge > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.lin_obj_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.lin_edge_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_303": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_inp_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feats[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PackedSequence_342": {
                "variable": {
                    "value": "edge_input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp_feats[perm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "timestep_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_tensor[start_ind:end_ind], previous_obj_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "out_dists_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out_dists, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out_commitments[0].new(len(out_commitments)).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cat(out_commitments, 0)",
                            "Call"
                        ],
                        [
                            "out_commitments",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "decoder_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_inp_rep, encoder_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_320": {
                "variable": {
                    "value": "decoder_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "decoder_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.untreated_dcd_feat.view(1, -1).expand(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((obj_inp_rep, encoder_rep), 1)",
                            "Call"
                        ],
                        [
                            "PackedSequence(decoder_inp, ls_transposed)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_108": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "out_dist_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "statistics['pred_dist'].float()",
                            "Call"
                        ],
                        [
                            "pred_dist.view(-1, self.num_rels)",
                            "Call"
                        ],
                        [
                            "self.out_obj(previous_state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "*size": {
                    "value": "self.hidden_dim + self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "*size": {
                    "value": "self.embed_dim + self.obj_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_366": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat([proposal.get_field('predict_logits') for proposal in proposals], dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_239": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_motifs_with_attribute.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.obj_classes) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.att_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.obj_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.out_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.att_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_208": {
                "variable": {
                    "value": "self.obj_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_209": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_210": {
                "variable": {
                    "value": "self.att_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_att_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.att_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_att_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 32), nn.ReLU(inplace=True), nn.Dropout(0.1), nn.Linear(32, 128), nn.ReLU(inplace=True), nn.Dropout(0.1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_234": {
                "variable": {
                    "value": "self.obj_ctx_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.obj_dim + self.embed_dim * 2 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nl_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate if self.nl_obj > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_244": {
                "variable": {
                    "value": "self.edge_ctx_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim * 2 + self.hidden_dim + self.obj_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nl_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate if self.nl_edge > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.lin_obj_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.lin_edge_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_275": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_inp_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feats[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "inp_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_embed2, att_embed2, obj_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_309": {
                "variable": {
                    "value": "edge_input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp_feats[perm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "attribute_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, self.num_attri_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "attributes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "timestep_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_tensor[start_ind:end_ind], previous_obj_embed, previous_att_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "out_dists_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out_dists, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out_commitments[0].new(len(out_commitments)).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cat(out_commitments, 0)",
                            "Call"
                        ],
                        [
                            "out_commitments",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_280": {
                "variable": {
                    "value": "decoder_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat((obj_inp_rep, encoder_rep), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_365": {
                "input": {
                    "value": "with_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_365": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_73": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "out_dist_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_obj(previous_state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "att_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_dists[inv_perm]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "(obj_inp_rep, encoder_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_333": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat([proposal.get_field('predict_logits') for proposal in proposals], dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_msg_passing.py": {
        "torch": {
            "GRUCell_39": {
                "variable": {
                    "value": "self.edge_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_40": {
                "variable": {
                    "value": "self.node_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.sub_vert_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.obj_vert_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.out_edge_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.in_edge_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "rel_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_unary(union_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "sub2rel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "rel_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "obj2rel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "rel_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "sub_global_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_global_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sub_global_inds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "obj_global_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_global_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(obj_global_inds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "hx_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "hx_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rel_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_rep.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_idx.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(sub_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "(obj_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "(sub_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "(obj_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_transformer.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_30": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_59": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_110": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_111": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_112": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_sequence_171": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats.split(num_objs, dim=0)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(input_feats, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "num_objs_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_178": {
                "variable": {
                    "value": "slf_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pad_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(num_objs)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ge_178": {
                "variable": {
                    "value": "slf_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_objs_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(num_objs).to(device).unsqueeze(1).expand(-1, pad_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "slf_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_179": {
                "variable": {
                    "value": "non_pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pad_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(num_objs)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "lt_179": {
                "variable": {
                    "value": "non_pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_objs_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(num_objs).to(device).unsqueeze(1).expand(-1, pad_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "non_pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_223": {
                "variable": {
                    "value": "self.obj_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_224": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.bbox_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 32), nn.ReLU(inplace=True), nn.Dropout(0.1), nn.Linear(32, 128), nn.ReLU(inplace=True), nn.Dropout(0.1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.lin_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.lin_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim + self.hidden_dim + self.in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.out_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_obj_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "obj_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_labels",
                            "variable"
                        ],
                        [
                            "self.nms_per_cls(obj_dists, boxes_per_cls, num_objs)",
                            "Call"
                        ],
                        [
                            "obj_dists[:, 1:].max(1)[1] + 1",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(obj_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "out_dists_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_dists[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_253": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat([proposal.get_field('predict_logits') for proposal in proposals], dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_231": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_vctree.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.classes) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "h_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * num_obj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_94": {
                "variable": {
                    "value": "self.obj_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_95": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 32), nn.BatchNorm1d(32, momentum=0.001), nn.Linear(32, 128), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.overlap_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(6, 128), nn.BatchNorm1d(128, momentum=0.001), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.box_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 128), nn.BatchNorm1d(128, momentum=0.001), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.bi_freq_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_obj_classes * self.num_obj_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.obj_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.obj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.emb_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.score_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.score_sub",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.score_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.vision_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_287": {
                "variable": {
                    "value": "roi_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_dist.detach()",
                            "Call"
                        ],
                        [
                            "F.softmax(roi_dist, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_289": {
                "variable": {
                    "value": "roi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.score_pre(roi_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_290": {
                "variable": {
                    "value": "sub_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.score_sub(roi_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_291": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.score_obj(roi_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "self.hidden_dim + self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "self.embed_dim + self.obj_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "decoder_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, encod_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_240": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_onehot(obj_labels, self.num_obj_classes)",
                            "Call"
                        ],
                        [
                            "cat([proposal.get_field('predict_logits') for proposal in proposals], dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_311": {
                "input": {
                    "value": "vis_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vision_prior(cat([sub * obj, sub, obj, co_prior.unsqueeze(-1)], dim=-1).view(num_obj * num_obj, -1)).view(num_obj, num_obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_314": {
                "input": {
                    "value": "joint_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(vis_prior) * co_prior",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_102": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_113": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/model_vtranse.py": {
        "torch": {
            "Embedding_32": {
                "variable": {
                    "value": "self.obj_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_obj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(9, 32), nn.BatchNorm1d(32, momentum=0.001), nn.Linear(32, 128), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "edge_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_layer(obj_rel_rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "self.obj_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat([proposal.get_field('predict_logits') for proposal in proposals], dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "input": {
                    "value": "obj_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_layer(obj_pre_rep)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/relation_head.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "labeling_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.TEST.STL_TRAINING_SET_LABELING_PROB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "self.precomputed_labeling_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cfg.MODEL.PRECOMPUTED_BALANCED_NORM_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "roi_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(roi_features, att_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "self.precomputed_labeling_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cfg.MODEL.PRECOMPUTED_BALANCED_NORM_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "self.precomputed_labeling_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cfg.MODEL.PRECOMPUTED_BALANCED_NORM_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "self.matrix_of_ancestor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.matrix_of_ancestor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_100": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "input": {
                    "value": "relation_logits_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(relation_logits) if isinstance(relation_logits, tuple) else relation_logits",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/roi_relation_feature_extractors.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.rect_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(2, in_channels // 2, kernel_size=7, stride=2, padding=3, bias=True), nn.ReLU(inplace=True), nn.BatchNorm2d(in_channels // 2, momentum=0.01), nn.MaxPool2d(kernel_size=3, stride=2, padding=1), nn.Conv2d(in_channels // 2, in_channels, kernel_size=3, stride=1, padding=1, bias=True), nn.ReLU(inplace=True), nn.BatchNorm2d(in_channels, momentum=0.01)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "rect_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rect_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rect_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.spatial_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[make_fc(input_size, out_dim // 2), nn.ReLU(inplace=True), make_fc(out_dim // 2, out_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "dummy_x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.rect_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_72": {
                "variable": {
                    "value": "dummy_y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.rect_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_85": {
                "variable": {
                    "value": "rect_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(head_rect, tail_rect)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "union_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(union_features, union_features_att)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/roi_relation_predictors.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.post_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.rel_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.ctx_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.post_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.rel_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_345": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.post_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.ctx_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_386": {
                "variable": {
                    "value": "edge_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.post_emb(edge_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_490": {
                "variable": {
                    "value": "self.vis_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_533": {
                "variable": {
                    "value": "obj_dist_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_dists.split(num_objs, dim=0)",
                            "Call"
                        ],
                        [
                            "obj_dists.split(num_objs, dim=0)",
                            "Call"
                        ],
                        [
                            "obj_dists.split(num_objs, dim=0)",
                            "Call"
                        ],
                        [
                            "obj_dists.split(num_objs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_691": {
                "variable": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.up_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.up_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.up_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.up_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.ctx_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "variable": {
                    "value": "self.post_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(self.hidden_dim * 2, self.pooling_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self.ctx_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_493": {
                "variable": {
                    "value": "self.ctx_gate_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rel_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_510": {
                "variable": {
                    "value": "self.spt_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(32, self.hidden_dim), nn.ReLU(inplace=True), nn.Linear(self.hidden_dim, self.pooling_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cross_entropy_615": {
                "variable": {
                    "value": "add_losses[auxiliary_ctx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ctx_compress(post_ctx_rep)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(rel_labels, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_524": {
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "*size": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "*size": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_527": {
                "*size": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_617": {
                "variable": {
                    "value": "add_losses[auxiliary_vis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vis_compress(union_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(rel_labels, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_618": {
                "variable": {
                    "value": "add_losses[auxiliary_frq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.freq_bias.index_with_labels(pair_pred.long())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rel_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(rel_labels, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_656": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_693": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, num_cat), device=gt.device).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_696": {
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "(head_rep[pair_idx[:, 0]], tail_rep[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "(obj_pred[pair_idx[:, 0]], obj_pred[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "(head_rep[pair_idx[:, 0]], tail_rep[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_287": {
                "tensors": {
                    "value": "(obj_pred[pair_idx[:, 0]], obj_pred[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "tensors": {
                    "value": "(head_rep[pair_idx[:, 0]], tail_rep[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_403": {
                "tensors": {
                    "value": "(obj_pred[pair_idx[:, 0]], obj_pred[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_555": {
                "tensors": {
                    "value": "(obj_pred[pair_idx[:, 0]], obj_pred[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_556": {
                "tensors": {
                    "value": "(obj_prob[pair_idx[:, 0]], obj_prob[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_673": {
                "input": {
                    "value": "vis_dists + frq_dists + ctx_gate_dists",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_692": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_187": {
                "tensors": {
                    "value": "(obj_pred[pair_idx[:, 0]], obj_pred[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_435": {
                "input": {
                    "value": "bi_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "bi_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bi_gt > 0).float()",
                            "Call"
                        ],
                        [
                            "(bi_gt > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_554": {
                "tensors": {
                    "value": "(head_rep[pair_idx[:, 0]], tail_rep[pair_idx[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_487": {
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_488": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_510": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_511": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_513": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_611": {
                "input": {
                    "value": "bi_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "bi_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bi_gt > 0).float()",
                            "Call"
                        ],
                        [
                            "(bi_gt > 0).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/sampling.py": {
        "torch": {
            "nonzero_194": {
                "variable": {
                    "value": "tgt_pair_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_rel_matrix > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "binary_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_prp, num_prp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_45": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((n, n), device=device) - torch.eye(n, device=device)",
                            "BinOp"
                        ],
                        [
                            "cand_matrix.byte() & boxlist_iou(p, p).gt(0).byte()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_69": {
                "variable": {
                    "value": "tgt_pair_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_rel_matrix > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "binary_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_prp, num_prp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_212": {
                "variable": {
                    "value": "bi_match_head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_prp_head[i] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_213": {
                "variable": {
                    "value": "bi_match_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_prp_tail[i] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_228": {
                "variable": {
                    "value": "prp_head_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_match[tgt_head_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "variable": {
                    "value": "prp_head_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_229": {
                "variable": {
                    "value": "prp_tail_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_match[tgt_tail_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "prp_tail_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_281": {
                "variable": {
                    "value": "bg_rel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_possibility > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "bg_rel_labs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bg_rel_inds.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_84": {
                "variable": {
                    "value": "tgt_bg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_possibility > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "img_rel_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_pair_idxs, tgt_bg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "img_rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_rel_labs.long(), torch.zeros(tgt_bg_idxs.shape[0], device=device).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "fg_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[relation_map_multi_label[tgt_head_idx, tgt_tail_idx]] * prp_tail_idxs.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "fg_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tgt_rel_lab] * prp_tail_idxs.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "fg_rel_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2 + 51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "fg_rel_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "bg_rel_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "bg_rel_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_41": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(p)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_82": {
                "*size": {
                    "value": "(num_prp, num_prp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_82": {
                "n": {
                    "value": "num_prp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.shape[0]",
                            "Subscript"
                        ],
                        [
                            "prp_box.shape[0]",
                            "Subscript"
                        ],
                        [
                            "is_match.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_94": {
                "n": {
                    "value": "tgt_bg_idxs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_160": {
                "*size": {
                    "value": "(num_prp, num_prp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_160": {
                "n": {
                    "value": "num_prp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.shape[0]",
                            "Subscript"
                        ],
                        [
                            "prp_box.shape[0]",
                            "Subscript"
                        ],
                        [
                            "is_match.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_287": {
                "n": {
                    "value": "bg_rel_triplets.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_88": {
                "n": {
                    "value": "tgt_pair_idxs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_275": {
                "n": {
                    "value": "fg_rel_triplets.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "tgt_bg_idxs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ],
                        [
                            "proposal.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/utils_motifs.py": {
        "torch": {
            "sigmoid_15": {
                "variable": {
                    "value": "orig_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(orig_logits)",
                            "Call"
                        ],
                        [
                            "orig_logits / (orig_logits.sum(1).unsqueeze(-1) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "attribute_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_obj, num_attri_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_79": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ordered_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(ordered_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_87": {
                "variable": {
                    "value": "(_, inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perm[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_231": {
                "variable": {
                    "value": "wv_arr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_29": {
                "input": {
                    "value": "with_attri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attributes.sum(-1) > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_29": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_104": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "vec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "arange_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec.new(vec.size(0)).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_144": {
                "variable": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w / wid, h / hei, x / wid, y / hei, x1 / wid, y1 / hei, x2 / wid, y2 / hei, w * h / (wid * hei)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "boxes_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_233": {
                "obj": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(wv_dict, wv_arr, wv_size)",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "fname + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "fname_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname + '.pt'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_189": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/utils_relation.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "center_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes[:, :2] + 0.5 * wh, wh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "box_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, center_box)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_38": {
                "variable": {
                    "value": "unionbox[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_39": {
                "variable": {
                    "value": "unionbox[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "unionbox[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_41": {
                "variable": {
                    "value": "unionbox[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "intersextion_box[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "intersextion_box[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_48": {
                "variable": {
                    "value": "intersextion_box[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_49": {
                "variable": {
                    "value": "intersextion_box[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_50": {
                "variable": {
                    "value": "case1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersextion_box[:, 2].contiguous().view(-1) < intersextion_box[:, 0].contiguous().view(-1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_51": {
                "variable": {
                    "value": "case2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersextion_box[:, 3].contiguous().view(-1) < intersextion_box[:, 1].contiguous().view(-1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_64": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, None, :, 2:].expand(N, N, nc, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_67": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, None, :, :2].expand(N, N, nc, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_70": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "prob_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "pred_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(box1, box2, union_info, intersextion_info)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/utils_treelstm.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.multi_layer_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(foreward_output, backward_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "h_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * num_obj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.ioffux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.ioffuh_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.ioffuh_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_122": {
                "variable": {
                    "value": "(i, o, f_l, f_r, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ioffu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ioffux(feat_inp) + self.ioffuh_left(left_h) + self.ioffuh_right(right_h)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ioffu.size(1) // 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_126": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.iofux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.iofuh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_229": {
                "variable": {
                    "value": "(i, o, f, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iofu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iofux(feat_inp) + self.iofuh(root_h)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "iofu.size(1) // 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_233": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "treelstm_io.dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.dists, pred_dist.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "treelstm_io.commitments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.commitments, label_to_embed.view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_130": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dropout_mask(self.dropout, (1, self.out_dim), features.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "left_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "left_h",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "right_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "right_h",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "next_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), left_embed.view(1, -1), right_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_237": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dropout_mask(self.dropout, (1, self.out_dim), features.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "root_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "root_h",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "next_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), root_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_123": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "f_l",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "left_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.0] * self.h_dim, device=features.device).float().view(1, -1)",
                            "Call"
                        ],
                        [
                            "tree.left_child.state_c",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_126": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f_l, left_c) + torch.mul(f_r, right_c)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_127": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_230": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_230": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_232": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "root_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.0] * self.h_dim, device=features.device).float().view(1, -1)",
                            "Call"
                        ],
                        [
                            "tree.parent.state_c_backward",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_233": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f_l, left_c) + torch.mul(f_r, right_c)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_234": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_296": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_298": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/relation_head/utils_vctree.py": {
        "torch": {
            "min_332": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_334": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "select_indexs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_score.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "remain_indexs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "remain_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_score.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info1, info2, info3, info4, info5, info6]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "tensors": {
                    "value": "overlap_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_243": {
                "ndarray": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "cat_103": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_169": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "variable": {
                    "value": "inds_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_99": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_179": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_127": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/inference.py": {
        "torch": {
            "kthvalue_166": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_171": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_154": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/retinanet.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*cls_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/utils.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "max_31": {
                "variable": {
                    "value": "(final_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "R_batch * c_out.double()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_17": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_25": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr * rl_factor, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "scaled_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "cropped_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_81": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_82": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "union_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.min(boxlist1.bbox[:, :2], boxlist2.bbox[:, :2]), torch.max(boxlist1.bbox[:, 2:], boxlist2.bbox[:, 2:]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "inter_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.max(boxlist1.bbox[:, :2], boxlist2.bbox[:, :2]), torch.min(boxlist1.bbox[:, 2:], boxlist2.bbox[:, 2:]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_131": {
                "variable": {
                    "value": "invalid_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inter_box[:, 0] >= inter_box[:, 2]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scipy.linalg.block_diag(*triplet_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_108": {
                "input": {
                    "value": "boxlist1.bbox[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_109": {
                "input": {
                    "value": "boxlist1.bbox[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_128": {
                "input": {
                    "value": "boxlist1.bbox[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_129": {
                "input": {
                    "value": "boxlist1.bbox[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/keypoint.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "type(self)(resized_data, size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(flipped_data, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints.to(*args, **kwargs), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints[item], self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "flip_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[names.index(i) for i in flipped_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_332": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks",
                            "variable"
                        ],
                        [
                            "cv2.UMat(mask)",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_437": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.convert_to_binarymask() for p in self.polygons]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_442": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_223": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "polygons",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(p, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "polygons",
                            "variable"
                        ],
                        [
                            "PolygonInstance(p, size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_59": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_61": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_67": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_51": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_101": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "variable"
                        ],
                        [
                            "cached_f",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_101": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_42": {
                "variable": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in mapped_current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_backbones.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_box_coder.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([175.62031555, 20.91103172, 253.352005, 155.0145874, 169.24636841, 4.85241556, 228.8605957, 105.02092743, 181.77426147, 199.82876587, 192.88427734, 214.0255127, 174.36262512, 186.75761414, 296.19091797, 231.27906799, 22.73153877, 92.02596283, 135.5695343, 208.80291748]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.47861834, 0.13992102, 0.14961673, 0.71495209, 0.29915856, -0.35664671, 0.89018666, 0.70815367, -0.03852064, 0.44466892, 0.49492538, 0.71409376, 0.28052918, 0.02184832, 0.65289006, 1.05060139, -0.38172557, -0.08533806, -0.60335309, 0.79052375]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data_samplers.py": {
        "torch": {
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_detectors.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.INPUT.MIN_SIZE_TRAIN",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(x * 1.2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fbnet.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_feature_extractors.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nms.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[350.9821, 161.82, 369.9685, 205.2372], [250.5236, 154.2844, 274.1773, 204.981], [471.492, 160.4118, 496.0094, 213.4244], [352.0421, 164.5933, 366.4458, 205.9624], [166.0765, 169.7707, 183.0102, 232.6606], [252.3, 183.1449, 269.6541, 210.6747], [469.7862, 162.0192, 482.1673, 187.0053], [168.4862, 174.2567, 181.7437, 232.9379], [470.329, 162.3442, 496.4272, 214.6296], [251.045, 155.5911, 272.2693, 203.3675], [252.0326, 154.795, 273.7404, 195.3671], [351.7479, 161.9567, 370.6432, 204.3047], [496.3306, 161.7157, 515.0573, 210.72], [471.0749, 162.6143, 485.3374, 207.3448], [250.9745, 160.7633, 264.1924, 206.835], [470.4792, 169.0351, 487.1934, 220.2984], [474.4227, 161.9546, 513.1018, 215.5193], [251.9428, 184.195, 262.6937, 207.6416], [252.6623, 175.0252, 269.8806, 213.7584], [260.9884, 157.0351, 288.3554, 206.6027], [251.3629, 164.5101, 263.2179, 202.4203], [471.8361, 190.8142, 485.6812, 220.8586], [248.6243, 156.9628, 264.3355, 199.2767], [495.1643, 158.0483, 512.6261, 184.4192], [376.8718, 168.0144, 387.3584, 201.321], [122.9191, 160.7433, 172.5612, 231.3837], [350.3857, 175.8806, 366.25, 205.4329], [115.2958, 162.7822, 161.9776, 229.6147], [168.4375, 177.4041, 180.8028, 232.4551], [169.7939, 184.433, 181.4767, 232.122], [347.7536, 175.9356, 355.8637, 197.5586], [495.5434, 164.6059, 516.4031, 207.7053], [172.1216, 194.6033, 183.1217, 235.2653], [264.2654, 181.554, 288.4626, 214.017], [111.7971, 183.7748, 137.3745, 225.9724], [253.4919, 186.3945, 280.8694, 210.0731], [165.5334, 169.7344, 185.9159, 232.8514], [348.3662, 184.5187, 354.9081, 201.4038], [164.6562, 162.5724, 186.3108, 233.501], [113.2999, 186.841, 135.8841, 219.7642], [117.0282, 179.8009, 142.5375, 221.0736], [462.1312, 161.1004, 495.3576, 217.2208], [462.58, 159.931, 501.2937, 224.1655], [503.5242, 170.0733, 518.3792, 209.0113], [250.3658, 195.5925, 260.6523, 212.4679], [108.8287, 163.6994, 146.3642, 229.7261], [256.7617, 187.3123, 288.8407, 211.2013], [161.2781, 167.4801, 186.3751, 232.7133], [115.376, 177.5859, 163.3512, 236.966], [248.9077, 188.0919, 264.8579, 207.9718], [108.1349, 160.7851, 143.637, 229.6243], [465.09, 156.7555, 490.3561, 213.5704], [107.5338, 173.4323, 141.0704, 235.291]]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1919, 0.3293, 0.086, 0.16, 0.1885, 0.4297, 0.0974, 0.2711, 0.1483, 0.1173, 0.1034, 0.2915, 0.1993, 0.0677, 0.3217, 0.0966, 0.0526, 0.5675, 0.313, 0.1592, 0.1353, 0.0634, 0.1557, 0.1512, 0.0699, 0.0545, 0.2692, 0.1143, 0.0572, 0.199, 0.0558, 0.15, 0.2214, 0.1878, 0.2501, 0.1343, 0.0809, 0.1266, 0.0743, 0.0896, 0.0781, 0.0983, 0.0557, 0.0623, 0.5808, 0.309, 0.105, 0.0524, 0.0513, 0.4501, 0.4167, 0.0623, 0.1749]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_predictors.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_rpn_heads.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_segmentation_mask.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "diff.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/detector_pretest_net.py": {
        "torch": {
            "set_device_49": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/detector_pretrain_net.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed, logger)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_273": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/image_retrieval_main.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "sg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "sg_train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data1/image_retrieval/causal_{}_sgdet_{}_{}_train.pytorch'.format(sg_model_name, sg_fusion_name, sg_type_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_192": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "gathered_result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather(torch.tensor(val_result).cpu())",
                            "Call"
                        ],
                        [
                            "[t.view(-1) for t in gathered_result]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(gathered_result, dim=-1).view(-1)",
                            "Call"
                        ],
                        [
                            "all_gather(to_cpu(test_output).cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_238": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_59": {
                "f": {
                    "value": "sg_test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data1/image_retrieval/causal_{}_sgdet_{}_{}_test.pytorch'.format(sg_model_name, sg_fusion_name, sg_type_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_61": {
                "f": {
                    "value": "sg_train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data1/image_retrieval/causal_{}_sgdet_{}_{}_train.pytorch'.format(sg_model_name, sg_fusion_name, sg_type_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "f": {
                    "value": "sg_test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data1/image_retrieval/causal_{}_sgdet_{}_{}_test.pytorch'.format(sg_model_name, sg_fusion_name, sg_type_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGEncode()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.PRETRAINED_DETECTOR_CKPT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "test_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_test(cfg, model, test_data_loader, distributed, logger)",
                            "Call"
                        ],
                        [
                            "run_test(cfg, model, test_data_loader, distributed, logger)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path % ('test', 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_232": {
                "tensors": {
                    "value": "cpu_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "val_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "run_test(cfg, model, val_data_loader, distributed, logger)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "float(valid_result.mean())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_287": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(cfg.OUTPUT_DIR, 'model_{}.pytorch'.format(str(epoch)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(cfg.OUTPUT_DIR, 'model_final.pytorch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "{'result': test_result, 'similarity': test_similarity}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path % ('test', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "{'result': val_result, 'similarity': val_similarity}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path % ('val', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_231": {
                "tensors": {
                    "value": "[item[0].detach().cpu(), item[1].detach().cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_96": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/relation_test_net.py": {
        "torch": {
            "load_142": {
                "variable": {
                    "value": "labeling_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_labeling_prob_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_folder, train_labeling_prob_fname)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_49": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_146": {
                "variable": {
                    "value": "nan_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labeling_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(train_labeling_prob_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/relation_train_net.py": {
        "torch": {
            "sort_49": {
                "variable": {
                    "value": "(targets, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[target.to(device) for target in targets]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "unique_54": {
                "variable": {
                    "value": "(uni_targets, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "delta_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "uni_targets.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "delta_centers.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "same_class_feature_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets_repeat == uni_targets_repeat",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "same_class_feature_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.roi_heads.relation.loss_evaluator.centers.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "gathered_result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather(torch.tensor(dataset_result).cpu())",
                            "Call"
                        ],
                        [
                            "[t.view(-1) for t in gathered_result]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(gathered_result, dim=-1).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed, logger, writer=writer)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_447": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "exmp_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OUTPUT_DIR.split('/')[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_357": {
                "data": {
                    "value": "dataset_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(cfg, model, val_data_loader, dataset_name=dataset_name, iou_types=iou_types, box_only=False if cfg.MODEL.RETINANET_ON else cfg.MODEL.RPN_ONLY, device=cfg.MODEL.DEVICE, expected_results=cfg.TEST.EXPECTED_RESULTS, expected_results_sigma_tol=cfg.TEST.EXPECTED_RESULTS_SIGMA_TOL, output_folder=None, logger=logger)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_433": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}