{
    "gpt2_trainings_scripts/interact.py": {
        "torch": {
            "sort_44": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, token_type_ids=token_type_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_45": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, token_type_ids=token_type_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_81": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_87": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_81": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_39": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, token_type_ids=token_type_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt2_trainings_scripts/train.py": {
        "torch": {
            "DataLoader_231": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path, 'params_' + name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "data[mc_token_ids][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "data[mc_labels][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "{'length': len(data['input_ids'])}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data_nuggets, 'params_' + split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_275": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "nugget",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path, 'nuggets_' + self.name + '/' + str(index))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_216": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(build_batch, batch))",
                            "Call"
                        ],
                        [
                            "tuple((input_tensor.to(args.device) for input_tensor in batch))",
                            "Call"
                        ],
                        [
                            "tuple((input_tensor.to(args.device) for input_tensor in batch))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "elem.new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_233": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_234": {
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_274": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_385": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_training_args.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "nugget",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path, 'nuggets_' + self.name + '/1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "nugget",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict([(input_name, data[input_name][i]) for input_name in MODEL_INPUTS])",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.path, 'nuggets_' + self.name + '/' + str(index)))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.path, 'nuggets_' + self.name + '/1'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "nug_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_nuggets, 'nuggets_' + split + '/' + str(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_193": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[0], torch.tensor([ex[5]] * (max_l - len(t[0]))))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[1], torch.tensor([ex[5]] * (max_l - len(t[1]))))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c1.unsqueeze(0), c2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__317": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__320": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_361": {
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "t[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[0], torch.tensor([-100] * (max_l - len(t[0]))))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[1], torch.tensor([-100] * (max_l - len(t[1]))))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c1.unsqueeze(0), c2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "[ex[5]] * (max_l - len(t[0]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "[ex[5]] * (max_l - len(t[1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "[-100] * (max_l - len(t[0]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "[-100] * (max_l - len(t[1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gpt2_trainings_scripts/utils.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_53": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(dataset_cache)",
                            "Call"
                        ],
                        [
                            "json.loads(f.read())",
                            "Call"
                        ],
                        [
                            "tokenize(dataset)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}