{
    "convLSTM_network.py": {
        "torch": {
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_60": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_73": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_203": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "histgc_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_205": {
                "variable": {
                    "value": "self.BN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_210": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.BN_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_219": {
                "variable": {
                    "value": "self.BN_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_221": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_224": {
                "variable": {
                    "value": "self.BN_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "variable": {
                    "value": "self.BN_3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_233": {
                "variable": {
                    "value": "self.upsample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.convu_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "self.BN_u_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_240": {
                "variable": {
                    "value": "self.convu_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.BN_u_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_244": {
                "variable": {
                    "value": "self.upsample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "variable": {
                    "value": "self.convu_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_247": {
                "variable": {
                    "value": "self.BN_u_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.convu_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_265": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1.size(1), x1.size(2), x1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_276": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2.size(1), x2.size(2), x2.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2.size(1), x2.size(2), x2.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_293": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x3.size(1), x3.size(2), x3.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_308": {
                "variable": {
                    "value": "x2_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2_u, (B, T, x2_u.size(1), x2_u.size(2), x2_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x2_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "x2_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2_u, (B, T, x2_u.size(1), x2_u.size(2), x2_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x2_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2_u.size(1), x2_u.size(2), x2_u.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "x2_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2_u, (B, T, x2_u.size(1), x2_u.size(2), x2_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x2_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_326": {
                "variable": {
                    "value": "x1_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x1_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "x1_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x1_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "x1_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x1_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "c_next",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "input": {
                    "value": "histgc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "input": {
                    "value": "x2_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2_u, (B, T, x2_u.size(1), x2_u.size(2), x2_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x2_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2_u)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "input": {
                    "value": "x1_u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.upsample_1(x2_u)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1_u)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ],
                        [
                            "x1_u[0]",
                            "Subscript"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1_u, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1_u, (B, T, x1_u.size(1), x1_u.size(2), x1_u.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation.py": {
        "torch": {
            "linspace_73": {
                "variable": {
                    "value": "thresholdlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "21",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SR == GT",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "Inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SR + GT == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "Union",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SR + GT >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "Inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SR + GT == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_54": {
                "variable": {
                    "value": "self.bce_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_63": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-self.bce_fn(preds, labels)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "max_85": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_95": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_108": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_121": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_144": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_156": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_102": {
                "input": {
                    "value": "TP + FN",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "TN + FP",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "TP + FP",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "GT",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ],
                        [
                            "GT == torch.max(GT)",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_65": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_208": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "histgc_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "variable": {
                    "value": "self.BN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_215": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "variable": {
                    "value": "self.BN_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_224": {
                "variable": {
                    "value": "self.BN_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_227": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "variable": {
                    "value": "self.BN_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "self.BN_3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_239": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.BN_4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "variable": {
                    "value": "self.BN_4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_251": {
                "variable": {
                    "value": "self.maxpool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_5",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "variable": {
                    "value": "self.BN_5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_5",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_266": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1.size(1), x1.size(2), x1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_277": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2.size(1), x2.size(2), x2.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_286": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2.size(1), x2.size(2), x2.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x3.size(1), x3.size(2), x3.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x3.size(1), x3.size(2), x3.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_311": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x4.size(1), x4.size(2), x4.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x4.size(1), x4.size(2), x4.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_328": {
                "variable": {
                    "value": "x5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool5(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x5)",
                            "Call"
                        ],
                        [
                            "self.BN_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x5, (B, T, x5.size(1), x5.size(2), x5.size(3)))",
                            "Call"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5 + x_gc_5",
                            "BinOp"
                        ],
                        [
                            "self.convu_5_1(torch.reshape(x5, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "x5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool5(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x5)",
                            "Call"
                        ],
                        [
                            "self.BN_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x5, (B, T, x5.size(1), x5.size(2), x5.size(3)))",
                            "Call"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5 + x_gc_5",
                            "BinOp"
                        ],
                        [
                            "self.convu_5_1(torch.reshape(x5, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x5.size(1), x5.size(2), x5.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "variable": {
                    "value": "self.convd_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fut_guance_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_355": {
                "variable": {
                    "value": "self.BN_d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_357": {
                "variable": {
                    "value": "self.maxpoold_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "variable": {
                    "value": "self.convd_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_360": {
                "variable": {
                    "value": "self.BN_d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_362": {
                "variable": {
                    "value": "self.maxpoold_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "variable": {
                    "value": "self.convd_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_365": {
                "variable": {
                    "value": "self.BN_d_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_367": {
                "variable": {
                    "value": "self.maxpoold_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "variable": {
                    "value": "self.convd_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_370": {
                "variable": {
                    "value": "self.BN_d_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_372": {
                "variable": {
                    "value": "self.maxpoold_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_373": {
                "variable": {
                    "value": "self.convd_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_5",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_375": {
                "variable": {
                    "value": "self.BN_d_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_5",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_382": {
                "variable": {
                    "value": "self.convu_5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_5",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_384": {
                "variable": {
                    "value": "self.BN_u_5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_386": {
                "variable": {
                    "value": "self.upsample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_387": {
                "variable": {
                    "value": "self.convu_4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_389": {
                "variable": {
                    "value": "self.BN_u_4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_393": {
                "variable": {
                    "value": "self.convu_4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_4",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_395": {
                "variable": {
                    "value": "self.BN_u_4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_397": {
                "variable": {
                    "value": "self.upsample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "self.convu_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_400": {
                "variable": {
                    "value": "self.BN_u_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_404": {
                "variable": {
                    "value": "self.convu_3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_3",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_406": {
                "variable": {
                    "value": "self.BN_u_3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_409": {
                "variable": {
                    "value": "self.upsample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_410": {
                "variable": {
                    "value": "self.convu_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_412": {
                "variable": {
                    "value": "self.BN_u_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_416": {
                "variable": {
                    "value": "self.convu_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_418": {
                "variable": {
                    "value": "self.BN_u_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_420": {
                "variable": {
                    "value": "self.upsample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_421": {
                "variable": {
                    "value": "self.convu_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_423": {
                "variable": {
                    "value": "self.BN_u_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_428": {
                "variable": {
                    "value": "self.convu_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_445": {
                "variable": {
                    "value": "x_gc_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convd_1(torch.reshape(guance_data, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_d_1(x_gc_1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_1, (B, T, -1, W, H))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_452": {
                "variable": {
                    "value": "x_gc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_1(x_gc_1)",
                            "Call"
                        ],
                        [
                            "self.convd_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "self.BN_d_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_2, (B, T, -1, W // 2, H // 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_459": {
                "variable": {
                    "value": "x_gc_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "self.convd_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "self.BN_d_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_3, (B, T, -1, W // 4, H // 4))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_466": {
                "variable": {
                    "value": "x_gc_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "self.convd_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "self.BN_d_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_4, (B, T, -1, W // 8, H // 8))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_473": {
                "variable": {
                    "value": "x_gc_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "self.convd_5(x_gc_5)",
                            "Call"
                        ],
                        [
                            "self.BN_d_5(x_gc_5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_5, (B, T, -1, W // 16, H // 16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_475": {
                "variable": {
                    "value": "x_gc_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convd_1(torch.reshape(guance_data, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_d_1(x_gc_1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_1, (B, T, -1, W, H))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_476": {
                "variable": {
                    "value": "x_gc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_1(x_gc_1)",
                            "Call"
                        ],
                        [
                            "self.convd_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "self.BN_d_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_2, (B, T, -1, W // 2, H // 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1, W // 2, H // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "x_gc_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_2(x_gc_2)",
                            "Call"
                        ],
                        [
                            "self.convd_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "self.BN_d_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_3, (B, T, -1, W // 4, H // 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1, W // 4, H // 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_478": {
                "variable": {
                    "value": "x_gc_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_3(x_gc_3)",
                            "Call"
                        ],
                        [
                            "self.convd_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "self.BN_d_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_4, (B, T, -1, W // 8, H // 8))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1, W // 8, H // 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "variable": {
                    "value": "x_gc_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gc_5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpoold_4(x_gc_4)",
                            "Call"
                        ],
                        [
                            "self.convd_5(x_gc_5)",
                            "Call"
                        ],
                        [
                            "self.BN_d_5(x_gc_5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_gc_5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_gc_5, (B, T, -1, W // 16, H // 16))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1, W // 16, H // 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_493": {
                "variable": {
                    "value": "x5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool5(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x5)",
                            "Call"
                        ],
                        [
                            "self.BN_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x5, (B, T, x5.size(1), x5.size(2), x5.size(3)))",
                            "Call"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5 + x_gc_5",
                            "BinOp"
                        ],
                        [
                            "self.convu_5_1(torch.reshape(x5, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_499": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x4.size(1), x4.size(2), x4.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_511": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_517": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_518": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x3.size(1), x3.size(2), x3.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_529": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_535": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_536": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x2.size(1), x2.size(2), x2.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_550": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_556": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_557": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1.size(1), x1.size(2), x1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_567": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, x1.size(1), x1.size(2), x1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_81": {
                "input": {
                    "value": "c_next",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_264": {
                "input": {
                    "value": "histgc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_308": {
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "input": {
                    "value": "guance_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_491": {
                "input": {
                    "value": "x5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool5(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x5)",
                            "Call"
                        ],
                        [
                            "self.BN_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x5, (B, T, x5.size(1), x5.size(2), x5.size(3)))",
                            "Call"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5[0]",
                            "Subscript"
                        ],
                        [
                            "x5 + x_gc_5",
                            "BinOp"
                        ],
                        [
                            "self.convu_5_1(torch.reshape(x5, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_5_1(x5)",
                            "Call"
                        ],
                        [
                            "torch.relu(x5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "input": {
                    "value": "x4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool4(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_4(x5)",
                            "Call"
                        ],
                        [
                            "self.convu_4_1(x4)",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_1(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x4, (B, T, x4.size(1), x4.size(2), x4.size(3)))",
                            "Call"
                        ],
                        [
                            "x4[0]",
                            "Subscript"
                        ],
                        [
                            "x4 + x_gc_4",
                            "BinOp"
                        ],
                        [
                            "self.convu_4_2(torch.reshape(x4, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_4_2(x4)",
                            "Call"
                        ],
                        [
                            "torch.relu(x4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_527": {
                "input": {
                    "value": "x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool3(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_3(x4)",
                            "Call"
                        ],
                        [
                            "self.convu_3_1(x3)",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_1(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x3, (B, T, x3.size(1), x3.size(2), x3.size(3)))",
                            "Call"
                        ],
                        [
                            "x3[0]",
                            "Subscript"
                        ],
                        [
                            "x3 + x_gc_3",
                            "BinOp"
                        ],
                        [
                            "self.convu_3_2(torch.reshape(x3, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_3_2(x3)",
                            "Call"
                        ],
                        [
                            "torch.relu(x3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_548": {
                "input": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maxpool2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "self.upsample_2(x3)",
                            "Call"
                        ],
                        [
                            "self.convu_2_1(x2)",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_1(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x2, (B, T, x2.size(1), x2.size(2), x2.size(3)))",
                            "Call"
                        ],
                        [
                            "x2[0]",
                            "Subscript"
                        ],
                        [
                            "x2 + x_gc_2",
                            "BinOp"
                        ],
                        [
                            "self.convu_2_2(torch.reshape(x2, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_u_2_2(x2)",
                            "Call"
                        ],
                        [
                            "torch.relu(x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_566": {
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(torch.reshape(histgc_inputs, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "self.BN_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "self.upsample_1(x2)",
                            "Call"
                        ],
                        [
                            "self.convu_1_1(x1)",
                            "Call"
                        ],
                        [
                            "self.BN_u_1_1(x1)",
                            "Call"
                        ],
                        [
                            "torch.relu(x1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ],
                        [
                            "x1[0]",
                            "Subscript"
                        ],
                        [
                            "x1 + x_gc_1",
                            "BinOp"
                        ],
                        [
                            "self.convu_1_2(torch.reshape(x1, (-1, C, W, H)))",
                            "Call"
                        ],
                        [
                            "torch.reshape(x1, (B, T, x1.size(1), x1.size(2), x1.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C, W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_141": {
                "variable": {
                    "value": "self.Maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.Conv_rain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "x_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, hist_rain)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "d5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "d4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d2, hist_rain, x[:, 32:35, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[input.size()[0], input.size()[1], 2, input.size()[3], input.size()[4]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "rain",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[input.size()[0], input.size()[1], 1, input.size()[3], input.size()[4]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_53": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "F_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "F_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "BCELoss_32": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_35": {
                "variable": {
                    "value": "self.criterion4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.unet.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "unet_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, '%s-%d-%.4f-%d-%.4f.pkl' % (self.model_type, self.num_epochs, self.lr, self.num_epochs_decay, self.augmentation_prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_309": {
                "f": {
                    "value": "unet_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, '%s-%d-%.4f-%d-%.4f.pkl' % (self.model_type, self.num_epochs, self.lr, self.num_epochs_decay, self.augmentation_prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_126": {
                "f": {
                    "value": "unet_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, '%s-%d-%.4f-%d-%.4f.pkl' % (self.model_type, self.num_epochs, self.lr, self.num_epochs_decay, self.augmentation_prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_226": {
                "obj": {
                    "value": "best_unet",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.unet.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "unet_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, '%s-%d-%.4f-%d-%.4f.pkl' % (self.model_type, self.num_epochs, self.lr, self.num_epochs_decay, self.augmentation_prob))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "MSELoss_96": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_264": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_267": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/data/code/fzl/encoder_forecaster_1_terminal/inference_model/epoch_5_checkpoint.pth.tar",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "guancedata",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "guancedata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "guancedata * 10",
                            "BinOp"
                        ],
                        [
                            "guancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "guancedata[:, 0:fut_time_steps, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(guancedata, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(guancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "guancedata / rain_threshold",
                            "BinOp"
                        ],
                        [
                            "guancedata.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "guancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "guancedata[:, 0:fut_time_steps, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(guancedata, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(guancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "guancedata / rain_threshold",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "histguancedata",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "histguancedata",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "histguancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(histguancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "histguancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(histguancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_322": {
                "variable": {
                    "value": "forecaster_input_gc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "forecaster_input_gc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((hist_gc_0, guancedata[:, 0:-1, :, :, :] + ruitudata[:, 0:-1, :, :, :]), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(forecaster_input_gc).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "forecaster_input_gc / rain_threshold",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((hist_gc_0, guancedata[:, 0:-1, :, :, :] + ruitudata[:, 0:-1, :, :, :]), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(forecaster_input_gc).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "forecaster_input_gc / rain_threshold",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "guancedata",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "guancedata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "guancedata * 10",
                            "BinOp"
                        ],
                        [
                            "guancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "guancedata[:, 0:fut_time_steps, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(guancedata, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(guancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "guancedata / rain_threshold",
                            "BinOp"
                        ],
                        [
                            "guancedata.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "guancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "guancedata[:, 0:fut_time_steps, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(guancedata, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(guancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "guancedata / rain_threshold",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "histguancedata",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "histguancedata",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "histguancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(histguancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "histguancedata[:, :, :, 0:80, 0:80]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(histguancedata).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "forecaster_input_gc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "forecaster_input_gc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((hist_gc_0, guancedata[:, 0:-1, :, :, :] + ruitudata[:, 0:-1, :, :, :]), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(forecaster_input_gc).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "forecaster_input_gc / rain_threshold",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((hist_gc_0, guancedata[:, 0:-1, :, :, :] + ruitudata[:, 0:-1, :, :, :]), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(forecaster_input_gc).type(torch.FloatTensor).cuda().to(device)",
                            "Call"
                        ],
                        [
                            "forecaster_input_gc / rain_threshold",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "/data/code/fzl/encoder_forecaster_1_terminal/inference_model/epoch_ + str(i) + _checkpoint.pth.tar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}