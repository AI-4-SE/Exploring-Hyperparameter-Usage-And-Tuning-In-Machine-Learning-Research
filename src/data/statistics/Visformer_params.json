{
    "ObjectDetection/mmdet/models/backbones/swin_visformer.py": {
        "torch": {
            "rand_507": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "var_mean_46": {
                "variable": {
                    "value": "(var, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // window_size, window_size, W // window_size, window_size)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, -1, window_size, window_size)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps) * self.weight + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad_l, pad_r, pad_t, pad_b))",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x[:, :, :H, :W].contiguous()",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed0(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(b, x, attn_mask)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_156": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_157": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_159": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.head_dim * num_heads * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_171": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.head_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_173": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_176": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.init_channels, 7, stride=2, padding=3, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_325": {
                "variable": {
                    "value": "self.stage0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim // 4, window_size=56, shift_size=0 if i % 2 == 0 else 28, num_heads=num_heads[0], head_dim_ratio=0.25, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[0] == '0', spatial_conv=spatial_conv[0] == '1') for i in range(0, sum(depth[:1]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim // 2, window_size=28, shift_size=0 if i % 2 == 0 else 14, num_heads=num_heads[1], head_dim_ratio=0.5, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[1] == '0', spatial_conv=spatial_conv[1] == '1') for i in range(sum(depth[:1]), sum(depth[:2]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_357": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim, window_size=14, shift_size=0 if i % 2 == 0 else 7, num_heads=num_heads[2], head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[2] == '0', spatial_conv=spatial_conv[2] == '1') for i in range(sum(depth[:2]), sum(depth[:3]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim * 2, window_size=7, shift_size=0 if i % 2 == 0 else 3, num_heads=num_heads[3], head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[3] == '0', spatial_conv=spatial_conv[3] == '1') for i in range(sum(depth[:3]), sum(depth[:4]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_504": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_505": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_printoptions_506": {
                "precision": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_22": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_245": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // window_size, window_size, W // window_size, window_size)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, -1, window_size, window_size)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps) * self.weight + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad_l, pad_r, pad_t, pad_b))",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x[:, :, :H, :W].contiguous()",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed0(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(b, x, attn_mask)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_l, pad_r, pad_t, pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_425": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, Hp, Wp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_heads] * 4",
                            "BinOp"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_158": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_248": {
                "variable": {
                    "value": "shifted_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // window_size, window_size, W // window_size, window_size)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, -1, window_size, window_size)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps) * self.weight + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad_l, pad_r, pad_t, pad_b))",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x[:, :, :H, :W].contiguous()",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed0(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(b, x, attn_mask)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "b(x, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, Hp, Wp)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_318": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_312": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "engine.py": {
        "torch": {
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_29": {
                "enabled": {
                    "value": "amp",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "autocast_68": {
                "enabled": {
                    "value": "amp",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_158": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_192": {
                "variable": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_193": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_232": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval(args.model)(num_classes=args.nb_classes, drop_rate=args.drop, drop_path_rate=args.drop_path, qk_scale=args.qk_scale_factor)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_179": {
                "variable": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_187": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_190": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "rand_403": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "head_dim * num_heads * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.head_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim // 2, num_heads=num_heads, head_dim_ratio=0.5, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[0] == '0', spatial_conv=spatial_conv[0] == '1') for i in range(self.stage_num1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim, num_heads=num_heads, head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[1] == '0', spatial_conv=spatial_conv[1] == '1') for i in range(self.stage_num1, self.stage_num1 + self.stage_num2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_258": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim * 2, num_heads=num_heads, head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[2] == '0', spatial_conv=spatial_conv[2] == '1') for i in range(self.stage_num1 + self.stage_num2, depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_402": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_16": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "layer_norm_37": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed2",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed3",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.global_pooling(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "self.head(x.view(x.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_269": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.init_channels, 7, stride=2, padding=3, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.pos_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_224": {
                "variable": {
                    "value": "self.pos_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim // 2, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.pos_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.pos_embed3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim * 2, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_194": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum(depth)",
                            "Call"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "samplers.py": {
        "torch": {
            "Generator_37": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_40": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swin_models.py": {
        "torch": {
            "rand_537": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "var_mean_40": {
                "variable": {
                    "value": "(var, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // window_size, window_size, W // window_size, window_size)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, -1, window_size, window_size)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps) * self.weight + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed0(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed0",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed2",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed3",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.global_pooling(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "self.head(x.view(x.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_150": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_151": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_153": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.head_dim * num_heads * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_169": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.head_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_171": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_174": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.init_channels, 7, stride=2, padding=3, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_363": {
                "variable": {
                    "value": "self.stage0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim // 4, input_resolution=(img_size, img_size), window_size=56, shift_size=0 if i % 2 == 0 else 28, num_heads=num_heads[0], head_dim_ratio=0.25, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[0] == '0', spatial_conv=spatial_conv[0] == '1') for i in range(0, sum(depth[:1]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim // 2, input_resolution=(img_size, img_size), window_size=28, shift_size=0 if i % 2 == 0 else 14, num_heads=num_heads[1], head_dim_ratio=0.5, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[1] == '0', spatial_conv=spatial_conv[1] == '1') for i in range(sum(depth[:1]), sum(depth[:2]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_400": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim, input_resolution=(img_size, img_size), window_size=14, shift_size=0 if i % 2 == 0 else 7, num_heads=num_heads[2], head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[2] == '0', spatial_conv=spatial_conv[2] == '1') for i in range(sum(depth[:2]), sum(depth[:3]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_418": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim * 2, input_resolution=(img_size, img_size), window_size=7, shift_size=0 if i % 2 == 0 else 3, num_heads=num_heads[3], head_dim_ratio=1.0, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, group=group, attn_disabled=attn_stage[3] == '0', spatial_conv=spatial_conv[3] == '1') for i in range(sum(depth[:3]), sum(depth[:4]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_536": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_16": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "in_features * 5 // 6",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.pos_embed0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim // 4, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_362": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_379": {
                "variable": {
                    "value": "self.pos_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim // 2, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.pos_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_417": {
                "variable": {
                    "value": "self.pos_embed3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, embed_dim * 2, img_size, img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_431": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_heads] * 4",
                            "BinOp"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_152": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_277": {
                "variable": {
                    "value": "shifted_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // window_size, window_size, W // window_size, window_size)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, -1, window_size, window_size)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps) * self.weight + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "attn @ v",
                            "BinOp"
                        ],
                        [
                            "rearrange(x, 'b y (h w) z -> b (y z) h w', h=H, w=W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed0(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed0",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed2",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed3",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.global_pooling(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "self.head(x.view(x.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_352": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_346": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_379": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_398": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_417": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "to_2tuple(img_size)",
                            "Call"
                        ],
                        [
                            "img_size // 2",
                            "BinOp"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_222": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "weight_init.py": {
        "torch": {
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}