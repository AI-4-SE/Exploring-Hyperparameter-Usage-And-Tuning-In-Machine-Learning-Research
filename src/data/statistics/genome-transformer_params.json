{
    "base.py": {
        "torch": {
            "save_98": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/trained_model.pth'",
                            "Method Argument"
                        ],
                        [
                            "'data/trained_model.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_89": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/trained_model.pth'",
                            "Method Argument"
                        ],
                        [
                            "'data/trained_model.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Embedding_40": {
                "variable": {
                    "value": "self.layer_sga_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.sga_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.layer_can_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.can_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.layer_w_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attention_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.layer_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attention_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attention_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.layer_dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.layer_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.layer_dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.layer_w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deg_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "variable": {
                    "value": "E_t1_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer_w_0(E_t_flatten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E_t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_t2_flatten.view(-1, self.num_max_sga, self.attention_head)",
                            "Call"
                        ],
                        [
                            "E_t2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer_w_2(hid_tmr_relu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "attn_wt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(E_t2)",
                            "Call"
                        ],
                        [
                            "A.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "emb_sga",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(A.permute(0, 2, 1), E_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "emb_sga",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_sga_emb(sga_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_143": {
                "input": {
                    "value": "emb_tmr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_can + emb_sga",
                            "BinOp"
                        ],
                        [
                            "emb_sga",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(emb_tmr, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_145": {
                "input": {
                    "value": "hid_tmr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_w_1(emb_tmr_relu)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(hid_tmr, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "gene_emb_pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(self.input_dir, 'gene_emb_pretrain.npy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_129": {
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "E_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_sga_emb(sga_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_183": {
                "input": {
                    "value": "self.epsilon + 1 - torch.abs(preds - labels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_183": {
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}