{
    "pixelcnn/ardgm_ren_et_al_test.py": {
        "sklearn": {
            "roc_curve_23": {
                "variable": {
                    "value": "(fpr, tpr, thrs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_24": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pixelcnn/linear_tests.py": {
        "sklearn": {
            "roc_curve_78": {
                "variable": {
                    "value": "(fpr, tpr, thrs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_79": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/oodutils.py": {
        "sklearn": {
            "roc_curve_61": {
                "variable": {
                    "value": "(fpr, tpr, thrs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_62": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones_like(fea_inl), np.zeros_like(fea_ood)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fea_inl, fea_ood], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pixelcnn/data/others.py": {
        "tensorflow": {
            "get_seed_36": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_39": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pixelcnn/data/small.py": {
        "tensorflow": {}
    },
    "pixelcnn/gen_repr.py": {
        "tensorflow": {
            "placeholder_76": {
                "variable": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_94": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "name_": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "model_spec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_100": {
                "variable": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_101": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "args.polyak_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_102": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(all_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "output_reprs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "test_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_114": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_137": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_138": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_65": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_82": {
                "variable": {
                    "value": "h_init",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(args.init_batch_size,))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_148": {
                "values": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.placeholder(tf.float32, shape=(args.batch_size,) + obs_shape) for i in range(args.nr_gpu)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_84": {
                "indices": {
                    "value": "tf.Variable(y_sample[i], trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_85": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_86": {
                "indices": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_107": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "initial_value": {
                    "value": "y_sample[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pixelcnn/pixel_cnn_pp/model.py": {
        "tensorflow": {
            "concat_38": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.ones(xs[:-1] + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.int_shape(f)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn.nin(nn.concat_elu(f), 3, init_scale=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(nn.nin(nn.concat_elu(f), 3, init_scale=0.1))",
                            "Call"
                        ],
                        [
                            "tf.split(x_sample, 10, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collection_64": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list + ul_list",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_72": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_73": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_91": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_92": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_38": {
                "shape": {
                    "value": "xs[:-1] + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collection_82": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_83": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_90": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_95": {
                "features": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_115": {
                "features": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_81": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pixelcnn/pixel_cnn_pp/nn.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_21": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_27": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l[:, :, :, nr_mix:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xs + [nr_mix * 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_54": {
                "variable": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 1, :] + coeffs[:, :, :, 0, :] * x[:, :, :, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "m3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 2, :] + coeffs[:, :, :, 1, :] * x[:, :, :, 0, :] + coeffs[:, :, :, 2, :] * x[:, :, :, 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(means[:, :, :, 0, :], [xs[0], xs[1], xs[2], 1, nr_mix]), m2, m3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "cdf_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_81": {
                "condition": {
                    "value": "cdf_delta > 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.maximum(cdf_delta, 1e-12))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_pdf_mid - np.log(127.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l[:, :, :, nr_mix:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xs + [nr_mix * 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_98": {
                "variable": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05))), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nr_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ls[-1] / 10)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.argmax(logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05))), 3), depth=nr_mix, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sel, xs[:-1] + [1, nr_mix])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs[:-1] + [1, nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l[:, :, :, :, :nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_102": {
                "variable": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.tanh(l[:, :, :, :, 2 * nr_mix:3 * nr_mix]) * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_108": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 0], -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "adam_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_299": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(c1, num_filters * 2, init_scale=0.1)",
                            "Call"
                        ],
                        [
                            "c2 + tf.reshape(tf.matmul(h, hw), [xs[0], 1, 1, 2 * num_filters])",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "elu_15": {
                "features": {
                    "value": "tf.concat([x, -x], axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_112": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 1] + coeffs[:, :, :, 0] * x0, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_113": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_114": {
                "values": {
                    "value": "[tf.reshape(x0, xs[:-1] + [1]), tf.reshape(x1, xs[:-1] + [1]), tf.reshape(x2, xs[:-1] + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_134": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost_or_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "mg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(p.get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "p.name + '_adam_mg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_154": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x_, W, [1] + stride + [1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[xs[0], xs[1] * stride[0], xs[2] * stride[1], num_filters]",
                            "List"
                        ],
                        [
                            "[xs[0], xs[1] * stride[0] + filter_size[0] - 1, xs[2] * stride[1] + filter_size[1] - 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_273": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), num_filters)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), num_filters)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_307": {
                "values": {
                    "value": "[tf.zeros([xs[0], 1, xs[2], xs[3]]), x[:, :xs[1] - 1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_311": {
                "values": {
                    "value": "[tf.zeros([xs[0], xs[1], 1, xs[3]]), x[:, :, :xs[2] - 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_15": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_22": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m2), axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "tf.square(127.5 * (x - xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "shape": {
                    "value": "xs + [nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "features": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_67": {
                "features": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_98": {
                "input": {
                    "value": "logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_108": {
                "x": {
                    "value": "x[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(p.get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "p.name + '_adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_182": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_215": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_253": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "tensor": {
                    "value": "tf.matmul(h, hw)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], 1, 1, 2 * num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "tf.exp(x - m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "tf.exp(x - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_33": {
                "x": {
                    "value": "1e-10 + tf.reduce_sum(tf.square(127.5 * (x - xs)), 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.square(127.5 * (x_sample[i] - x_sample[j]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "means[:, :, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_70": {
                "features": {
                    "value": "mid_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x < -0.999, log_cdf_plus, tf.where(x > 0.999, log_one_minus_cdf_min, tf.where(cdf_delta > 1e-05, tf.log(tf.maximum(cdf_delta, 1e-12)), log_pdf_mid - np.log(127.5))))",
                            "Call"
                        ],
                        [
                            "log_probs[:, :, :, 0] + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(log_probs, 3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "x": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_107": {
                "x": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(l[:, :, :, :, nr_mix:2 * nr_mix], -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.reduce_sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, 4), -7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_112": {
                "x": {
                    "value": "x[:, :, :, 1] + coeffs[:, :, :, 0] * x0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_113": {
                "x": {
                    "value": "x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1, -1.0), 1.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs[:-1] + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_149": {
                "x": {
                    "value": "mg_hat + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g / tf.sqrt(tf.reduce_sum(tf.square(V), [0]))",
                            "BinOp"
                        ],
                        [
                            "g / tf.sqrt(tf.reduce_sum(tf.square(V), [0]))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_209": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_209": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_212": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x_, W, [1] + stride + [1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_246": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, num_filters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_246": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[xs[0], xs[1] * stride[0], xs[2] * stride[1], num_filters]",
                            "List"
                        ],
                        [
                            "[xs[0], xs[1] * stride[0] + filter_size[0] - 1, xs[2] * stride[1] + filter_size[1] - 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x_, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x_, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x_, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "get_name('conditional_weights', counters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('hw', ema, shape=[int_shape(h)[-1], 2 * num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "hw.initialized_value()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_307": {
                "shape": {
                    "value": "[xs[0], 1, xs[2], xs[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "shape": {
                    "value": "[xs[0], xs[1], 1, xs[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_22": {
                "x": {
                    "value": "x - m2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_40": {
                "x": {
                    "value": "1e-10 + tf.reduce_sum(tf.square(127.5 * (x_sample[i] - x_sample[j])), 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_81": {
                "x": {
                    "value": "tf.maximum(cdf_delta, 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_107": {
                "x": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "shape": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_147": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_148": {
                "x": {
                    "value": "mom2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0, 'adam_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_170": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_172": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_174": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_184": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_202": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_204": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_206": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_216": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_217": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_239": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_241": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_243": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_254": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_255": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_81": {
                "x": {
                    "value": "cdf_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_143": {
                "x": {
                    "value": "mom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0, 'adam_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_178": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_187": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g / tf.sqrt(tf.reduce_sum(tf.square(V), [0]))",
                            "BinOp"
                        ],
                        [
                            "g / tf.sqrt(tf.reduce_sum(tf.square(V), [0]))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_219": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_257": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, num_filters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_257": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_294": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "127.5 * (x - xs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_40": {
                "x": {
                    "value": "127.5 * (x_sample[i] - x_sample[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_187": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x_.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x_.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x_.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pixelcnn/train.py": {
        "tensorflow": {
            "placeholder_100": {
                "variable": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "name_": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "model_spec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_124": {
                "variable": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_125": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "args.polyak_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_126": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(all_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "tf_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_179": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_180": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_106": {
                "variable": {
                    "value": "h_init",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(args.init_batch_size,))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "nn.adam_updates(all_params, grads[0], lr=tf_lr, mom1=0.95, mom2=0.9995)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "maintain_averages_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.group(ema.apply(all_params))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_101": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_155": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_108": {
                "indices": {
                    "value": "tf.Variable(y_sample[i], trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_109": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_110": {
                "indices": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_135": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "initial_value": {
                    "value": "y_sample[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_142": {
                "ys": {
                    "value": "loss_gen[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_139": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pixelcnn/utl.py": {
        "tensorflow": {
            "reshape_37": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l[:, :, :, nr_mix:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xs + [nr_mix * 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_39": {
                "variable": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 1, :] + coeffs[:, :, :, 0, :] * x[:, :, :, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "m3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 2, :] + coeffs[:, :, :, 1, :] * x[:, :, :, 0, :] + coeffs[:, :, :, 2, :] * x[:, :, :, 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(means[:, :, :, 0, :], [xs[0], xs[1], xs[2], 1, nr_mix]), m2, m3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_51": {
                "variable": {
                    "value": "cdf_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_67": {
                "condition": {
                    "value": "cdf_delta > 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.maximum(cdf_delta, 1e-12))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_pdf_mid - np.log(127.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_79": {
                "variable": {
                    "value": "p_mi_given_c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_mixture_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_prob_from_logits(logit_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "ar_residual_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "centered_x[:, :, :, 0] * p_mi_given_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "p_mi_given_cr",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_mixture_coef + log_probs_given_c_mi[:, :, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "ar_residual_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "centered_x[:, :, :, 1] * p_mi_given_cr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "p_mi_given_crg",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_mixture_coef + log_probs_given_c_mi[:, :, :, 0] + log_probs_given_c_mi[:, :, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "variable": {
                    "value": "ar_residual_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "centered_x[:, :, :, 2] * p_mi_given_crg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "ar_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ar_residual_r, ar_residual_g, ar_residual_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "channelwise_score",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c[..., None] for c in channelwise_score]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_14": {
                "condition": {
                    "value": "x < -0.999",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inv_s",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(x > 0.999, -inv_s, score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_76": {
                "variable": {
                    "value": "means1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(means[:, :, :, 0, :], [xs[0], xs[1], xs[2], 1, nr_mix]), m2, m3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "p_cwise",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp_cwise + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_134": {
                "variable": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(*xs)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_shape(x)",
                            "Call"
                        ],
                        [
                            "list(xs) if _is_list_like(xs) else [xs]",
                            "IfExp"
                        ],
                        [
                            "[tf.convert_to_tensor(x) for x in xs]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "output_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_16": {
                "condition": {
                    "value": "x > 0.999",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-inv_s",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.nn.sigmoid(-xn) - tf.nn.sigmoid(xn)) * inv_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "shape": {
                    "value": "xs + [nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_52": {
                "features": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_53": {
                "features": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x < -0.999, log_cdf_plus, tf.where(x > 0.999, log_one_minus_cdf_min, tf.where(cdf_delta > 1e-05, tf.log(tf.maximum(cdf_delta, 1e-12)), log_pdf_mid - np.log(127.5))))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, 3) + log_mixture_coef",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_131": {
                "name": {
                    "value": "name or 'value_and_gradient'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_217": {
                "name": {
                    "value": "name or 'jacobians_diag'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "sigmoid_13": {
                "x": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - mu) * inv_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "means[:, :, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_56": {
                "features": {
                    "value": "mid_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_77": {
                "t": {
                    "value": "means1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(means[:, :, :, 0, :], [xs[0], xs[1], xs[2], 1, nr_mix]), m2, m3], 3)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "mixt_coef * p_cwise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_224": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "executing_eagerly_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(*xs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [-1]], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_267": {
                "variable": {
                    "value": "(_, jacobian_diag_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda j, _: j < n",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda j, result: (j + 1, result.write(j, loop_body(j)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, tf.TensorArray(x.dtype, n)]",
                            "List"
                        ],
                        [
                            "[0, tf.TensorArray(x.dtype, n)]",
                            "List"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_273": {
                "variable": {
                    "value": "shape_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_276": {
                "variable": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "jacobian_diag_res.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a=jacobian_diag_res.stack())",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_jacobian_diag, shape_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=jacobian_diag_res.stack())",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_jacobian_diag, shape_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_317": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_325": {
                "variable": {
                    "value": "(_, jacobian_diag_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda j, _: j < n",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "make_loop_body(i, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, tf.TensorArray(x.dtype, n)]",
                            "List"
                        ],
                        [
                            "[0, tf.TensorArray(x.dtype, n)]",
                            "List"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_331": {
                "variable": {
                    "value": "shape_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "jacobian_diag_res.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_jacobian_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a=jacobian_diag_res.stack())",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_jacobian_diag, shape_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=jacobian_diag_res.stack())",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_jacobian_diag, shape_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_67": {
                "x": {
                    "value": "tf.maximum(cdf_delta, 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "means[:, :, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_67": {
                "x": {
                    "value": "cdf_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_237": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_239": {
                "values": {
                    "value": "[sample_shape, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_242": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_242": {
                "x": {
                    "value": "tf.reduce_prod(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_246": {
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [1]], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(*state)",
                            "Call"
                        ],
                        [
                            "list(res) if _is_list_like(res) else [res]",
                            "IfExp"
                        ],
                        [
                            "res * len(state)",
                            "BinOp"
                        ],
                        [
                            "[tf.reshape(r + tf.zeros_like(s), tf.concat([sample_shape, [-1]], -1)) for (r, s) in zip(res, state)]",
                            "ListComp"
                        ],
                        [
                            "value_and_gradient(fn_slice(i, j), xs)[1][i]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(ys=y_[..., j], xs=x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, 0)",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [-1]], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_261": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(*state)",
                            "Call"
                        ],
                        [
                            "list(res) if _is_list_like(res) else [res]",
                            "IfExp"
                        ],
                        [
                            "res * len(state)",
                            "BinOp"
                        ],
                        [
                            "[tf.reshape(r + tf.zeros_like(s), tf.concat([sample_shape, [-1]], -1)) for (r, s) in zip(res, state)]",
                            "ListComp"
                        ],
                        [
                            "value_and_gradient(fn_slice(i, j), xs)[1][i]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(ys=y_[..., j], xs=x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, 0)",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [1]], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(*state)",
                            "Call"
                        ],
                        [
                            "list(res) if _is_list_like(res) else [res]",
                            "IfExp"
                        ],
                        [
                            "res * len(state)",
                            "BinOp"
                        ],
                        [
                            "[tf.reshape(r + tf.zeros_like(s), tf.concat([sample_shape, [-1]], -1)) for (r, s) in zip(res, state)]",
                            "ListComp"
                        ],
                        [
                            "value_and_gradient(fn_slice(i, j), xs)[1][i]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(ys=y_[..., j], xs=x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(tf.concat([sample_shape, [1]], -1), dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, 0)",
                            "Call"
                        ],
                        [
                            "res[..., j]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [-1]], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_316": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_316": {
                "x": {
                    "value": "tf.reduce_prod(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_320": {
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.size(x) / tf.cast(tf.reduce_prod(sample_shape), dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_242": {
                "input_tensor": {
                    "value": "sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_252": {
                "ys": {
                    "value": "y_[..., j]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y + tf.zeros_like(x)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, tf.concat([sample_shape, [-1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_295": {
                "tensor": {
                    "value": "r + tf.zeros_like(s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([sample_shape, [-1]], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "input": {
                    "value": "fn_broadcast(*state)[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_316": {
                "input_tensor": {
                    "value": "sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_255": {
                "values": {
                    "value": "[sample_shape, [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_259": {
                "values": {
                    "value": "[sample_shape, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[sample_shape, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_307": {
                "values": {
                    "value": "[sample_shape, [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_309": {
                "values": {
                    "value": "[sample_shape, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_295": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vae/src/datasets.py": {
        "tensorflow": {
            "get_seed_227": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_230": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/db_model_wrapper.py": {
        "tensorflow": {
            "sigmoid_29": {
                "variable": {
                    "value": "self.qxz_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "self.recon_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tfd.Normal(self._logits, self.pxz_gamma).log_prob(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "self._pxz_gamma_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pxz_gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "variable": {
                    "value": "self.recon_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tfd.Normal(self.qxz_mean, self.pxz_gamma).log_prob(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1, -2, -3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_176": {
                "variable": {
                    "value": "self._pxz_gamma_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pxz_gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_181": {
                "variable": {
                    "value": "self.pxz_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._pxz_gamma_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_185": {
                "variable": {
                    "value": "self.pxz_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pxz_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "clip_sd_by",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_198": {
                "variable": {
                    "value": "z_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([h, x], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_213": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "self.name + '/' + ENCODER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "AUTO_REUSE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "lrelu(conv2d(y, 32 * self.cap_dupl, 4, 4, 2, 2, name='conv0', use_sn=True))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(y, 64 * self.cap_dupl, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128 * self.cap_dupl, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, 256, 4, 4, 2, 2, name='conv3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(z, 1024, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 256, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 256])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 512, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 512])",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 8, final_side_length // 8, 256 * self.cap_dupl], 4, 4, 2, 2, name='conv1h')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 2, final_side_length // 2, 64 * self.cap_dupl], 4, 4, 2, 2, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 4, final_side_length // 4, 128 * self.cap_dupl], 4, 4, 2, 2, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], np.prod(y.shape.as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "lrelu(conv2d(y, 32 * self.cap_dupl, 4, 4, 2, 2, name='conv0', use_sn=True))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(y, 64 * self.cap_dupl, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128 * self.cap_dupl, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, 256, 4, 4, 2, 2, name='conv3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(z, 1024, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 256, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 256])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 512, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 512])",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 8, final_side_length // 8, 256 * self.cap_dupl], 4, 4, 2, 2, name='conv1h')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 2, final_side_length // 2, 64 * self.cap_dupl], 4, 4, 2, 2, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 4, final_side_length // 4, 128 * self.cap_dupl], 4, 4, 2, 2, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], np.prod(y.shape.as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z + tf.random_normal(shape=tf.shape(z)) * sd_z",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "self.name + '/' + DECODER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "AUTO_REUSE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "lrelu(conv2d(y, 32 * self.cap_dupl, 4, 4, 2, 2, name='conv0', use_sn=True))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(y, 64 * self.cap_dupl, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128 * self.cap_dupl, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, 256, 4, 4, 2, 2, name='conv3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(z, 1024, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 256, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 256])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 512, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 512])",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 8, final_side_length // 8, 256 * self.cap_dupl], 4, 4, 2, 2, name='conv1h')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 2, final_side_length // 2, 64 * self.cap_dupl], 4, 4, 2, 2, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 4, final_side_length // 4, 128 * self.cap_dupl], 4, 4, 2, 2, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, final_side_length // 4, final_side_length // 4, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'first'",
                            "MethodArgument"
                        ],
                        [
                            "'second'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "self.name + '/' + ENCODER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "AUTO_REUSE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_193": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "self.name + '/' + DECODER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "AUTO_REUSE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_210": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_214": {
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z + tf.random_normal(shape=tf.shape(z)) * sd_z",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.orthogonal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "lrelu(conv2d(y, 32 * self.cap_dupl, 4, 4, 2, 2, name='conv0', use_sn=True))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(y, 64 * self.cap_dupl, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128 * self.cap_dupl, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, 256, 4, 4, 2, 2, name='conv3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(z, 1024, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 256, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 256])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 512, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 512])",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 8, final_side_length // 8, 256 * self.cap_dupl], 4, 4, 2, 2, name='conv1h')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 2, final_side_length // 2, 64 * self.cap_dupl], 4, 4, 2, 2, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 4, final_side_length // 4, 128 * self.cap_dupl], 4, 4, 2, 2, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 4, 4, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training=self.is_training, scope='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "lrelu(conv2d(y, 32 * self.cap_dupl, 4, 4, 2, 2, name='conv0', use_sn=True))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(y, 64 * self.cap_dupl, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128 * self.cap_dupl, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, 256, 4, 4, 2, 2, name='conv3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [tf.shape(x)[0], np.prod(y.shape.as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "linear(z, 1024, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 256, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 256])",
                            "Call"
                        ],
                        [
                            "linear(z, 4 * 4 * 512, 'fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, 4, 4, 512])",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 8, final_side_length // 8, 256 * self.cap_dupl], 4, 4, 2, 2, name='conv1h')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 2, final_side_length // 2, 64 * self.cap_dupl], 4, 4, 2, 2, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                            "Call"
                        ],
                        [
                            "deconv2d(y, [batch_size, final_side_length // 4, final_side_length // 4, 128 * self.cap_dupl], 4, 4, 2, 2, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 4, 4, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_134": {
                "features": {
                    "value": "self._pxz_gamma_raw * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_136": {
                "x": {
                    "value": "self._pxz_gamma_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "rclh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discrete_logistics_likelihood(self.qxz_mean, self.pxz_gamma, x, side_censored=observation == 'dlogs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1, -2, -3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_179": {
                "features": {
                    "value": "self._pxz_gamma_raw * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_195": {
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, units=self.h_dim, activation=self.activation, kernel_initializer=tf.initializers.he_normal())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_196": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.orthogonal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_199": {
                "values": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_67": {
                "features": {
                    "value": "gaussian_params[:, self.z_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "he_normal_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z + tf.random_normal(shape=tf.shape(z)) * sd_z",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/fid.py": {
        "tensorflow": {
            "ConfigProto_316": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_47": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_49": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_46": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_318": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_71": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/fid_daib.py": {
        "tensorflow": {
            "InteractiveSession_226": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_31": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_33": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_30": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_54": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/ood_test.py": {
        "tensorflow": {
            "ConfigProto_62": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_64": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G.model_s1.q_z.kl_divergence(p_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_152": {
                "variable": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_lo >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(-1000) * tf.ones_like(x_lo)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_153": {
                "variable": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_hi <= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x_hi <= 1, x_hi, tf.to_float(+1000) * tf.ones_like(x_hi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(+1000) * tf.ones_like(x_hi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_154": {
                "variable": {
                    "value": "recon_loglh",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.abs(G.x_ph - G.model_s1.qxz_mean) <= 2 * G.model_s1.pxz_gamma",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.math.log(p_xz.cdf(tf.to_double(x_hi)) - p_xz.cdf(tf.to_double(x_lo))))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(p_xz.log_prob(tf.to_double(G.x_ph))) + tf.math.log(1 / 255)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "recon_loglh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_loglh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.abs(G.x_ph - G.model_s1.qxz_mean) <= 2 * G.model_s1.pxz_gamma, tf.to_float(tf.math.log(p_xz.cdf(tf.to_double(x_hi)) - p_xz.cdf(tf.to_double(x_lo)))), tf.to_float(p_xz.log_prob(tf.to_double(G.x_ph))) + tf.math.log(1 / 255))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(recon_loglh, [1, 2, 3])",
                            "Call"
                        ],
                        [
                            "-G.model_s1.recon_nll",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_66": {
                "checkpoint_dir": {
                    "value": "DIR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_args.model_dir",
                            "Attribute"
                        ],
                        [
                            "DIR[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_162": {
                "input": {
                    "value": "G.model_s1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "G.model_s1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_double_151": {
                "x": {
                    "value": "G.model_s1.pxz_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "x": {
                    "value": "tf.math.log(p_xz.cdf(tf.to_double(x_hi)) - p_xz.cdf(tf.to_double(x_lo)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_152": {
                "x": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "input": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_153": {
                "x": {
                    "value": "+1000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_153": {
                "input": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x_hi <= 1, x_hi, tf.to_float(+1000) * tf.ones_like(x_hi))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_155": {
                "x": {
                    "value": "G.x_ph - G.model_s1.qxz_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_156": {
                "x": {
                    "value": "p_xz.cdf(tf.to_double(x_hi)) - p_xz.cdf(tf.to_double(x_lo))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_157": {
                "x": {
                    "value": "p_xz.log_prob(tf.to_double(G.x_ph))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_157": {
                "x": {
                    "value": "1 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(G.model_s1.q_z.kl_divergence(p_z), [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_4": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_double_157": {
                "x": {
                    "value": "G.x_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_double_156": {
                "x": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/optimizers.py": {
        "tensorflow": {
            "reduce_mean_49": {
                "variable": {
                    "value": "self.rce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.recon_nll / tf.to_float(tf.reduce_prod(model.x.shape[1:])) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "self.reconstruction_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.recon_nll",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(kl, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_25": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.print[pxz_sd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pxz_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_36": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_39": {
                "input_tensor": {
                    "value": "tf.convert_to_tensor(gn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "model.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_67": {
                "input": {
                    "value": "model.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.q_z.kl_divergence(self.p_z)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "(model.qxz_mean - model.x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_32": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_n_38": {
                "inputs": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.norm(g) for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "to_float_38": {
                "x": {
                    "value": "len(gn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "value": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.norm(g) for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_19": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_20": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_50": {
                "x": {
                    "value": "tf.reduce_prod(model.x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_50": {
                "input_tensor": {
                    "value": "model.x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "vae/src/train_vae.py": {
        "tensorflow": {
            "set_verbosity_9": {
                "level": {
                    "value": "tfv1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_85": {
                "variable": {
                    "value": "inception_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_89": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_91": {
                "variable": {
                    "value": "inception_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "inception_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_330": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_332": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_342": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_450": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_452": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_454": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "x_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, HW, HW, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "lr_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "x_recon_s1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_s1._decoder(model_s1.z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "x_recon_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_s1._decoder(z_recon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_179": {
                "variable": {
                    "value": "samples_s1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_s1._decoder(pz_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "samples_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_s1._decoder(pz_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "x_recon_err_s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x_recon_s1 - model_s1.x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "x_recon_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x_recon_s2 - model_s1.x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_327": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_336": {
                "variable": {
                    "value": "s1_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "FIRST_STAGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'first_stage'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Saver_337": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "s1_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=FIRST_STAGE)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "s2_inp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "s2_inp_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "s2_inp_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "s2_inp_sd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "s2im_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "s2im",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "s2is_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "s2is",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_144": {
                "variable": {
                    "value": "set_s2_stats_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(s2_inp_mean, s2im_ph), tf.assign(s2_inp_sd, s2is_ph)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "s2_inp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "s2_inp_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_151": {
                "variable": {
                    "value": "qzx_sd_med",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "qzx_sd_med",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "qsm_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.z_dims_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qsm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_154": {
                "variable": {
                    "value": "set_qsm_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "qzx_sd_med",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('qzx_sd_med', [args.z_dims_s1], tf.float32, tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "np.median(self.s1_sig_z, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "qsm_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[args.z_dims_s1], name='qsm')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_447": {
                "checkpoint_dir": {
                    "value": "args.dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "input": {
                    "value": "model_s1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_177": {
                "input": {
                    "value": "model_s1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "model_s2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_181": {
                "input": {
                    "value": "model_s2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_338": {
                "checkpoint_dir": {
                    "value": "args.restore_s1_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_5": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_145": {
                "ref": {
                    "value": "s2_inp_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([args.z_dims_s1])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "s2is_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[args.z_dims_s1], name='s2is')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_183": {
                "input": {
                    "value": "pz_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_pz.sample()",
                            "Call"
                        ],
                        [
                            "model_s2._decoder(dist_pz.sample())",
                            "Call"
                        ],
                        [
                            "pz_sample + tf.random_normal(shape=tf.shape(pz_sample)) * model_s2.pxz_gamma",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "vae/src/tsvaenet/two_stage_vae_model.py": {
        "tensorflow": {
            "placeholder_19": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_68": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "self.opt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "self.opt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_57": {
                "variable": {
                    "value": "self.summary1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_65": {
                "variable": {
                    "value": "self.summary2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.z, t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "self.mu_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.z, t], -1)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.u, t], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_84": {
                "variable": {
                    "value": "self.logsd_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.z, t], -1)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.u, t], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logsd_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_85": {
                "variable": {
                    "value": "self.sd_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logsd_u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.u, t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "self.z_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.z, t], -1)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.u, t], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "z_hat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "self.loggamma_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loggamma_z",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_97": {
                "variable": {
                    "value": "self.gamma_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loggamma_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.x.get_shape().as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_175": {
                "variable": {
                    "value": "self.logsd_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sd_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, final_side_length // 4, final_side_length // 4, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "deconv2d(y, [self.batch_size, final_side_length, final_side_length, data_depth], 4, 4, 2, 2, name='conv4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loggamma_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_191": {
                "variable": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_204": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_205": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_207": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_208": {
                "variable": {
                    "value": "self.mu_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_209": {
                "variable": {
                    "value": "self.logsd_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_210": {
                "variable": {
                    "value": "self.sd_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logsd_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(y, 8 * 8 * 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8, 8, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_221": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_222": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_224": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_225": {
                "variable": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loggamma_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_228": {
                "variable": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_dim",
                            "Attribute"
                        ],
                        [
                            "dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_252": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_255": {
                "variable": {
                    "value": "self.mu_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_256": {
                "variable": {
                    "value": "self.logsd_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_257": {
                "variable": {
                    "value": "self.sd_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logsd_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_277": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * 2 * dims[0]",
                            "BinOp"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, 2, dims[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_284": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "data_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "self.x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_287": {
                "variable": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loggamma_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_288": {
                "variable": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loggamma_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_12": {
                "x": {
                    "value": "self.raw_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "stage1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "stage2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.square((self.z - self.z_hat) / self.gamma_z) / 2.0 + self.loggamma_z + HALF_LOG_TWO_PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_49": {
                "name": {
                    "value": "stage1_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "stage2_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.z, t], -1)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.u, t], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.second_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_92": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.z, t], -1)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(t, self.second_dim, tf.nn.relu, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.u, t], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.second_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "input_tensor": {
                    "value": "tf.square(self.mu_z) + tf.square(self.sd_z) - 2 * self.logsd_z - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "tf.square((self.x - self.x_hat) / self.gamma_x) / 2.0 + self.loggamma_x + HALF_LOG_TWO_PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "tf.square(self.mu_u) + tf.square(self.sd_u) - 2 * self.logsd_u - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_51": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_52": {
                "name": {
                    "value": "recon",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_53": {
                "name": {
                    "value": "kl_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.kl_loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_54": {
                "name": {
                    "value": "gen_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gen_loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_55": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_56": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "kl_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.kl_loss2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "gen_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gen_loss2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_63": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gamma_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_174": {
                "features": {
                    "value": "gaussian_params[:, self.latent_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_217": {
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "8 * 8 * 1024",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "self.x * tf.log(tf.maximum(self.x_hat, 1e-08)) + (1 - self.x) * tf.log(tf.maximum(1 - self.x_hat, 1e-08))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_202": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_203": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_204": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_205": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_220": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_222": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "lrelu(conv2d(y, 64, 4, 4, 2, 2, name='conv1', use_sn=True))",
                            "Call"
                        ],
                        [
                            "conv2d(y, 128, 4, 4, 2, 2, name='conv2', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "linear(y, 1024, scope='fc3', use_sn=True)",
                            "Call"
                        ],
                        [
                            "batch_norm(y, is_training=self.is_training, scope='bn3')",
                            "Call"
                        ],
                        [
                            "lrelu(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 1024, 'fc1'), is_training=self.is_training, scope='bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(linear(y, 128 * (final_side_length // 4) * (final_side_length // 4), scope='fc2'), is_training=self.is_training, scope='bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [self.batch_size, final_side_length // 4, final_side_length // 4, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(deconv2d(y, [self.batch_size, final_side_length // 2, final_side_length // 2, 64], 4, 4, 2, 2, name='conv3'), is_training=self.is_training, scope='bn3'))",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 128, 5, 1, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 512, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d(y, 1024, 5, 2, 'same'), self.is_training, 'bn4'))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(y)",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(y, 8 * 8 * 1024))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 8, 8, 1024])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 512, 5, 2, 'same'), self.is_training, 'bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 256, 5, 2, 'same'), self.is_training, 'bn2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_norm(tf.layers.conv2d_transpose(y, 128, 5, 2, 'same'), self.is_training, 'bn3'))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(y, 3, 5, 1, 'same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(self.x, dim, self.kernel_size, 1, 'same', name='conv0')",
                            "Call"
                        ],
                        [
                            "scale_block(y, dim, self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ],
                        [
                            "scale_fc_block(y, self.fc_dim, 'fc', 1, self.depth_per_block)",
                            "Call"
                        ],
                        [
                            "downsample(y, dim, self.kernel_size, 'downsample' + str(i))",
                            "Call"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(y, fc_dim, name='fc0')",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 2, 2, dims[0]])",
                            "Call"
                        ],
                        [
                            "upsample(y, dims[i + 1], self.kernel_size, 'up' + str(i))",
                            "Call"
                        ],
                        [
                            "scale_block(y, dims[i + 1], self.is_training, 'scale' + str(i), self.block_per_scale, self.depth_per_block, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, data_depth, self.kernel_size, 1, 'same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_45": {
                "x": {
                    "value": "(self.z - self.z_hat) / self.gamma_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_37": {
                "x": {
                    "value": "self.sd_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_39": {
                "x": {
                    "value": "(self.x - self.x_hat) / self.gamma_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_41": {
                "x": {
                    "value": "tf.maximum(1 - self.x_hat, 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_44": {
                "x": {
                    "value": "self.sd_u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "x": {
                    "value": "1 - self.x_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vae/src/tsvaenet/util.py": {
        "tensorflow": {
            "reshape_19": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "u_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_.name.replace(':', '') + '/u_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(w.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_49": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_var",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.identity(u)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_50": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w), u), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "a": {
                    "value": "tf.transpose(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, input_.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "w_tensor_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / norm_value",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_39": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.transpose(w), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_40": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(w, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "identity_44": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_var",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.identity(u)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_92": {
                "x": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * input_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_101": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "statistics_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1, 2]",
                            "List"
                        ],
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_123": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, input_.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ensure_shape_125": {
                "x": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_157": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_43": {
                "control_inputs": {
                    "value": "[tf.assign(u_var, u, name='update_u')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, input_.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ensure_shape_76": {
                "x": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "moving_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_111": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : mean_var_with_update(moving_mean, moving_variance)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (moving_mean, moving_variance)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_125": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_139": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(y, is_training, 'bn' + str(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_147": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training, 'bn' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, out_dim, kernel_size, padding='same', name='layer' + str(i))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(tf.nn.relu(y), out_dim, name='layer' + str(i))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "res_block(y, out_dim, is_training, 'block' + str(i), depth_per_block, kernel_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "res_fc_block(y, out_dim, 'block' + str(i), depth_per_block)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_156": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.nn.relu(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_var",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.identity(u)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, input_.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w), u), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_var",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.identity(u)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_76": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, spectral_norm(w), strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_83": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_102": {
                "control_inputs": {
                    "value": "[assign_moving_average(moving_mean, mean, decay), assign_moving_average(moving_variance, variance, decay)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, input_.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_43": {
                "ref": {
                    "value": "u_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(input_.name.replace(':', '') + '/u_var', shape=(w.shape[0], 1), dtype=w.dtype, initializer=tf.random_normal_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_var",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v), dim=None, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.identity(u)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "update_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_75": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "spectral_norm(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_103": {
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_115": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', params_shape, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', params_shape, initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_117": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_122": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_156": {
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(batch_norm(y, is_training, 'bn' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, out_dim, kernel_size, padding='same', name='layer' + str(i))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(tf.nn.relu(y), out_dim, name='layer' + str(i))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "res_block(y, out_dim, is_training, 'block' + str(i), depth_per_block, kernel_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "res_fc_block(y, out_dim, 'block' + str(i), depth_per_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/src/utils.py": {
        "tensorflow": {
            "where_27": {
                "variable": {
                    "value": "p_exact",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.abs(obs - loc) <= 2 * scale",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "p_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.cdf(tf.to_double(x_hi)) - dist.cdf(tf.to_double(x_lo))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.abs(obs - loc) <= 2 * scale, p_exact, tf.ones_like(p_exact))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(p_exact)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_29": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.abs(obs - loc) <= 2 * scale",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.log(p_exact)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dist.log_prob(tf.to_double(obs)) + tf.to_double(tf.math.log(1 / 255))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_units], initializer='glorot_uniform')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_92": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_93": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_units], initializer='glorot_uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_17": {
                "variable": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_lo >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs - 1 / 255 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(-1000) * tf.ones_like(x_lo)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_18": {
                "variable": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_hi <= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs + 1 / 255 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(x_hi <= 1, x_hi, tf.to_float(+1000) * tf.ones_like(x_hi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(+1000) * tf.ones_like(x_hi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_33": {
                "x": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.abs(obs - loc) <= 2 * scale, tf.math.log(p_exact), dist.log_prob(tf.to_double(obs)) + tf.to_double(tf.math.log(1 / 255)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_88": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_units], initializer='glorot_uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_90": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[last_dim, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_double_19": {
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "p_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.cdf(tf.to_double(x_hi)) - dist.cdf(tf.to_double(x_lo))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.abs(obs - loc) <= 2 * scale, p_exact, tf.ones_like(p_exact))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_31": {
                "x": {
                    "value": "p_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.cdf(tf.to_double(x_hi)) - dist.cdf(tf.to_double(x_lo))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.abs(obs - loc) <= 2 * scale, p_exact, tf.ones_like(p_exact))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_95": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_97": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_double_26": {
                "x": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs - 1 / 255 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_28": {
                "x": {
                    "value": "obs - loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_30": {
                "x": {
                    "value": "obs - loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_double_32": {
                "x": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_units], initializer='glorot_uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_6": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_17": {
                "x": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs - 1 / 255 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(x_lo >= 0, x_lo, tf.to_float(-1000) * tf.ones_like(x_lo))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_18": {
                "x": {
                    "value": "+1000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_18": {
                "input": {
                    "value": "x_hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs + 1 / 255 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(x_hi <= 1, x_hi, tf.to_float(+1000) * tf.ones_like(x_hi))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_32": {
                "x": {
                    "value": "1 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_dset/gen.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "noise_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(noise_vector)",
                            "Call"
                        ],
                        [
                            "noise_vector.to('cuda')",
                            "Call"
                        ],
                        [
                            "truncated_noise_sample(truncation=args.truncation, batch_size=args.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "class_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "class_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(class_vector)",
                            "Call"
                        ],
                        [
                            "class_vector.to('cuda')",
                            "Call"
                        ],
                        [
                            "class_base_vecs[cls]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}