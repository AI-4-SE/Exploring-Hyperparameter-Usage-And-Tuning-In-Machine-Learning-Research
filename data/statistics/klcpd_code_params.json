{
    "klcpd.py": {
        "sklearn": {},
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_156": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_31": {
                "variable": {
                    "value": "self.rnn_enc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_32": {
                "variable": {
                    "value": "self.rnn_dec_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.RNN_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_63": {
                "variable": {
                    "value": "self.rnn_enc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_64": {
                "variable": {
                    "value": "self.rnn_dec_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.RNN_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_150": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_272": {
                "variable": {
                    "value": "real_L2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X_f - X_f_dec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_274": {
                "variable": {
                    "value": "fake_L2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Y_f - Y_f_dec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG.pkl' % args.save_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_349": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD.pkl' % args.save_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "median_heuristic.py": {
        "sklearn": {
            "euclidean_distances_12": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X[:max_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "squared": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmd_util.py": {
        "sklearn": {
            "euclidean_distances_16": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X[:max_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "squared": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "transpose_47": {
                "variable": {
                    "value": "W_gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_gmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gmm(W, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_gmm, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "W.mul(1.0 / sigma_samples.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "W_gmm.view(batch_size, n_samples, nz)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "variable": {
                    "value": "XW_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_p_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_p_enc",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_gmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gmm(W, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_gmm, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "W.mul(1.0 / sigma_samples.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "W_gmm.view(batch_size, n_samples, nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_49": {
                "variable": {
                    "value": "XW_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_f_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_f_enc",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_gmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gmm(W, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_gmm, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "W.mul(1.0 / sigma_samples.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "W_gmm.view(batch_size, n_samples, nz)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_52": {
                "variable": {
                    "value": "batch_mmd2_rff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(z_XW_p.mean(1) - z_XW_f.mean(1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "sigma_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U * gumbel_lmd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "sigma_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(torch.cos(XW_p), torch.sin(XW_p))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(torch.cos(XW_f), torch.sin(XW_f))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_50": {
                "input": {
                    "value": "XW_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(X_p_enc, W_gmm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_50": {
                "input": {
                    "value": "XW_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(X_p_enc, W_gmm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_51": {
                "input": {
                    "value": "XW_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(X_f_enc, W_gmm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_51": {
                "input": {
                    "value": "XW_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(X_f_enc, W_gmm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util.py": {
        "sklearn": {}
    },
    "data_loader.py": {
        "torch": {
            "zeros_71": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, self.D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "X_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, self.p_wnd_dim, self.var_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "X_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, self.f_wnd_dim, self.var_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "X_p[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[l:m, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "X_f[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[m:u, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "Y[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.Y[m, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "L[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.L[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_93": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(Y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optim.py": {
        "torch": {
            "SGD_10": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_12": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_14": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}