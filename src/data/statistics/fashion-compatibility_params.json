{
    "polyvore_outfits.py": {
        "sklearn": {
            "roc_auc_score_294": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.compatibility_questions), np.int32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "1 - scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_289": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores).squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_289": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_280": {
                "x1": {
                    "value": "embed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeds[item1][condition].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "embeds[question][condition].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "embed2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeds[item2][condition].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "embeds[answer][condition].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_319": {
                "x1": {
                    "value": "embed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeds[item1][condition].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "embeds[question][condition].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "embed2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeds[item2][condition].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "embeds[answer][condition].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Resnet_18.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_64": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TripletImageLoader(args, 'test', meta_data, transform=transforms.Compose([transforms.Scale(112), transforms.CenterCrop(112), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_107": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TripletImageLoader(args, 'train', meta_data, text_dim=text_feature_dim, transform=transforms.Compose([transforms.Scale(112), transforms.CenterCrop(112), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TripletImageLoader(args, 'valid', meta_data, transform=transforms.Compose([transforms.Scale(112), transforms.CenterCrop(112), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, tnet.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "runs/%s/ % args.name + model_best.pth.tar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "directory + filename",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tripletnet.py": {
        "torch": {
            "clamp_18": {
                "variable": {
                    "value": "margin_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_samples - neg_samples + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([acc], np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_8": {
                "*args": {
                    "value": "nn.Linear(f_in, f_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pairwise_distance_98": {
                "variable": {
                    "value": "disti_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "general_z",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_99": {
                "variable": {
                    "value": "disti_n1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "general_x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_100": {
                "variable": {
                    "value": "disti_n2",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "general_x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_115": {
                "variable": {
                    "value": "distd_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "desc_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(y.text)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "desc_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(z.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_116": {
                "variable": {
                    "value": "distd_n1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "desc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(x.text)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "desc_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(y.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_117": {
                "variable": {
                    "value": "distd_n2",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "desc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(x.text)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "desc_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(z.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_134": {
                "variable": {
                    "value": "distd1_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "desc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(x.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_135": {
                "variable": {
                    "value": "distd1_n1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "desc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(x.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_136": {
                "variable": {
                    "value": "distd1_n2",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "general_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "desc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.text_branch(x.text)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "f_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "f_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_9": {
                "num_features": {
                    "value": "f_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "has_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "margin_diff * has_sample",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.metric_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.metric_branch.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, args.dim_embed) / float(args.dim_embed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pairwise_distance_82": {
                "variable": {
                    "value": "dist_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "embedded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "embedded_y",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_83": {
                "variable": {
                    "value": "dist_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "embedded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "embedded_z",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x / norm.expand_as(x)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "type_specific_network.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x.expand_as(masks) * masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x * self.mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding, 1)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_86": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(n_conditions / float(args.num_rand_embed)))",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.masks.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(mask_array)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x.expand_as(masks) * masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x * self.mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding, 1)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "(masked_embedding, embedded_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(n_conditions / float(args.num_rand_embed)))",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.masks.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(mask_array)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_81": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(n_conditions / float(args.num_rand_embed)))",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_142": {
                "input": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x.expand_as(masks) * masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x * self.mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding, 1)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dim_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_118": {
                "input": {
                    "value": "masked_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x.expand_as(masks) * masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "embedded_x * self.mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding, 1)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(masked_embedding)",
                            "Call"
                        ],
                        [
                            "masked_embedding / norm.expand_as(masked_embedding)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}