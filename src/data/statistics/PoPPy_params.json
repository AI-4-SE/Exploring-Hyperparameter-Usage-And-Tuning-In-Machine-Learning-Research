{
    "example/demo_decayKernels.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_20": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((1, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "2 * np.ones((2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 4, 1)",
                            "Call"
                        ],
                        [
                            "np.tile(parameters, (2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(parameters)",
                            "Call"
                        ],
                        [
                            "parameters.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_featureHawkes.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(hawkes_model.lambda_model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_featureHawkes2.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_78": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(hawkes_model.lambda_model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_featureHawkes3.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(hawkes_model.lambda_model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_linearHawkes.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "2 * np.random.rand(2, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(hawkes_model.lambda_model.parameters(), lr=0.01)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_mixHawkes.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mixhawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(mixhawkes_model.lambda_model.parameters(), lr=0.01)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "example/demo_nonlinearHawkes.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "validloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EventSampler(database=database, memorysize=memory_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "kernel_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel_para",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((2, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kernel_para)",
                            "Call"
                        ],
                        [
                            "kernel_para.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hawkes_model.lambda_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(hawkes_model.lambda_model.parameters(), lr=0.01)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "model/DecayKernel.py": {
        "torch": {
            "sqrt_54": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / bandwidth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / bandwidth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.arange(0.0, t_stop, 0.01)",
                            "Call"
                        ],
                        [
                            "np.tile(dt, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dt)",
                            "Call"
                        ],
                        [
                            "dt.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_58": {
                "input": {
                    "value": "-w * dt2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/DecayKernelFamily.py": {
        "torch": {
            "exp_67": {
                "variable": {
                    "value": "gt_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * w * t_start ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_68": {
                "variable": {
                    "value": "gt_stop",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * w * t_stop ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_44": {
                "input": {
                    "value": "-0.5 * w * dt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_100": {
                "input": {
                    "value": "-0.5 * dt ** 2 / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "2 * np.pi * sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_123": {
                "input": {
                    "value": "t_start / torch.sqrt(2 * sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_124": {
                "input": {
                    "value": "t_stop / torch.sqrt(2 * sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_310": {
                "input": {
                    "value": "-0.5 * (dt - landmarks[i]) ** 2 / sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_309": {
                "input": {
                    "value": "2 * np.pi * sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_333": {
                "input": {
                    "value": "(t_start - landmarks[i]) / torch.sqrt(2 * sigma2[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_334": {
                "input": {
                    "value": "(t_stop - landmarks[i]) / torch.sqrt(2 * sigma2[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "input": {
                    "value": "2 * sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "input": {
                    "value": "2 * sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_333": {
                "input": {
                    "value": "2 * sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "input": {
                    "value": "2 * sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/EndogenousImpact.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decay_kernel.values(dts.numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt)",
                            "Call"
                        ],
                        [
                            "gt.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "Gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Gt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decay_kernel.integrations(t_stop.numpy(), t_start.numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gt)",
                            "Call"
                        ],
                        [
                            "Gt.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A_tmp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_81": {
                "input": {
                    "value": "A_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "A_cm.squeeze(1)",
                            "Call"
                        ],
                        [
                            "A_cm.gather(1, history)",
                            "Call"
                        ],
                        [
                            "A_cm.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_120": {
                "input": {
                    "value": "A_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "A_all.squeeze(1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "A_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "A_all.gather(2, history2)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A_all, A_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/EndogenousImpactFamily.py": {
        "torch": {
            "Embedding_389": {
                "variable": {
                    "value": "self.emb_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_390": {
                "variable": {
                    "value": "self.emb_event.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_565": {
                "variable": {
                    "value": "self.emb_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_566": {
                "variable": {
                    "value": "self.emb_event.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_215": {
                "variable": {
                    "value": "emb_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_216": {
                "variable": {
                    "value": "emb_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "emb_u.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type_u, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "emb_v.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type_v, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_272": {
                "variable": {
                    "value": "v_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_273": {
                "variable": {
                    "value": "A_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](current_feat)",
                            "Call"
                        ],
                        [
                            "u_cm.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_310": {
                "variable": {
                    "value": "v_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "variable": {
                    "value": "u_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_314": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.basis_v[m](history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(v_cm, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(v_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_337": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_380": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_381": {
                "variable": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_395": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_428": {
                "variable": {
                    "value": "history_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_440": {
                "variable": {
                    "value": "A_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](current_feat)",
                            "Call"
                        ],
                        [
                            "u_cm.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_470": {
                "variable": {
                    "value": "history_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_486": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_513": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(all_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_513": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_557": {
                "variable": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.dim_embedding, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_571": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_609": {
                "variable": {
                    "value": "history_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_620": {
                "variable": {
                    "value": "A_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "self.basis[m](current_feat)",
                            "Call"
                        ],
                        [
                            "u_cm.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_655": {
                "variable": {
                    "value": "history_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_668": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "history_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ],
                        [
                            "sample_dict['fcjs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(history)",
                            "Call"
                        ],
                        [
                            "torch.transpose(history_feat, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_695": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "torch.transpose(u_all, 0, 1)",
                            "Call"
                        ],
                        [
                            "u_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.basis_u[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "u_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_feats)",
                            "Call"
                        ],
                        [
                            "self.basis[m](all_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(all_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_695": {
                "variable": {
                    "value": "A_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softplus_69": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_111": {
                "input": {
                    "value": "A_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "A_cm.squeeze(1)",
                            "Call"
                        ],
                        [
                            "A_cm.gather(1, history)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "A_cm.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_153": {
                "input": {
                    "value": "A_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "A_all.squeeze(1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "A_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "A_all.gather(2, history2)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A_all, A_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.basis_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.basis_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softplus_235": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_275": {
                "input": {
                    "value": "A_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "A_cm.squeeze(1)",
                            "Call"
                        ],
                        [
                            "A_cm.gather(1, history)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "A_cm.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_316": {
                "input": {
                    "value": "A_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "A_all.squeeze(1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "A_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "A_all.gather(2, history2)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A_all, A_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_385": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softplus_397": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_442": {
                "input": {
                    "value": "A_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "A_cm.squeeze(1)",
                            "Call"
                        ],
                        [
                            "A_cm.gather(1, history)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "A_cm.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_488": {
                "input": {
                    "value": "A_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "A_all.squeeze(1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "A_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "A_all.gather(2, history2)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A_all, A_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_561": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softplus_573": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_622": {
                "input": {
                    "value": "A_cm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](events)",
                            "Call"
                        ],
                        [
                            "A_cm.squeeze(1)",
                            "Call"
                        ],
                        [
                            "A_cm.gather(1, history)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "A_cm.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ],
                        [
                            "torch.bmm(u_cm, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_cm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_670": {
                "input": {
                    "value": "A_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "A_all.squeeze(1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "A_all.repeat(Gt.size(0), 1, 1)",
                            "Call"
                        ],
                        [
                            "A_all.gather(2, history2)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, v_cm)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, history_feat)",
                            "Call"
                        ],
                        [
                            "self.act(A_all)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "A_tmp",
                            "Name"
                        ],
                        [
                            "torch.cat([A_all, A_tmp], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Gt[:, :, m].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_700": {
                "variable": {
                    "value": "A_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A_all, A_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "input": {
                    "value": "A_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis[m](all_types)",
                            "Call"
                        ],
                        [
                            "self.act(torch.transpose(A_tmp, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, torch.t(v_all)).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.act(A_tmp)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, torch.t(all_features)).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.act(A_tmp)",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_all, torch.t(all_features)).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.act(A_tmp)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_337": {
                "input": {
                    "value": "v_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.basis_v[m](all_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_513": {
                "input": {
                    "value": "all_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_dict['FCs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(all_types)",
                            "Call"
                        ],
                        [
                            "sample_dict['FCs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(all_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_695": {
                "input": {
                    "value": "all_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_dict['FCs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(all_types)",
                            "Call"
                        ],
                        [
                            "sample_dict['FCs']",
                            "Subscript"
                        ],
                        [
                            "self.emb_event(all_types)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/ExogenousIntensity.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "mU",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_dict['ti'] - sample_dict['tjs'][:, -1].view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(mu_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_95": {
                "input": {
                    "value": "mu_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.emb(all_types)",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "mu_all.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/ExogenousIntensityFamily.py": {
        "torch": {
            "Embedding_49": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "mU",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dts",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample_dict['ti'] - sample_dict['tjs'][:, -1].view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "sample_dict['ti'] - sample_dict['tjs'][:, -1].view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "sample_dict['ti'] - sample_dict['tjs'][:, -1].view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(mu_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_134": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_138": {
                "variable": {
                    "value": "self.emb_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.emb_seq.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_seq, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "mu_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_dict['fsn']",
                            "Subscript"
                        ],
                        [
                            "self.emb_seq(sample_dict['sn'])",
                            "Call"
                        ],
                        [
                            "features.squeeze(1)",
                            "Call"
                        ],
                        [
                            "sample_dict['fsn']",
                            "Subscript"
                        ],
                        [
                            "self.emb_seq(sample_dict['sn'])",
                            "Call"
                        ],
                        [
                            "features.squeeze(1)",
                            "Call"
                        ],
                        [
                            "sample_dict['fsn']",
                            "Subscript"
                        ],
                        [
                            "self.emb_seq(sample_dict['sn'])",
                            "Call"
                        ],
                        [
                            "features.squeeze(1)",
                            "Call"
                        ],
                        [
                            "sample_dict['fsn']",
                            "Subscript"
                        ],
                        [
                            "self.emb_seq(sample_dict['sn'])",
                            "Call"
                        ],
                        [
                            "features.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(mu_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_244": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_245": {
                "variable": {
                    "value": "self.emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_type - 1, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "variable": {
                    "value": "self.emb_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_249": {
                "variable": {
                    "value": "self.emb_seq.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_seq, self.dim_embedding).uniform_(0.01 / self.dim_embedding, 1 / self.dim_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softplus_252": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_315": {
                "variable": {
                    "value": "mu_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.linear2(features))",
                            "Call"
                        ],
                        [
                            "self.linear3(seq_feat)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear2(features))",
                            "Call"
                        ],
                        [
                            "self.linear3(seq_feat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(event_feat_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_56": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_99": {
                "input": {
                    "value": "mu_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(self.emb(all_types))",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.emb(all_types)",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(features, torch.t(mu_all))",
                            "Call"
                        ],
                        [
                            "self.act(mu_all)",
                            "Call"
                        ],
                        [
                            "torch.matmul(seq_feat, torch.t(event_feat_all))",
                            "Call"
                        ],
                        [
                            "self.softplus(mu_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softplus_145": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_208": {
                "input": {
                    "value": "mu_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(self.emb(all_types))",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.emb(all_types)",
                            "Call"
                        ],
                        [
                            "mu_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(features, torch.t(mu_all))",
                            "Call"
                        ],
                        [
                            "self.act(mu_all)",
                            "Call"
                        ],
                        [
                            "torch.matmul(seq_feat, torch.t(event_feat_all))",
                            "Call"
                        ],
                        [
                            "self.softplus(mu_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_315": {
                "input": {
                    "value": "event_feat_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.emb(all_types)",
                            "Call"
                        ],
                        [
                            "event_feat_all.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(event_feat_all))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/HawkesProcess.py": {
        "torch": {
            "matmul_311": {
                "variable": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_402": {
                "variable": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_212": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "t_319": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "f1_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_327": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(A_t ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_349": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_355": {
                "variable": {
                    "value": "f1_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_s * torch.log(A_s + 1e-05) - A_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(A_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_410": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_416": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_427": {
                "input": {
                    "value": "torch.diag(a[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataloader.dataset.database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_227": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "t_311": {
                "input": {
                    "value": "p_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_342": {
                "input": {
                    "value": "torch.diag(a[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_368": {
                "input": {
                    "value": "torch.diag(a[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_402": {
                "input": {
                    "value": "p_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_423": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost_mu / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_56": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.num_type ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_335": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_364": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_369": {
                "input": {
                    "value": "A_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "trans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_427": {
                "input": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "input": {
                    "value": "mu_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(mu_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_342": {
                "input": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_345": {
                "input": {
                    "value": "A_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "trans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_359": {
                "input": {
                    "value": "A_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "trans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_368": {
                "input": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_369": {
                "input": {
                    "value": "torch.log(A_t + 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_412": {
                "input": {
                    "value": "mu_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(mu_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_421": {
                "input": {
                    "value": "-cost_mu / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_425": {
                "input": {
                    "value": "torch.t(kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "a / a.sum()",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_426": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_321": {
                "input": {
                    "value": "mu_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_327": {
                "input": {
                    "value": "A_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_330": {
                "input": {
                    "value": "A_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "trans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(p_s, torch.t(p_t))",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.matmul(torch.diag(a[:, 0]), kernel), torch.diag(b[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_333": {
                "input": {
                    "value": "-cost / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "torch.t(kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "a / a.sum()",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_345": {
                "input": {
                    "value": "A_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_350": {
                "input": {
                    "value": "fs / (ft + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_356": {
                "input": {
                    "value": "A_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_359": {
                "input": {
                    "value": "torch.log(A_t + 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_362": {
                "input": {
                    "value": "-cost / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "input": {
                    "value": "torch.t(kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "a / a.sum()",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ],
                        [
                            "mu_s.sum().repeat(ns, 1)",
                            "Call"
                        ],
                        [
                            "p_s / torch.matmul(kernel, b)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_367": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "p_t / torch.matmul(torch.t(kernel), a)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_369": {
                "input": {
                    "value": "A_t + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_412": {
                "input": {
                    "value": "mu_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_417": {
                "input": {
                    "value": "fs / (ft + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_425": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_330": {
                "input": {
                    "value": "A_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_337": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_359": {
                "input": {
                    "value": "A_t + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_366": {
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / beta)",
                            "Call"
                        ],
                        [
                            "torch.exp(-cost_mu / beta) * trans",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mu / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_251": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_355": {
                "input": {
                    "value": "A_s + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_251": {
                "input": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lambda_model.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/MixHawkesProcess.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "self.responsibility",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_cluster",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_209": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_279": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataloader.dataset.database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_126": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "self.responsibility",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "log_responsibility + log_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataloader.dataset.database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_220": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_290": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_292": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_522": {
                "variable": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[HawkesProcessIntensity(mu_model, alpha_model, self.activation[m])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "fsn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fsn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "history['sequences'][i]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(fsn)",
                            "Call"
                        ],
                        [
                            "fsn.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "fsn.view(1, -1).repeat(ci.size(0), 1)",
                            "Call"
                        ],
                        [
                            "fsn.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "transpose_371": {
                "variable": {
                    "value": "fcjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fcjs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "FCs[cjs, :]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(fcjs, 1, 2)",
                            "Call"
                        ],
                        [
                            "fcjs.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_508": {
                "obj": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_527": {
                "variable": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "tjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times",
                    "type": "Name",
                    "possible_values": [
                        [
                            "history['sequences'][i]['times']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "cjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "events",
                    "type": "Name",
                    "possible_values": [
                        [
                            "history['sequences'][i]['events']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "tjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times[-memory_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "cjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "events[-memory_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_510": {
                "obj": {
                    "value": "self.lambda_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_513": {
                "obj": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_524": {
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "sample_dict[cjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['cjs'], ci]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "sample_dict[tjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['tjs'], ti]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "sample_dict[cjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['cjs'][:, -memory_size + 1:], ci]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "sample_dict[tjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['tjs'][:, -memory_size + 1:], ti]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_426": {
                "variable": {
                    "value": "sample_dict[fcjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_dict['fcjs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_166": {
                "input": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lambda_model.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/OtherLayers.py": {
        "torch": {
            "MSELoss_81": {
                "variable": {
                    "value": "self.ls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "mat_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Lambda_t.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "Lambda_t.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "self.entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "f1_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "As ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(At ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "f1_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "As * torch.log(As + 1e-05) - As",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "p_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(p_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(At)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_177": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_185": {
                "variable": {
                    "value": "f2_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "input": {
                    "value": "As",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "Trans_st",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "input": {
                    "value": "As",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "Trans_st",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_146": {
                "input": {
                    "value": "torch.log(At + 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "input": {
                    "value": "mu_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(mu_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_136": {
                "input": {
                    "value": "At ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_138": {
                "input": {
                    "value": "At",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_144": {
                "input": {
                    "value": "At",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_146": {
                "input": {
                    "value": "At + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_179": {
                "input": {
                    "value": "mu_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_186": {
                "input": {
                    "value": "f1_st / (f2_st + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "As + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/PointProcess.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_143": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_209": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataloader.dataset.database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_84": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataloader.dataset.database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_154": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_219": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_454": {
                "variable": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_283": {
                "variable": {
                    "value": "fsn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fsn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "history['sequences'][i]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(fsn)",
                            "Call"
                        ],
                        [
                            "fsn.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "fsn.view(1, -1).repeat(ci.size(0), 1)",
                            "Call"
                        ],
                        [
                            "fsn.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "transpose_296": {
                "variable": {
                    "value": "fcjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fcjs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "FCs[cjs, :]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(fcjs, 1, 2)",
                            "Call"
                        ],
                        [
                            "fcjs.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_436": {
                "obj": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_459": {
                "variable": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "tjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times",
                    "type": "Name",
                    "possible_values": [
                        [
                            "history['sequences'][i]['times']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "cjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "events",
                    "type": "Name",
                    "possible_values": [
                        [
                            "history['sequences'][i]['events']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "tjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times[-memory_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "cjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "events[-memory_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_439": {
                "obj": {
                    "value": "self.lambda_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_443": {
                "obj": {
                    "value": "self.lambda_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_456": {
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "sample_dict[cjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['cjs'], ci]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "sample_dict[tjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['tjs'], ti]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "sample_dict[cjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['cjs'][:, -memory_size + 1:], ci]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "sample_dict[tjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_dict['tjs'][:, -memory_size + 1:], ti]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_355": {
                "variable": {
                    "value": "sample_dict[fcjs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_dict['fcjs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_108": {
                "input": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lambda_model.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/DataOperation.py": {
        "torch": {
            "device_683": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_424": {
                "variable": {
                    "value": "current_time",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_426": {
                "variable": {
                    "value": "history_time",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.time_cell[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_430": {
                "variable": {
                    "value": "current_event",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_433": {
                "variable": {
                    "value": "history_event",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.event_cell[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_437": {
                "variable": {
                    "value": "current_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_553": {
                "variable": {
                    "value": "current_time",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_555": {
                "variable": {
                    "value": "history_time",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.time_cell[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_559": {
                "variable": {
                    "value": "current_event",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_562": {
                "variable": {
                    "value": "history_event",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.event_cell[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_566": {
                "variable": {
                    "value": "current_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_690": {
                "variable": {
                    "value": "all_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "database['event_features']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_692": {
                "variable": {
                    "value": "FCs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FCs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.t(FCs)",
                            "Call"
                        ],
                        [
                            "FCs.to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_701": {
                "variable": {
                    "value": "fsn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "database['sequences'][seq_id]['seq_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_447": {
                "variable": {
                    "value": "seq_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_576": {
                "variable": {
                    "value": "seq_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_455": {
                "variable": {
                    "value": "current_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "current_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_459": {
                "variable": {
                    "value": "history_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_466": {
                "variable": {
                    "value": "seq_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_470": {
                "variable": {
                    "value": "current_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "current_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_474": {
                "variable": {
                    "value": "history_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_584": {
                "variable": {
                    "value": "current_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "current_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_588": {
                "variable": {
                    "value": "history_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_595": {
                "variable": {
                    "value": "seq_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['sequences'][current_seq_numpy]['seq_feature']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seq_feature)",
                            "Call"
                        ],
                        [
                            "seq_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_599": {
                "variable": {
                    "value": "current_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "current_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, current_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(current_event_feature)",
                            "Call"
                        ],
                        [
                            "current_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_603": {
                "variable": {
                    "value": "history_event_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "history_event_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "self.database['event_features'][:, history_event_numpy]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(history_event_feature)",
                            "Call"
                        ],
                        [
                            "history_event_feature.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}