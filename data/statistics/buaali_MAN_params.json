{
    "man/algorithms/algorithm.py": {
        "torch": {
            "load_126": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val['pretrained'] if 'pretrained' in val else None",
                            "IfExp"
                        ],
                        [
                            "all_possible_files[-1]",
                            "Subscript"
                        ],
                        [
                            "pretrained_path",
                            "Method Argument"
                        ],
                        [
                            "pretrained_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_214": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_306": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_net_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "self._get_optim_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "pathlib.Path(self._get_net_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ],
                        [
                            "pathlib.Path(self._get_optim_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_313": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_net_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "self._get_optim_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "pathlib.Path(self._get_net_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ],
                        [
                            "pathlib.Path(self._get_optim_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim_opts['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "optim_opts['beta']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "optim_opts",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim_opts['weight_decay'] if 'weight_decay' in optim_opts else 0.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "save_293": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'network': self.networks[net_key].state_dict(), 'metric': metric}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'optimizer': self.optimizers[net_key].state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_net_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "self._get_optim_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "pathlib.Path(self._get_net_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ],
                        [
                            "pathlib.Path(self._get_optim_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_299": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'network': self.networks[net_key].state_dict(), 'metric': metric}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'optimizer': self.optimizers[net_key].state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_net_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "self._get_optim_checkpoint_filename(net_key, epoch) + suffix",
                            "BinOp"
                        ],
                        [
                            "pathlib.Path(self._get_net_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ],
                        [
                            "pathlib.Path(self._get_optim_checkpoint_filename(net_key, epoch) + suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim_opts['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "optim_opts['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "optim_opts",
                            "Method Argument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "optim_opts['nesterov'] if 'nesterov' in optim_opts else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_opts['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "optim_opts",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "man/algorithms/classification/utils.py": {
        "torch": {
            "cross_entropy_45": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(features)",
                            "Call"
                        ],
                        [
                            "classifier(features_test=features, base_ids=base_ids)",
                            "Call"
                        ],
                        [
                            "scores.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_115": {
                "mode": {
                    "value": "train_feature_extractor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train and feature_extractor_optimizer is not None",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_124": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/fewshot/fewshot.py": {
        "torch": {}
    },
    "man/algorithms/fewshot/imagenet_lowshot.py": {
        "torch": {
            "exp_21": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(scores)",
                            "Call"
                        ],
                        [
                            "classifier.apply_classification_weights(features, clsWeights)",
                            "Call"
                        ],
                        [
                            "scores.view(num_test_examples, -1)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "scores_novel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, novel_inds]",
                            "Subscript"
                        ],
                        [
                            "scores_novel * (prior_m / (tol + torch.sum(scores_novel, dim=1, keepdim=True).expand_as(scores_novel)))",
                            "BinOp"
                        ],
                        [
                            "scores.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "scores_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, base_inds]",
                            "Subscript"
                        ],
                        [
                            "scores_base * ((1.0 - prior_m) / (tol + torch.sum(scores_base, dim=1, keepdim=True).expand_as(scores_base)))",
                            "BinOp"
                        ],
                        [
                            "scores.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/fewshot/utils.py": {
        "torch": {
            "cross_entropy_36": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(features_test=features_test, features_train=features_train, labels_train=labels_train_1hot, base_ids=base_ids)",
                            "Call"
                        ],
                        [
                            "classifier(features_test=features_test, features_train=features_train, labels_train=labels_train_1hot)",
                            "Call"
                        ],
                        [
                            "classification_scores.view(classification_scores.size(0) * classification_scores.size(1), -1)",
                            "Call"
                        ],
                        [
                            "few_shot_feature_classification(classifier, features_test, features_train, labels_train_1hot, labels_test, base_ids)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_test.view(-1)",
                            "Call"
                        ],
                        [
                            "labels_test.view(-1)",
                            "Call"
                        ],
                        [
                            "labels_test",
                            "Method Argument"
                        ],
                        [
                            "labels_test",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_54": {
                "variable": {
                    "value": "base_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels < num_base",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_55": {
                "variable": {
                    "value": "novel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= num_base",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_train, images_test]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_183": {
                "mode": {
                    "value": "train_feature_extractor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train and feature_extractor_optimizer is not None",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_194": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/mix_selfsupervision/cluster_utils.py": {
        "torch": {
            "cross_entropy_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.repeat(4)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_270": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_train, images_test]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_109": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_282": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/mix_selfsupervision/clustering.py": {
        "torch": {
            "device_count_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/mix_selfsupervision/fc_cluster.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden_1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden_2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden_2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_33": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "man/algorithms/mix_selfsupervision/fewshot_selfsupervision_rot_loc_jig_clu_att_fc.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((N * features_batch.shape[0], features_batch.shape[1], features_batch.shape[2], features_batch.shape[3]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "self.compute_features(data_loader, epoch, feature_extractor=self.networks['feature_extractor'], N=len(data_loader))",
                            "Call"
                        ],
                        [
                            "features.reshape(features.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "self.gcn(features)",
                            "Call"
                        ],
                        [
                            "F.normalize(features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_130": {
                "variable": {
                    "value": "self.images_unlabeled_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_123": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((N * features_batch.shape[0], features_batch.shape[1], features_batch.shape[2], features_batch.shape[3]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "self.compute_features(data_loader, epoch, feature_extractor=self.networks['feature_extractor'], N=len(data_loader))",
                            "Call"
                        ],
                        [
                            "features.reshape(features.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "self.gcn(features)",
                            "Call"
                        ],
                        [
                            "F.normalize(features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/mix_selfsupervision/gcn.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(n, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_25": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_34": {
                "variable": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_36": {
                "variable": {
                    "value": "AXw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.A, input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_12": {}
        }
    },
    "man/algorithms/mix_selfsupervision/rot_loc_jig_clu_utils_attention.py": {
        "torch": {
            "arange_26": {
                "variable": {
                    "value": "labels_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "labels_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 4, size=batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, images_unlabeled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "labels_rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels_rotation, labels_unlabeled_rotation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "location_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "_NUM_LOCATION_CLASSES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_NUM_OF_PATCHES - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_176": {
                "variable": {
                    "value": "patch_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patch_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patch_pairs, dim=1)",
                            "Call"
                        ],
                        [
                            "patch_pairs.view(batch_size * len(locations), 2 * channels)",
                            "Call"
                        ],
                        [
                            "patch_pairs.view(batch_size * len(locations), 2 * channels, height, width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_190": {
                "variable": {
                    "value": "jig_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "_NUM_PUZZLE_CLASSES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "patch_puzzle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patch_puzzle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patch_puzzle, dim=1)",
                            "Call"
                        ],
                        [
                            "patch_puzzle.view(batch_size * puzzle.shape[0], puzzle.shape[1] * channels)",
                            "Call"
                        ],
                        [
                            "patch_puzzle.view(batch_size * puzzle.shape[0], puzzle.shape[1] * channels, height, width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_273": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_classifier(features, labels_rotation)",
                            "Call"
                        ],
                        [
                            "location_classifier(features_pairs, location_labels)",
                            "Call"
                        ],
                        [
                            "jig_classifier(features_puzzle, jig_labels)",
                            "Call"
                        ],
                        [
                            "cluster_classifier(features, labels)",
                            "Call"
                        ],
                        [
                            "patch_classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.repeat(4)",
                            "Call"
                        ],
                        [
                            "preprocess_input_data(images, labels, None, random_rotation, rotation_invariant_classifier)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_39": {
                "variable": {
                    "value": "images_4rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images_4rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(images_4rot, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(images_4rot, dim=stack_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "images_4rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images_4rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(images_4rot, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(images_4rot, dim=stack_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "stack_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_519": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_train, images_test]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[patches_train, patches_test]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, images_unlabeled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_351": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_536": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[patches_loc, patches_central]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "man/algorithms/utils/save_features.py": {
        "torch": {
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/classifier.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['bias'] if 'bias' in opt else False",
                            "IfExp"
                        ],
                        [
                            "opt['bias'] if 'bias' in opt else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "fc_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "mlp_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "mlp_channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/classifier_att.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_17": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['bias'] if 'bias' in opt else False",
                            "IfExp"
                        ],
                        [
                            "opt['bias'] if 'bias' in opt else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "fc_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "input": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "mlp_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "num_features": {
                    "value": "mlp_channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/convnet_plus_classifier.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolutional_net",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/convnet_plus_classifier_att.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolutional_net",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "input": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/convnet_plus_classifier_bak.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolutional_net",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "man/architectures/classifiers/cosine_classifier_with_weight_generator.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.num_classes, self.num_features).normal_(0.0, np.sqrt(2.0 / self.num_features))",
                            "Call"
                        ],
                        [
                            "self.weight_base[base_ids.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "weight_base.view(meta_batch_size, num_base, -1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(scale_cls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learn_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_99": {
                "variable": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutils.preprocess_5D_features(features_train, self.global_pooling)",
                            "Call"
                        ],
                        [
                            "F.normalize(features_train, p=2, dim=features_train.dim() - 1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "features_train.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "weight_both",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_base, weight_novel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "classification_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[classification_scores_base, classification_scores_novel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/cosine_classifier_with_weight_generator_att.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.weight_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.num_classes, self.num_features).normal_(0.0, np.sqrt(2.0 / self.num_features))",
                            "Call"
                        ],
                        [
                            "self.weight_base[base_ids.view(-1)]",
                            "Subscript"
                        ],
                        [
                            "weight_base.view(meta_batch_size, num_base, -1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(scale_cls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learn_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_101": {
                "variable": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutils.preprocess_5D_features(features_train, self.global_pooling)",
                            "Call"
                        ],
                        [
                            "F.normalize(features_train, p=2, dim=features_train.dim() - 1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "features_train.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "weight_both",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_base, weight_novel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "classification_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[classification_scores_base, classification_scores_novel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_243": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classsification_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_classification_weights(features_test, classsification_weights)",
                            "Call"
                        ],
                        [
                            "classsification_scores.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_244": {
                "input": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/few_shot_classification_with_prototypes.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(scale_cls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_27": {
                "variable": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutils.preprocess_5D_features(features_train, self.global_pooling)",
                            "Call"
                        ],
                        [
                            "F.normalize(features_train, p=2, dim=2, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "features_train",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/classifiers/prototypical_network_head.py": {
        "torch": {
            "bmm_20": {
                "variable": {
                    "value": "AB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "B.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(scale_cls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learn_scale'] if 'learn_scale' in opt else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "bmm_88": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_train_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_train.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutils.preprocess_5D_features(features_train, self.global_pooling)",
                            "Call"
                        ],
                        [
                            "features_train",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "man/architectures/classifiers/utils.py": {
        "torch": {
            "bmm_74": {
                "variable": {
                    "value": "weight_novel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_train_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_train.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_classes, num_channels).normal_(0.0, np.sqrt(2.0 / num_channels))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(1).fill_(scale)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "learn_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_classes).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/convnet.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/convnet_pre_act.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/dumb_feat.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['dropout'] if 'dropout' in opt else 0.0",
                            "IfExp"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/my-resnet12.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/resnet.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/resnet12.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/resnet_block.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.resnet_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/utils.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self._feature_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "feature_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_blocks",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "man/architectures/feature_extractors/wide_resnet.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.convResidual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "block1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "block2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "block3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.convShortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.convShortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "block4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size1",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if kernel_size1 == 3 else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size2",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if kernel_size2 == 3 else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "num_features": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "nChannels[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "nChannels[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['drop_rate'] if 'drop_rate' in opt else 0.0",
                            "IfExp"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "drop_rate",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "nChannels[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/feature_extractors/wrn_block.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "num_channels_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "man/architectures/tools.py": {
        "torch": {
            "mm_25": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x_in, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_in, p=2, dim=2, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x_in, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_in, p=2, dim=2, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x_in, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_in, p=2, dim=2, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_20": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x_in, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_in, p=2, dim=2, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_23": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_pool2d_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "man/dataloaders/dataloader_fewshot.py": {
        "torch": {
            "stack_257": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[img_idx][0] for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_342": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset_patches[img_idx][0] for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_506": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset_train_novel[img_idx][0] for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "man/datasets/mini_imagenet.py": {
        "torch": {}
    },
    "man/utils.py": {
        "torch": {
            "stack_343": {
                "tensors": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_220": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j * grid_width",
                            "BinOp"
                        ],
                        [
                            "x + patch_jitter // 2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(height_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_221": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j * grid_width",
                            "BinOp"
                        ],
                        [
                            "x + patch_jitter // 2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(width_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j * grid_width",
                            "BinOp"
                        ],
                        [
                            "x + patch_jitter // 2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "height_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.dim() - 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim1": {
                    "value": "width_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height_dim + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}