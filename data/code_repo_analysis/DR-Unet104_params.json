{
    "Dr_Unet104_model.py": {
        "tensorflow": {
            "Input_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(image_width, image_height, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_201": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "DR_Unet104",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_8": {
                "filters": {
                    "value": "F3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_11": {
                "filters": {
                    "value": "F1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_15": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_16": {
                "filters": {
                    "value": "F2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_19": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_20": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "F3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_33": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_34": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "F1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_40": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_41": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_42": {
                "filters": {
                    "value": "F2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_46": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_47": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_48": {
                "filters": {
                    "value": "F3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_63": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "filters": {
                    "value": "F1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_68": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_69": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_70": {
                "filters": {
                    "value": "F2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_74": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_75": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_76": {
                "filters": {
                    "value": "F3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_80": {
                "filters": {
                    "value": "F3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_92": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_96": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_97": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_101": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_102": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_108": {
                "filters": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_133": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_141": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "ZeroPadding2D_142": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_167": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_175": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Cropping2D_179": {
                "cropping": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_186": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_191": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "BatchNormalization_196": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_197": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_200": {
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "read_file_26": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_path",
                            "Method Argument"
                        ],
                        [
                            "image_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_28": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(img, channels=4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "img_to_array_67": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_data(f'{image_dir}/{image_list[i]}')",
                            "Call"
                        ],
                        [
                            "img_to_array(test)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_28": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_29": {
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "list_physical_devices_11": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_112": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MirroredStrategy_121": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorBoard_132": {
                "variable": {
                    "value": "tb",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logs_dr_unet104",
                    "type": "str",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_133": {
                "variable": {
                    "value": "mc",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "filepath": {
                    "value": "weights_brats_training_dr_unet104.h5",
                    "type": "str",
                    "possible_values": []
                },
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_48": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_path",
                            "Method Argument"
                        ],
                        [
                            "image_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_115": {
                "variable": {
                    "value": "pred_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.one_hot(tf.cast(pred_tensor, tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_116": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(pred_tensor, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(img, channels=4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_53": {
                "variable": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "case_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "[(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "case_58": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "[(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "decode_png_62": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.resize(images=img, size=[img_height, img_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "case_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "[(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "case_68": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "[(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(img, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "map_and_batch_90": {
                "map_func": {
                    "value": "load_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_data",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "num_parallel_calls": {
                    "value": "tf.data.experimental.AUTOTUNE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_119": {
                "a": {
                    "value": "(2.0 * intersection + smooth) / (union + smooth)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_77": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_79": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "pred_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y_pred, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_118": {
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.one_hot(tf.cast(pred_tensor, tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_png_51": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_52": {
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_63": {
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_56": {
                "x": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[1], minval=0, maxval=2, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_59": {
                "x": {
                    "value": "flip2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[1], minval=0, maxval=2, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_66": {
                "x": {
                    "value": "flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[1], minval=0, maxval=2, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_69": {
                "x": {
                    "value": "flip2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[1], minval=0, maxval=2, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_left_right_56": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_up_down_59": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_66": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_up_down_69": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.decode_png(img, channels=4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=img, size=[img_height, img_width]) / 255",
                            "BinOp"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize(images=img, size=[img_height, img_width]), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip, 0), lambda : tf.image.flip_left_right(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.case([(tf.greater(flip2, 0), lambda : tf.image.flip_up_down(img))], default=lambda : img)",
                            "Call"
                        ],
                        [
                            "K.squeeze(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.one_hot(tf.cast(img, tf.int32), num_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}