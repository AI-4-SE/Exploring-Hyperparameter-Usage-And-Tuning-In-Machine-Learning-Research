{
    "dataloaders/__init__.py": {
        "torch": {
            "DataLoader_11": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_12": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_13": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_24": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='train')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='val')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cityscapes.CityscapesSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation(args, split='test')",
                            "Call"
                        ],
                        [
                            "citylostfound.CitylostfoundSegmentation_rgb(args, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/custom_transforms.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "img.resize((width, height), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.rotate(rotate_degree, Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.filter(ImageFilter.GaussianBlur(radius=random.random()))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(img, border=(0, 0, padw, padh), fill=0)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize(self.size, Image.BILINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "np.array(depth).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "depth / std_depth",
                            "BinOp"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "np.array(depth).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(depth).float()",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "depth.resize((width, height), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.rotate(rotate_degree, Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(depth, border=(0, 0, padw, padh), fill=0)",
                            "Call"
                        ],
                        [
                            "depth.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "depth.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['depth']",
                            "Subscript"
                        ],
                        [
                            "depth.resize(self.size, Image.BILINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "mask.resize((width, height), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.rotate(rotate_degree, Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(mask, border=(0, 0, padw, padh), fill=self.fill)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize(self.size, Image.NEAREST)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/custom_transforms_rgb.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "sample",
                            "Name"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "img.resize((width, height), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample",
                            "Name"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.rotate(rotate_degree, Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.filter(ImageFilter.GaussianBlur(radius=random.random()))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(img, border=(0, 0, padw, padh), fill=0)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize(self.size, Image.BILINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "mask.resize((width, height), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.rotate(rotate_degree, Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(mask, border=(0, 0, padw, padh), fill=self.fill)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize((ow, oh), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "mask.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['label']",
                            "Subscript"
                        ],
                        [
                            "mask.resize(self.size, Image.NEAREST)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "sample",
                            "Name"
                        ],
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.crop((left, top, right, bottom))",
                            "Call"
                        ],
                        [
                            "img.resize((width, height), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample",
                            "Name"
                        ],
                        [
                            "np.array(img).astype(np.float32).transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.rotate(rotate_degree, Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.filter(ImageFilter.GaussianBlur(radius=random.random()))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(img, border=(0, 0, padw, padh), fill=0)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize((ow, oh), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "img.crop((x1, y1, x1 + self.crop_size, y1 + self.crop_size))",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img.resize(self.size, Image.BILINEAR)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/datasets/citylostfound.py": {
        "torch": {
            "DataLoader_253": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CitylostfoundSegmentation(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/datasets/cityscapes.py": {
        "torch": {
            "DataLoader_120": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CityscapesSegmentation(args, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/utils.py": {
        "torch": {
            "from_numpy_10": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "self.new_state_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.weight_path, 'model_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(image, depth)",
                            "Call"
                        ],
                        [
                            "self.model(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/replicate.py": {
        "torch": {}
    },
    "models/resnet/resnet_single_scale_single_attention.py": {
        "torch": {
            "transpose_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "up(x, skip)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_146": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv1_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_152": {
                "variable": {
                    "value": "self.maxpool_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(reversed(upsamples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_241": {
                "variable": {
                    "value": "rgb_after_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rgb_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention(rgb_skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_242": {
                "variable": {
                    "value": "depth_after_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "depth_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention(depth_skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_247": {
                "variable": {
                    "value": "pool_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "conv_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_249": {
                "variable": {
                    "value": "activate",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_303": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "up(x, skip)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1(x)",
                            "Call"
                        ],
                        [
                            "self.attention_2(x)",
                            "Call"
                        ],
                        [
                            "self.attention_3(x)",
                            "Call"
                        ],
                        [
                            "self.attention_4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_304": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_d(depth)",
                            "Call"
                        ],
                        [
                            "self.bn1_d(y)",
                            "Call"
                        ],
                        [
                            "self.relu_d(y)",
                            "Call"
                        ],
                        [
                            "self.maxpool_d(y)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_2_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_3_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_4_d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_312": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "up(x, skip)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1(x)",
                            "Call"
                        ],
                        [
                            "self.attention_2(x)",
                            "Call"
                        ],
                        [
                            "self.attention_3(x)",
                            "Call"
                        ],
                        [
                            "self.attention_4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_d(depth)",
                            "Call"
                        ],
                        [
                            "self.bn1_d(y)",
                            "Call"
                        ],
                        [
                            "self.relu_d(y)",
                            "Call"
                        ],
                        [
                            "self.maxpool_d(y)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_2_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_3_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_4_d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_321": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "up(x, skip)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1(x)",
                            "Call"
                        ],
                        [
                            "self.attention_2(x)",
                            "Call"
                        ],
                        [
                            "self.attention_3(x)",
                            "Call"
                        ],
                        [
                            "self.attention_4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_322": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_d(depth)",
                            "Call"
                        ],
                        [
                            "self.bn1_d(y)",
                            "Call"
                        ],
                        [
                            "self.relu_d(y)",
                            "Call"
                        ],
                        [
                            "self.maxpool_d(y)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_2_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_3_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_4_d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_330": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(rgb)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x_attention)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "up(x, skip)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1(x)",
                            "Call"
                        ],
                        [
                            "self.attention_2(x)",
                            "Call"
                        ],
                        [
                            "self.attention_3(x)",
                            "Call"
                        ],
                        [
                            "self.attention_4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_331": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_d(depth)",
                            "Call"
                        ],
                        [
                            "self.bn1_d(y)",
                            "Call"
                        ],
                        [
                            "self.relu_d(y)",
                            "Call"
                        ],
                        [
                            "self.maxpool_d(y)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ],
                        [
                            "torch.mul(y, y_attention)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_1_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_2_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_3_d(y)",
                            "Call"
                        ],
                        [
                            "self.attention_4_d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "pool_attention",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_364": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/rfnet.py": {
        "torch": {}
    },
    "models/util.py": {
        "torch": {
            "interpolate_5": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ],
                        [
                            "self.spp[0].forward(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(levels, 1)",
                            "Call"
                        ],
                        [
                            "self.spp[-1].forward(x)",
                            "Call"
                        ],
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.spp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "batch_norm is True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "num_maps_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_maps_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_77": {
                "variable": {
                    "value": "x_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ],
                        [
                            "self.spp[0].forward(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(levels, 1)",
                            "Call"
                        ],
                        [
                            "self.spp[-1].forward(x)",
                            "Call"
                        ],
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.grids[i - 1], max(1, round(ar * self.grids[i - 1])))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_79": {
                "variable": {
                    "value": "x_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ],
                        [
                            "self.spp[0].forward(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(levels, 1)",
                            "Call"
                        ],
                        [
                            "self.spp[-1].forward(x)",
                            "Call"
                        ],
                        [
                            "upsample(x, skip_size)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.blend_conv.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.grids[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "num_maps_in",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "as_tensor_30": {
                "variable": {
                    "value": "self.mean_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.12176",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_31": {
                "variable": {
                    "value": "self.std_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.09752",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.random_init_params()}, {'params': model.fine_tune_params(), 'lr': args.lr, 'weight_decay': args.weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_296": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/iouEval.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "self.tp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nClasses if self.ignoreIndex == -1 else self.nClasses - 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "self.fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nClasses if self.ignoreIndex == -1 else self.nClasses - 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "self.fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nClasses if self.ignoreIndex == -1 else self.nClasses - 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "self.cdp_obstacle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "self.tp_obstacle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "self.idp_obstacle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "self.tp_nonobstacle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "tpmult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_onehot * y_onehot",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "fpmult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_onehot * (1 - y_onehot - ignores)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "fnmult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x_onehot) * y_onehot",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "x_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "y.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "rand_55": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_56": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_23": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_43": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-criterion(logit, target.long())",
                            "UnaryOp"
                        ],
                        [
                            "logpt * alpha",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/saver.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/summaries.py": {
        "torch": {
            "SummaryWriter_13": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.directory)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "input": {
                    "value": "target[:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "input": {
                    "value": "target[:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_21": {
                "input": {
                    "value": "output[:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "output[:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}