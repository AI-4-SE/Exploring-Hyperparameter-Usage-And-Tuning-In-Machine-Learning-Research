{
    "examples/vae_example/chemistry_vae.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_181": {
                "variable": {
                    "value": "fancy_latent_point",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae_encoder.latent_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_267": {
                "variable": {
                    "value": "optimizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "optimizer_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae_decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_368": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_380": {
                "variable": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(x_hat_indices - x_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(encoding_list, largest_molecule_len, encoding_alphabet)",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "data[torch.randperm(data.size()[0])]",
                            "Subscript"
                        ],
                        [
                            "multiple_selfies_to_hot(encoding_list, largest_molecule_len, encoding_alphabet)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/E'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/D'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.encode_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dimension, layer_1d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.encode_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.encode_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_101": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_102": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * log_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_134": {
                "variable": {
                    "value": "self.decode_RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "gru_neurons_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_neurons_num",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "gru_stack_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_stack_size",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.decode_FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(gru_neurons_num, out_dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_190": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "variable": {
                    "value": "out_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_valid[start_idx:stop_idx]",
                            "Subscript"
                        ],
                        [
                            "data_train[start_idx:stop_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_227": {
                "n": {
                    "value": "data_valid.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "out_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_valid[start_idx:stop_idx]",
                            "Subscript"
                        ],
                        [
                            "data_train[start_idx:stop_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_370": {
                "input": {
                    "value": "1.0 + log_vars - mus.pow(2) - log_vars.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_379": {
                "input": {
                    "value": "x_hat_indices - x_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_381": {
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(x_hat_indices - x_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_494": {
                "n": {
                    "value": "data.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "in_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_1d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "layer_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_1d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "layer_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "gru_neurons_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_neurons_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_276": {
                "n": {
                    "value": "data_train.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__312": {
                "parameters": {
                    "value": "vae_decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "original_code_from_paper/gan/GAN_selfies/GAN.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(A, len(max(A, key=len)), alphabets, 0)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], one_hot_len_comb))",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(A, len(max(A, key=len)), alphabets, 0)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], one_hot_len_comb))",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_200": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_203": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_209": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** random.uniform(-7, -4)",
                            "BinOp"
                        ],
                        [
                            "lr_disc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_genr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** random.uniform(-7, -4)",
                            "BinOp"
                        ],
                        [
                            "lr_genr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_68": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GeneratorNet(prior_lv_size=prior_lv_size, layer_interm_size=layer_interm_size_G)",
                            "Call"
                        ],
                        [
                            "generator.eval()",
                            "Call"
                        ],
                        [
                            "generator.train()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/G'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DiscriminatorNet(drop_rate=discr_dropout, layer_2_size=discr_layer_2_size)",
                            "Call"
                        ],
                        [
                            "train_discriminator(d_optimizer, real_data, fake_data, discriminator, criterion)",
                            "Call"
                        ],
                        [
                            "train_generator(g_optimizer, fake_data, criterion, discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/D'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.hidden0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_features, layer_2_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(layer_2_size, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.hidden0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prior_lv_size, layer_interm_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(layer_interm_size, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "G_start_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_start_layer_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_161": {
                "*size": {
                    "value": "prediction_real.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "prediction_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "prediction.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_2_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "layer_2_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                }
            },
            "Sigmoid_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "prior_lv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(50, 300)",
                            "Call"
                        ],
                        [
                            "prior_lv_size",
                            "Method Argument"
                        ],
                        [
                            "prior_lv_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_interm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_interm_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_133": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "layer_interm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_interm_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                }
            },
            "Sigmoid_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "original_code_from_paper/gan/GAN_smiles/GAN.py": {
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(A, len(max(A, key=len)), alphabets, 0)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], one_hot_len_comb))",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(A, len(max(A, key=len)), alphabets, 0)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], one_hot_len_comb))",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_193": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_203": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** random.uniform(-7, -4)",
                            "BinOp"
                        ],
                        [
                            "lr_disc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_genr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** random.uniform(-7, -4)",
                            "BinOp"
                        ],
                        [
                            "lr_genr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GeneratorNet(prior_lv_size=prior_lv_size, layer_interm_size=layer_interm_size_G)",
                            "Call"
                        ],
                        [
                            "generator.eval()",
                            "Call"
                        ],
                        [
                            "generator.train()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/G'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DiscriminatorNet(drop_rate=discr_dropout, layer_2_size=discr_layer_2_size)",
                            "Call"
                        ],
                        [
                            "train_discriminator(d_optimizer, real_data, fake_data, discriminator, criterion)",
                            "Call"
                        ],
                        [
                            "train_generator(g_optimizer, fake_data, criterion, discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ],
                        [
                            "discriminator",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/D'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.hidden0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_features, layer_2_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(layer_2_size, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.hidden0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prior_lv_size, layer_interm_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(layer_interm_size, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_143": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "G_start_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_start_layer_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_153": {
                "*size": {
                    "value": "prediction_real.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "prediction_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_178": {
                "*size": {
                    "value": "prediction.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_2_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_101": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "layer_2_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                }
            },
            "Sigmoid_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "prior_lv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(50, 300)",
                            "Call"
                        ],
                        [
                            "prior_lv_size",
                            "Method Argument"
                        ],
                        [
                            "prior_lv_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_interm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_interm_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_126": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "layer_interm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_interm_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "one_hot_len_comb",
                            "variable"
                        ]
                    ]
                }
            },
            "Sigmoid_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "original_code_from_paper/vae/vae_rnn.py": {
        "torch": {
            "normal_176": {
                "variable": {
                    "value": "fancy_latent_point",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(latent_dimension)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(latent_dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_333": {
                "variable": {
                    "value": "optimizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_encode.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "optimizer_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_decode.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0:idx_traintest]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(data_train, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "data_train.to(device)",
                            "Call"
                        ],
                        [
                            "data_train[x]",
                            "Subscript"
                        ],
                        [
                            "data_train",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/E'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/D'.format(out_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.encode_4d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(len_max_molec1Hot, layer_1d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.encode_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.encode_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_99": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_100": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * log_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_132": {
                "variable": {
                    "value": "self.decode_RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "gru_neurons_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_neurons_num",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "gru_stack_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_stack_size",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.decode_FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(gru_neurons_num, len_alphabet)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_189": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "decoded_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "inp_smile_hot.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inp_smile_hot.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_309": {
                "variable": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ],
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_506": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_509": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiple_smile_to_hot(smiles_list, largest_smile_len, encoding_alphabet, type_of_encoding)",
                            "Call"
                        ],
                        [
                            "torch.tensor(data, dtype=torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "data[x]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "*size": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_176": {
                "*size": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ],
                        [
                            "latent_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_365": {
                "variable": {
                    "value": "decoded_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "inp_smile_hot.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inp_smile_hot.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_376": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "len_max_molec1Hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_max_molec * len_alphabet",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_1d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "layer_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_1d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "layer_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_3d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "gru_neurons_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gru_neurons_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len_alphabet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_308": {
                "input": {
                    "value": "decoded_max_indices - input_max_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_310": {
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ],
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__388": {
                "parameters": {
                    "value": "model_decode.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_400": {
                "variable": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ],
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_362": {
                "input": {
                    "value": "1.0 + log_vars - mus.pow(2) - log_vars.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_399": {
                "input": {
                    "value": "decoded_max_indices - input_max_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_401": {
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ],
                        [
                            "1.0 - torch.abs(decoded_max_indices - input_max_indices)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(differences, min=0.0, max=1.0).double()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}