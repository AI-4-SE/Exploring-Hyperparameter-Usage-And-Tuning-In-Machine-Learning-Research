{
    "PINNs/DenseCoreNetwork.py": {
        "tensorflow": {
            "Dense_25": {
                "variable": {
                    "value": "self.hidden_layer_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Pg[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Pg",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "first_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_31": {
                "variable": {
                    "value": "self.hidden_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Pg[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Pg",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "variable": {
                    "value": "self.hidden_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Pg[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Pg",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_44": {
                "variable": {
                    "value": "self.dense_output_layer_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_gbus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_gbus",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_51": {
                "variable": {
                    "value": "self.hidden_layer_Lm_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Lm[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Lm",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_layer_Lm_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "self.hidden_layer_Lm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Lm[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Lm",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_layer_Lm_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "variable": {
                    "value": "self.hidden_layer_Lm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "neurons_in_hidden_layers_Lm[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "neurons_in_hidden_layers_Lm",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_layer_Lm_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "variable": {
                    "value": "self.dense_output_layer_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_l",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_76": {
                "variable": {
                    "value": "self.dense_output_layer_a_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_gbus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_gbus",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_a_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_81": {
                "variable": {
                    "value": "self.dense_output_layer_a_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_gbus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_gbus",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_a_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.dense_output_layer_b_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_line",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_line",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_b_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_91": {
                "variable": {
                    "value": "self.dense_output_layer_b_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_line",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_line",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.glorot_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_b_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "glorot_normal_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PINNs/PinnLayer.py": {
        "tensorflow": {
            "convert_to_tensor_59": {
                "variable": {
                    "value": "L_Val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_34": {
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(P_Gens, self.Pg_max_act), axis=1) - tf.reduce_sum(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.math.negative(n_o_a_u))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.math.negative(n_o_a_d))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.math.negative(n_o_b_u))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.math.negative(n_o_b_d))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "tf.nn.relu(P_Gens - self.Pg_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tf.nn.relu(self.Pg_min - P_Gens)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.matmul(tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g) - tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L), self.PTDF) - self.Pl_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.matmul(tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L) - tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g), self.PTDF) - self.Pl_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "n_o_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_l",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(n_o_a_u, P_Gens - self.Pg_max))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(n_o_a_d, self.Pg_min - P_Gens))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(n_o_b_u, tf.matmul(tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g) - tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L), self.PTDF) - self.Pl_max))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(n_o_b_d, tf.matmul(tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L) - tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g), self.PTDF) - self.Pl_max))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "features": {
                    "value": "tf.math.negative(n_o_a_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "features": {
                    "value": "tf.math.negative(n_o_a_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "features": {
                    "value": "tf.math.negative(n_o_b_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "features": {
                    "value": "tf.math.negative(n_o_b_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_35": {
                "features": {
                    "value": "P_Gens - self.Pg_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_36": {
                "features": {
                    "value": "self.Pg_min - P_Gens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_37": {
                "features": {
                    "value": "tf.matmul(tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g) - tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L), self.PTDF) - self.Pl_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "features": {
                    "value": "tf.matmul(tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L) - tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g), self.PTDF) - self.Pl_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_41": {
                "x": {
                    "value": "np.matmul(self.C_Pg, self.Map_g) + tf.matmul(n_o_a_d, self.Map_g) * self.Lg_Max[2] - tf.matmul(n_o_a_u, self.Map_g) * self.Lg_Max[1] - tf.matmul(n_o_b_u * self.Lg_Max[3], self.PTDF, transpose_b=True) + tf.matmul(n_o_b_d * self.Lg_Max[4], self.PTDF, transpose_b=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "x": {
                    "value": "tf.multiply(n_o_a_u, P_Gens - self.Pg_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "tf.multiply(n_o_a_d, self.Pg_min - P_Gens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_46": {
                "x": {
                    "value": "tf.multiply(n_o_b_u, tf.matmul(tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g) - tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L), self.PTDF) - self.Pl_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_47": {
                "x": {
                    "value": "tf.multiply(n_o_b_d, tf.matmul(tf.matmul(self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4), self.Map_L) - tf.matmul(tf.multiply(P_Gens, self.Pg_max_act), self.Map_g), self.PTDF) - self.Pl_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "negative_50": {
                "x": {
                    "value": "n_o_a_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_a_u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "negative_51": {
                "x": {
                    "value": "n_o_a_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_a_d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "negative_52": {
                "x": {
                    "value": "n_o_b_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_b_u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "negative_53": {
                "x": {
                    "value": "n_o_b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_b_d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "P_Loads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_Loads",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.L_max * 0.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_44": {
                "x": {
                    "value": "n_o_a_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_a_u",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "P_Gens - self.Pg_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "x": {
                    "value": "n_o_a_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_a_d",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.Pg_min - P_Gens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_46": {
                "x": {
                    "value": "P_Loads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_Loads",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.L_max * 0.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "x": {
                    "value": "P_Loads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_Loads",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.L_max * 0.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Map_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "tf.multiply(P_Gens, self.Pg_max_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Map_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "a": {
                    "value": "n_o_a_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DenseCoreNetwork.call_inference(L_Val, **kwargs)",
                            "Call"
                        ],
                        [
                            "n_o_a_d",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Map_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "self.L_max * 0.6 + tf.multiply(P_Loads, self.L_max * 0.4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Map_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "tf.multiply(P_Gens, self.Pg_max_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Map_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_37": {
                "x": {
                    "value": "P_Loads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_Loads",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.L_max * 0.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_38": {
                "x": {
                    "value": "P_Loads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_Loads",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.L_max * 0.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PINNs/PinnModel.py": {
        "tensorflow": {
            "multiply_30": {
                "variable": {
                    "value": "loss_network_output_Gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "network_output_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "variable": {
                    "value": "loss_network_output_l",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_o_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "variable": {
                    "value": "loss_network_output_a_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_o_a_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_34": {
                "variable": {
                    "value": "loss_network_output_a_d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_o_a_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_35": {
                "variable": {
                    "value": "loss_network_output_b_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_o_b_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_36": {
                "variable": {
                    "value": "loss_network_output_b_d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_o_b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.PinnLayer(L_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}