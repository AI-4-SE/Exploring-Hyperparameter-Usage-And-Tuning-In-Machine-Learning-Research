{
    "CFLPytorch/EquiConvsCFL.py": {
        "torch": {
            "randn_323": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_169": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_171": {
                "variable": {
                    "value": "self._dropout0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "d_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_2x_ec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._swish(self._conv1a(x, self._offsetdict[self._layerdict[layer]].to(x.device)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "d_concat_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_2x, skipconnection[connection])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_289": {
                "variable": {
                    "value": "d_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_4x_ec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._swish(self._conv1b(d_concat_2x, self._offsetdict[self._layerdict[layer]].to(x.device)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "d_concat_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_4x, skipconnection[connection], output4x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_298": {
                "variable": {
                    "value": "d_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_8x_ec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._swish(self._conv2a(d_concat_4x, self._offsetdict[self._layerdict[layer]].to(x.device)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "d_concat_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_8x, skipconnection[connection], output8x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_307": {
                "variable": {
                    "value": "d_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_16x_ec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._swish(self._conv3a(d_concat_8x, self._offsetdict[self._layerdict[layer]].to(x.device)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "d_concat_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_16x, skipconnection[connection], output16x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_88": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._swish(self._bn0(self._expand_conv(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._depthwise_conv(x, offset)))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._bn2(self._project_conv(x))",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs, self._offsetdict[self._layerdict[index]].to(inputs.device))))",
                            "Call"
                        ],
                        [
                            "self._dropout0(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate, offset=self._offsetdict[self._layerdict[index]].to(inputs.device))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_324": {
                "f": {
                    "value": "offset.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "input": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._swish(self._se_reduce(x_squeezed)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CFLPytorch/EquiConvsTFCFL.py": {
        "torch": {
            "randn_559": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn2a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn2a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn2a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn2a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.res2a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn2b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn2b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn2b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.res2b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn2c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.bn2c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn2c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.res2c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn3a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn3a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn3a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn3a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.res3a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn3b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.bn3b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_143": {
                "variable": {
                    "value": "self.bn3b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.res3b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn3c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_152": {
                "variable": {
                    "value": "self.bn3c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn3c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.res3c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self.bn3d_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_163": {
                "variable": {
                    "value": "self.bn3d_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self.bn3d_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_170": {
                "variable": {
                    "value": "self.res3d_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "self.bn4a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn4a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_178": {
                "variable": {
                    "value": "self.bn4a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_180": {
                "variable": {
                    "value": "self.bn4a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_185": {
                "variable": {
                    "value": "self.res4a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "variable": {
                    "value": "self.bn4b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_189": {
                "variable": {
                    "value": "self.bn4b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn4b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.res4b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "variable": {
                    "value": "self.bn4c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn4c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_202": {
                "variable": {
                    "value": "self.bn4c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.res4c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "variable": {
                    "value": "self.bn4d_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_211": {
                "variable": {
                    "value": "self.bn4d_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.bn4d_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_218": {
                "variable": {
                    "value": "self.res4d_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_220": {
                "variable": {
                    "value": "self.bn4e_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_222": {
                "variable": {
                    "value": "self.bn4e_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_224": {
                "variable": {
                    "value": "self.bn4e_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_229": {
                "variable": {
                    "value": "self.res4e_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_231": {
                "variable": {
                    "value": "self.bn4f_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_233": {
                "variable": {
                    "value": "self.bn4f_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_235": {
                "variable": {
                    "value": "self.bn4f_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.res4f_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.bn5a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_246": {
                "variable": {
                    "value": "self.bn5a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_248": {
                "variable": {
                    "value": "self.bn5a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_250": {
                "variable": {
                    "value": "self.bn5a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_255": {
                "variable": {
                    "value": "self.res5a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_257": {
                "variable": {
                    "value": "self.bn5b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_259": {
                "variable": {
                    "value": "self.bn5b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_261": {
                "variable": {
                    "value": "self.bn5b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.drop_out_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_269": {
                "variable": {
                    "value": "self.res5b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_271": {
                "variable": {
                    "value": "self.bn5c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_273": {
                "variable": {
                    "value": "self.bn5c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_275": {
                "variable": {
                    "value": "self.bn5c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "UpsamplingBilinear2d_282": {
                "variable": {
                    "value": "self.d_2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_287": {
                "variable": {
                    "value": "self.d_4x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_293": {
                "variable": {
                    "value": "self.d_8x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_299": {
                "variable": {
                    "value": "self.d_16x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_331": {
                "variable": {
                    "value": "res2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn2a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2a_branch1(res2a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2a_branch2c(res2a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_341": {
                "variable": {
                    "value": "res2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res2a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2a_relu(res2a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2b_branch2c(res2b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_351": {
                "variable": {
                    "value": "res2c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res2b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2b_relu(res2b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2c_branch2c(res2c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_365": {
                "variable": {
                    "value": "res3a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn3a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3a_branch1(res3a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3a_branch2c(res3a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_375": {
                "variable": {
                    "value": "res3b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3a_relu(res3a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3b_branch2c(res3b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_385": {
                "variable": {
                    "value": "res3c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3b_relu(res3b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3c_branch2c(res3c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_395": {
                "variable": {
                    "value": "res3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3c_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3c_relu(res3c)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3d_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3d_branch2c(res3d_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_409": {
                "variable": {
                    "value": "res4a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn4a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4a_branch1(res4a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4a_branch2c(res4a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_421": {
                "variable": {
                    "value": "res4b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4a_relu(res4a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4b_branch2c(res4b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_438": {
                "variable": {
                    "value": "res4c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4b_relu(res4b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4c_branch2c(res4c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_450": {
                "variable": {
                    "value": "res4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4c_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4c_relu(res4c)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4d_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4d_branch2c(res4d_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_461": {
                "variable": {
                    "value": "res4e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4d_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4d_relu(res4d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4e_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4e_branch2c(res4e_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_473": {
                "variable": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4e_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4e_relu(res4e)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4f_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4f_branch2c(res4f_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_488": {
                "variable": {
                    "value": "res5a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn5a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5a_branch1(res5a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn5a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5a_branch2c(res5a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_498": {
                "variable": {
                    "value": "res5b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res5a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res5a_relu(res5a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn5b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5b_branch2c(res5b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_513": {
                "variable": {
                    "value": "d_concat_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_2x, res4f_relu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "d_concat_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_4x, res3d_relu, output4X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "d_concat_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_8x, res2c_relu, output8X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "d_concat_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_16x, bn_conv1, output16X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_64": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(offset, [x.shape[0], sizediff], dim=0)",
                            "Call"
                        ],
                        [
                            "offset[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[x.shape[0], sizediff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CFLPytorch/StdConvsCFL.py": {
        "torch": {
            "randn_310": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_144": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_168": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_264": {
                "variable": {
                    "value": "self._upconv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_265": {
                "variable": {
                    "value": "self._upconv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "432",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_266": {
                "variable": {
                    "value": "self._upconv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_267": {
                "variable": {
                    "value": "self._upconv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "154",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_268": {
                "variable": {
                    "value": "self._upconv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_269": {
                "variable": {
                    "value": "self._upconv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "66",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_270": {
                "variable": {
                    "value": "self._upconv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_271": {
                "variable": {
                    "value": "self._upconv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_272": {
                "variable": {
                    "value": "self._upconv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "d_concat_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_2x, skipconnection[connection])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "d_concat_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_4x, skipconnection[connection], output4x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "d_concat_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_8x, skipconnection[connection], output8x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "d_concat_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_16x, skipconnection[connection], output16x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_87": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._swish(self._bn0(self._expand_conv(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._depthwise_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._bn2(self._project_conv(x))",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "input": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._swish(self._se_reduce(x_squeezed)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CFLPytorch/StdConvsTFCFL.py": {
        "torch": {
            "randn_523": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, self.weight, self.bias, self.stride, self.padding, self.output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:xh - (pad_h - pad_h // 2), pad_w // 2:xw - (pad_w - pad_w // 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn2a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn2a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn2a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.res2a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn2b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn2b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn2b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.res2b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn2c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn2c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.bn2c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.res2c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn3a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn3a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn3a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn3a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.res3a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.bn3b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn3b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.bn3b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.res3b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn3c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn3c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_152": {
                "variable": {
                    "value": "self.bn3c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_157": {
                "variable": {
                    "value": "self.res3c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn3d_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self.bn3d_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_163": {
                "variable": {
                    "value": "self.bn3d_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_168": {
                "variable": {
                    "value": "self.res3d_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn4a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_174": {
                "variable": {
                    "value": "self.bn4a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn4a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_178": {
                "variable": {
                    "value": "self.bn4a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_183": {
                "variable": {
                    "value": "self.res4a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "variable": {
                    "value": "self.bn4b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_187": {
                "variable": {
                    "value": "self.bn4b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_189": {
                "variable": {
                    "value": "self.bn4b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_194": {
                "variable": {
                    "value": "self.res4b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.bn4c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_198": {
                "variable": {
                    "value": "self.bn4c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn4c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_205": {
                "variable": {
                    "value": "self.res4c_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "variable": {
                    "value": "self.bn4d_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_209": {
                "variable": {
                    "value": "self.bn4d_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_211": {
                "variable": {
                    "value": "self.bn4d_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.res4d_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "variable": {
                    "value": "self.bn4e_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_220": {
                "variable": {
                    "value": "self.bn4e_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_222": {
                "variable": {
                    "value": "self.bn4e_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_227": {
                "variable": {
                    "value": "self.res4e_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn4f_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_231": {
                "variable": {
                    "value": "self.bn4f_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_233": {
                "variable": {
                    "value": "self.bn4f_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_238": {
                "variable": {
                    "value": "self.res4f_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_240": {
                "variable": {
                    "value": "self.bn5a_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_244": {
                "variable": {
                    "value": "self.bn5a_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_246": {
                "variable": {
                    "value": "self.bn5a_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_248": {
                "variable": {
                    "value": "self.bn5a_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_253": {
                "variable": {
                    "value": "self.res5a_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "variable": {
                    "value": "self.bn5b_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_257": {
                "variable": {
                    "value": "self.bn5b_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_259": {
                "variable": {
                    "value": "self.bn5b_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.drop_out_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "variable": {
                    "value": "self.res5b_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_269": {
                "variable": {
                    "value": "self.bn5c_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_271": {
                "variable": {
                    "value": "self.bn5c_branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_273": {
                "variable": {
                    "value": "self.bn5c_branch2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - 0.999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_323": {
                "variable": {
                    "value": "res2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn2a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2a_branch1(res2a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2a_branch2c(res2a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_332": {
                "variable": {
                    "value": "res2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res2a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2a_relu(res2a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2b_branch2c(res2b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_341": {
                "variable": {
                    "value": "res2c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res2b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2b_relu(res2b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn2c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn2c_branch2c(res2c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_354": {
                "variable": {
                    "value": "res3a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn3a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3a_branch1(res3a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3a_branch2c(res3a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_363": {
                "variable": {
                    "value": "res3b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3a_relu(res3a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3b_branch2c(res3b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_372": {
                "variable": {
                    "value": "res3c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3b_relu(res3b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3c_branch2c(res3c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_381": {
                "variable": {
                    "value": "res3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res3c_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res3c_relu(res3c)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn3d_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn3d_branch2c(res3d_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_394": {
                "variable": {
                    "value": "res4a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn4a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4a_branch1(res4a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4a_branch2c(res4a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_405": {
                "variable": {
                    "value": "res4b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4a_relu(res4a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4b_branch2c(res4b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_421": {
                "variable": {
                    "value": "res4c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4b_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4b_relu(res4b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4c_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4c_branch2c(res4c_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_432": {
                "variable": {
                    "value": "res4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4c_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4c_relu(res4c)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4d_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4d_branch2c(res4d_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_442": {
                "variable": {
                    "value": "res4e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4d_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4d_relu(res4d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4e_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4e_branch2c(res4e_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_453": {
                "variable": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res4e_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res4e_relu(res4e)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn4f_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn4f_branch2c(res4f_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_467": {
                "variable": {
                    "value": "res5a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn5a_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5a_branch1(res5a_branch1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn5a_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5a_branch2c(res5a_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_476": {
                "variable": {
                    "value": "res5b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res5a_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res5a_relu(res5a)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bn5b_branch2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.bn5b_branch2c(res5b_branch2c))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_488": {
                "variable": {
                    "value": "d_concat_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_2x, res4f_relu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "d_concat_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_4x, res3d_relu, output4X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "d_concat_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_8x, res2c_relu, output8X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "d_concat_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_16x, bn_conv1, output16X_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, self.weight, self.bias, self.stride, self.padding, self.output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:xh - (pad_h - pad_h // 2), pad_w // 2:xw - (pad_w - pad_w // 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, self.weight, self.bias, self.stride, self.padding, self.output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:xh - (pad_h - pad_h // 2), pad_w // 2:xw - (pad_w - pad_w // 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, self.weight, self.bias, self.stride, self.padding, self.output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:xh - (pad_h - pad_h // 2), pad_w // 2:xw - (pad_w - pad_w // 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, self.weight, self.bias, self.stride, self.padding, self.output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:xh - (pad_h - pad_h // 2), pad_w // 2:xw - (pad_w - pad_w // 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CFLPytorch/resnet.py": {
        "torch": {
            "randn_419": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "variable": {
                    "value": "self._ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_373": {
                "variable": {
                    "value": "self._upconv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_374": {
                "variable": {
                    "value": "self._upconv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_375": {
                "variable": {
                    "value": "self._upconv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_376": {
                "variable": {
                    "value": "self._upconv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "770",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_377": {
                "variable": {
                    "value": "self._upconv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_378": {
                "variable": {
                    "value": "self._upconv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "386",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_379": {
                "variable": {
                    "value": "self._upconv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_380": {
                "variable": {
                    "value": "self._upconv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "130",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_381": {
                "variable": {
                    "value": "self._upconv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "d_concat_2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_2x, skipconnection[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "d_concat_4x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_4x, skipconnection[3], output4x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "d_concat_8x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_8x, skipconnection[2], output8x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "d_concat_16x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_16x, skipconnection[1], output16x_likelihood)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CFLPytorch/utils.py": {
        "torch": {
            "floor_90": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_89": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "deform_conv2d(x, offset, self.weight, self.bias, self.stride, self.padding, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "deform_conv2d(x, offset, self.weight, self.bias, self.stride, self.padding, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_126": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(offset, [x.shape[0], sizediff], dim=0)",
                            "Call"
                        ],
                        [
                            "offset[0]",
                            "Subscript"
                        ],
                        [
                            "torch.split(offset, [x.shape[0], sizediff], dim=0)",
                            "Call"
                        ],
                        [
                            "offset[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[x.shape[0], sizediff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_148": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(offset, [x.shape[0], sizediff], dim=0)",
                            "Call"
                        ],
                        [
                            "offset[0]",
                            "Subscript"
                        ],
                        [
                            "torch.split(offset, [x.shape[0], sizediff], dim=0)",
                            "Call"
                        ],
                        [
                            "offset[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[x.shape[0], sizediff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "deform_conv2d(x, offset, self.weight, self.bias, self.stride, self.padding, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_178": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "deform_conv2d(x, offset, self.weight, self.bias, self.stride, self.padding, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_197": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "deform_conv2d(x, offset, self.weight, self.bias, self.stride, self.padding, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "corners_2_xy.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor1, tensor1, tensor1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * 255",
                            "BinOp"
                        ],
                        [
                            "torch.cat((tensor1, tensor1, tensor1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tensor1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cutoutspherical.py": {
        "torch": {
            "ones_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.shape[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "variable": {
                    "value": "phi1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi - self.length / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_33": {
                "variable": {
                    "value": "phi2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi + self.length / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "variable": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta - self.length / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "variable": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + self.length / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "dataconcat.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset('traindata.json', transform=train_transform, target_transform=train_target_transform, joint_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "suppl_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "supplement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset('morethan4corners.json', transform=train_transform, target_transform=train_target_transform, joint_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "RGB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[RGB, RGBsup]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "EM",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[EM, EMsup]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[CM, CMsup]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CM[3]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(image)",
                            "Call"
                        ],
                        [
                            "tojpg(image)",
                            "Call"
                        ],
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mytransforms.py": {
        "torch": {
            "meshgrid_182": {
                "variable": {
                    "value": "meshgrids",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(size, dtype=torch.float32) for size in kernel_size]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms(x)",
                            "Call"
                        ],
                        [
                            "_iterate_transforms(transform, x)",
                            "Call"
                        ],
                        [
                            "x[None, ...]",
                            "Subscript"
                        ],
                        [
                            "NF.pad(x, (padding, padding, padding, padding), mode='reflect')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(NF.conv2d(x, kernel, groups=self.channels), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "NF.conv2d(x, kernel, groups=self.channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + self.alpha * torch.randn_like(image)",
                            "BinOp"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.squeeze(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(image)",
                            "Call"
                        ],
                        [
                            "image.convert('L')",
                            "Call"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(hm)",
                            "Call"
                        ],
                        [
                            "np.array(image).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((b - mean_color[0], g - mean_color[1], r - mean_color[2]), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_152": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + self.alpha * torch.randn_like(image)",
                            "BinOp"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.squeeze(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(image)",
                            "Call"
                        ],
                        [
                            "image.convert('L')",
                            "Call"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(hm)",
                            "Call"
                        ],
                        [
                            "np.array(image).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((b - mean_color[0], g - mean_color[1], r - mean_color[2]), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "self._gen.roll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * (1 / (std * math.sqrt(2 * math.pi)) * torch.exp(-((mgrid - mean) / (2 * std)) ** 2))",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(self.channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ],
                        [
                            "self.gaussian_kernel(size=size)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_203": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms(x)",
                            "Call"
                        ],
                        [
                            "_iterate_transforms(transform, x)",
                            "Call"
                        ],
                        [
                            "x[None, ...]",
                            "Subscript"
                        ],
                        [
                            "NF.pad(x, (padding, padding, padding, padding), mode='reflect')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(NF.conv2d(x, kernel, groups=self.channels), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * (1 / (std * math.sqrt(2 * math.pi)) * torch.exp(-((mgrid - mean) / (2 * std)) ** 2))",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(self.channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ],
                        [
                            "self.gaussian_kernel(size=size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_182": {
                "start": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_185": {
                "input": {
                    "value": "-((mgrid - mean) / (2 * std)) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_219": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + self.alpha * torch.randn_like(image)",
                            "BinOp"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.squeeze(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(image)",
                            "Call"
                        ],
                        [
                            "image.convert('L')",
                            "Call"
                        ],
                        [
                            "np.asarray(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(hm)",
                            "Call"
                        ],
                        [
                            "np.array(image).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(image, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((b - mean_color[0], g - mean_color[1], r - mean_color[2]), axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "offsetcalculator.py": {
        "torch": {
            "as_tensor_61": {
                "variable": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]], device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "rotation_matrix((0, 1, 0), phi)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ROT, rotation_matrix((1, 0, 0), theta))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix((1, 0, 0), theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(k_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(k_W)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "w_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k_W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "h_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k_H",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[focal, 0, c_x], [0, focal, c_y], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_96": {
                "variable": {
                    "value": "inv_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[focal, 0, c_x], [0, focal, c_y], [0.0, 0.0, 1.0]], device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_97": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(K)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rays.reshape(3, k_H * k_W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]], device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "rotation_matrix((0, 1, 0), phi)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ROT, rotation_matrix((1, 0, 0), theta))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(inv_K, rays.reshape(3, k_H * k_W))",
                            "Call"
                        ],
                        [
                            "rays / torch.norm(rays, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(ROT, rays)",
                            "Call"
                        ],
                        [
                            "rays.reshape(3, k_H, k_W)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_103": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rays[0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rays[2, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "asin_104": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(rays[1, ...], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * k_H * k_W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "pano_H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(2 * k_H * k_W, pano_H, pano_W, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(offset, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([offset for _ in range(bs)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[offset for _ in range(bs)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_209": {
                "obj": {
                    "value": "layerdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{0: ((64, 128), (3, 3), (2, 2)), 1: ((64, 128), (3, 3), (1, 1)), 2: ((32, 64), (3, 3), (2, 2)), 3: ((32, 64), (3, 3), (1, 1)), 4: ((16, 32), (5, 5), (2, 2)), 5: ((16, 32), (5, 5), (1, 1)), 6: ((8, 16), (3, 3), (2, 2)), 7: ((8, 16), (3, 3), (1, 1)), 8: ((8, 16), (3, 3), (1, 1)), 9: ((8, 16), (5, 5), (1, 1)), 10: ((8, 16), (5, 5), (1, 1)), 11: ((8, 16), (5, 5), (1, 1)), 12: ((4, 8), (5, 5), (2, 2)), 13: ((4, 8), (5, 5), (1, 1)), 14: ((4, 8), (5, 5), (1, 1)), 15: ((4, 8), (5, 5), (1, 1)), 16: ((4, 8), (3, 3), (1, 1)), 17: ((4, 8), (1, 1), (1, 1)), 18: ((4, 8), (3, 3), (1, 1)), 19: ((8, 16), (3, 3), (1, 1)), 20: ((16, 32), (3, 3), (1, 1)), 21: ((16, 32), (3, 3), (1, 1)), 22: ((32, 64), (3, 3), (1, 1)), 23: ((32, 64), (5, 5), (1, 1)), 24: ((64, 128), (3, 3), (1, 1)), 25: ((64, 128), (5, 5), (1, 1)), 26: ((64, 128), (3, 3), (1, 1))}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./layer{}.pt'.format(args.mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "offsetdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./offset{}.pt'.format(args.mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_99": {
                "input": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(inv_K, rays.reshape(3, k_H * k_W))",
                            "Call"
                        ],
                        [
                            "rays / torch.norm(rays, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(ROT, rays)",
                            "Call"
                        ],
                        [
                            "rays.reshape(3, k_H, k_W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_104": {
                "input": {
                    "value": "rays[1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(offsets_y, -1), torch.unsqueeze(offsets_x, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dot_62": {
                "input": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_92": {
                "input": {
                    "value": "torch.unsqueeze(h_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(w_ones, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "input": {
                    "value": "torch.unsqueeze(h_ones, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(w_range, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "h_grid.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "input": {
                    "value": "w_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(k_W, device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "input": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(k_W), device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "offsets_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_roi_x - roi_x",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "offsetsTFCFL.py": {
        "torch": {
            "as_tensor_61": {
                "variable": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]], device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "rotation_matrix((0, 1, 0), phi)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ROT, rotation_matrix((1, 0, 0), theta))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix((1, 0, 0), theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(k_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(k_W)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "w_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k_W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "h_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k_H",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[focal, 0, c_x], [0, focal, c_y], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_96": {
                "variable": {
                    "value": "inv_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[focal, 0, c_x], [0, focal, c_y], [0.0, 0.0, 1.0]], device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_97": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(K)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rays.reshape(3, k_H * k_W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ROT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]], device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "rotation_matrix((0, 1, 0), phi)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ROT, rotation_matrix((1, 0, 0), theta))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(inv_K, rays.reshape(3, k_H * k_W))",
                            "Call"
                        ],
                        [
                            "rays / torch.norm(rays, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(ROT, rays)",
                            "Call"
                        ],
                        [
                            "rays.reshape(3, k_H, k_W)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_103": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rays[0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rays[2, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "asin_104": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(rays[1, ...], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * k_H * k_W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "pano_H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(2 * k_H * k_W, pano_H, pano_W, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(offset, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([offset for _ in range(bs)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[offset for _ in range(bs)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "layerdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{0: ((64, 128), (7, 7), (2, 2)), 1: ((32, 64), (3, 3), (1, 1)), 2: ((32, 64), (3, 3), (1, 1)), 3: ((32, 64), (3, 3), (1, 1)), 4: ((16, 32), (3, 3), (1, 1)), 5: ((16, 32), (3, 3), (1, 1)), 6: ((16, 32), (3, 3), (1, 1)), 7: ((16, 32), (3, 3), (1, 1)), 8: ((8, 16), (3, 3), (1, 1)), 9: ((8, 16), (3, 3), (1, 1)), 10: ((8, 16), (3, 3), (1, 1)), 11: ((8, 16), (3, 3), (1, 1)), 12: ((8, 16), (3, 3), (1, 1)), 13: ((8, 16), (3, 3), (1, 1)), 14: ((4, 8), (3, 3), (1, 1)), 15: ((4, 8), (3, 3), (1, 1)), 16: ((4, 8), (3, 3), (1, 1)), 17: ((4, 8), (3, 3), (1, 1)), 18: ((8, 16), (3, 3), (1, 1)), 19: ((16, 32), (3, 3), (1, 1)), 20: ((16, 32), (3, 3), (1, 1)), 21: ((32, 64), (3, 3), (1, 1)), 22: ((32, 64), (5, 5), (1, 1)), 23: ((64, 128), (3, 3), (1, 1)), 24: ((64, 128), (5, 5), (1, 1)), 25: ((64, 128), (3, 3), (1, 1))}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./layer{}.pt'.format(args.mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "offsetdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./offset{}.pt'.format(args.mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_99": {
                "input": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([w_grid, h_grid, torch.ones(h_grid.shape, device='cpu', dtype=torch.float)], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(inv_K, rays.reshape(3, k_H * k_W))",
                            "Call"
                        ],
                        [
                            "rays / torch.norm(rays, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(ROT, rays)",
                            "Call"
                        ],
                        [
                            "rays.reshape(3, k_H, k_W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_104": {
                "input": {
                    "value": "rays[1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(offsets_y, -1), torch.unsqueeze(offsets_x, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dot_62": {
                "input": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(axis, device='cpu', dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "axis / math.sqrt(torch.dot(axis, axis))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_92": {
                "input": {
                    "value": "torch.unsqueeze(h_range, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(w_ones, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "input": {
                    "value": "torch.unsqueeze(h_ones, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(w_range, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "h_grid.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "input": {
                    "value": "w_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(k_W, device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "input": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(k_W), device='cpu', dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "offsets_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_roi_x - roi_x",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "test_CFL.py": {
        "torch": {
            "sum_63": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output'] + eps",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_151": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output'] + eps",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corner1, corner1, corner1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 * corners",
                            "BinOp"
                        ],
                        [
                            "torch.cat((corner1, corner1, corner1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(corner1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_175": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output'] + eps",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset('testdata.json', transform=transform, target_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_246": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.modelfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_257": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL('efficient-b0', conv_type='Std')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_307": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_316": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL('efficient-b0', conv_type='Std')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_110": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_176": {
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_319": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_243": {
                "f": {
                    "value": "offsettest.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_TFCFL.py": {
        "torch": {
            "sigmoid_162": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_163": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corner1, corner1, corner1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_168": {
                "variable": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 * corners",
                            "BinOp"
                        ],
                        [
                            "torch.cat((corner1, corner1, corner1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(corner1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_187": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset('testdata.json', transform=None, target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_262": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.modelfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((b - mean_color[0], g - mean_color[1], r - mean_color[2]), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "EM",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "EM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EM_gt",
                            "Name"
                        ],
                        [
                            "Image.open(EM_name)",
                            "Call"
                        ],
                        [
                            "EM.resize([predW, predH])",
                            "Call"
                        ],
                        [
                            "np.array(EM).astype('float32') / 255.0",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(np.asarray(EM), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(EM)",
                            "Call"
                        ],
                        [
                            "self.target_transform(EM)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CM_gt",
                            "Name"
                        ],
                        [
                            "Image.open(CM_name)",
                            "Call"
                        ],
                        [
                            "CM.resize([predW, predH])",
                            "Call"
                        ],
                        [
                            "np.array(CM).astype('float32') / 255.0",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(np.asarray(CM), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(CM)",
                            "Call"
                        ],
                        [
                            "self.target_transform(CM)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_273": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL('efficient-b0', conv_type='Std')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_313": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_322": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL('efficient-b0', conv_type='Std')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_102": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_188": {
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(corners)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_286": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_287": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(edges)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_289": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(corners)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_325": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_CFL.py": {
        "torch": {
            "BCEWithLogitsLoss_115": {
                "variable": {
                    "value": "LogitsLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ponderedSCELoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogitsLoss(pred, gt)",
                            "Call"
                        ],
                        [
                            "ponderedSCELoss * pond",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_289": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_291": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corners[0].detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(image)",
                            "Call"
                        ],
                        [
                            "tojpg(image)",
                            "Call"
                        ],
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "image.convert('RGB')",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges[0].detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(image1)",
                            "Call"
                        ],
                        [
                            "tojpg(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_314": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_315": {
                "variable": {
                    "value": "EM",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_316": {
                "variable": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "CM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_317": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_395": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset(file='traindata.json', transform=None, target_transform=None, joint_transform=train_joint_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_403": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset(file='testdata.json', transform=valid_transform, target_transform=valid_target_transform, joint_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_432": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialLR_433": {
                "variable": {
                    "value": "LR_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.995",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_434": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'{}'.format(args.logdir)",
                    "type": "Call",
                    "possible_values": []
                },
                "comment": {
                    "value": "testing complete traindatastruct",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_574": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "modelfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_{}_epoch'.format(model_name) + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_72": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "EM",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_151": {
                "variable": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "CM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_152": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_555": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, modelfile)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_572": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(args.model_dir, args.model_name, args.conv_type, args.modelfile)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=None, offsetdict=None)",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=None, offsetdict=None)",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(model_name, conv_type=conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_109": {
                "input": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.le(0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.gt(0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_117": {
                "input": {
                    "value": "vb.permute(2, 3, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1 / pb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_189": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_418": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(args.model_dir, args.model_name, args.conv_type, args.modelfile)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=None, offsetdict=None)",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "StdConvsCFL(args.model_name, conv_type=args.conv_type, layerdict=None, offsetdict=None)",
                            "Call"
                        ],
                        [
                            "EquiConvsCFL(model_name, conv_type=conv_type, layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "Res50Std()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_570": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_568": {
                "f": {
                    "value": "offsettrain.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_414": {
                "f": {
                    "value": "offsettrain.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_TFCFL.py": {
        "torch": {
            "BCEWithLogitsLoss_118": {
                "variable": {
                    "value": "LogitsLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ponderedSCELoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogitsLoss(pred, gt)",
                            "Call"
                        ],
                        [
                            "ponderedSCELoss * pond",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_290": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_293": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corners[0].detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(image)",
                            "Call"
                        ],
                        [
                            "tojpg(image)",
                            "Call"
                        ],
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "image.convert('RGB')",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_297": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges[0].detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(image1)",
                            "Call"
                        ],
                        [
                            "tojpg(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_316": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_396": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset(file='traindata.json', transform=None, target_transform=None, joint_transform=train_joint_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_404": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset(file='testdata.json', transform=valid_transform, target_transform=valid_target_transform, joint_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_433": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialLR_434": {
                "variable": {
                    "value": "LR_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.995",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_435": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'{}'.format(args.logdir)",
                    "type": "Call",
                    "possible_values": []
                },
                "comment": {
                    "value": "testing complete traindatastruct",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_575": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "modelfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_{}_epoch'.format(model_name) + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_75": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtneg & predgt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gtpos & predle).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_277": {
                "variable": {
                    "value": "(edges, corners)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[key]",
                            "Subscript"
                        ],
                        [
                            "inputs['output_likelihood']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "outputs['output_likelihood']",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_556": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, modelfile)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_573": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(args.model_dir, args.model_name, args.conv_type, args.modelfile)",
                            "Call"
                        ],
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_112": {
                "input": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.le(0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.gt(0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_120": {
                "input": {
                    "value": "vb.permute(2, 3, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1 / pb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_178": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_317": {
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_318": {
                "input": {
                    "value": "EM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_319": {
                "input": {
                    "value": "CM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_419": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(args.model_dir, args.model_name, args.conv_type, args.modelfile)",
                            "Call"
                        ],
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "StdConvsTFCFL()",
                            "Call"
                        ],
                        [
                            "EquiConvsTFCFL(layerdict=layerdict, offsetdict=offsetdict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_275": {
                "input": {
                    "value": "EM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_276": {
                "input": {
                    "value": "CM_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output.shape[-2], output.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformclassexp.py": {
        "torch": {
            "DataLoader_123": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SUN360Dataset(file='traindata.json', transform=None, target_transform=None, joint_transform=joint_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_38": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_136": {
                "input": {
                    "value": "CM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(CM_name)",
                            "Call"
                        ],
                        [
                            "self.target_transform(CM)",
                            "Call"
                        ],
                        [
                            "self.target_transform(CM)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}