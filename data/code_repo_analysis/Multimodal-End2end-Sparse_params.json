{
    "src/evaluate.py": {
        "sklearn": {
            "f1_score_55": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_preds[non_zeros] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_truth[non_zeros] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_58": {
                "variable": {
                    "value": "acc2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "roc_auc_score_78": {
                "variable": {
                    "value": "aucs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(num_emo))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "roc_auc_score_139": {
                "variable": {
                    "value": "aucs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(num_emo))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "accuracy_score_202": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_203": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_204": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_205": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ],
                        [
                            "truths",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_178": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ],
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ],
                        [
                            "_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "recall_score_179": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ],
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ],
                        [
                            "_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "precision_score_180": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ],
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ],
                        [
                            "_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "f1_score_181": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ],
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ],
                        [
                            "_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "f1_score_90": {
                "y_true": {
                    "value": "truths_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, emo_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, emo_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_156": {
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ],
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ],
                        [
                            "_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "sigmoid_76": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_137": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(-1)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_99": {
                "input": {
                    "value": "preds[i] == truths[i]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_131": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args['learning_rate'], weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam([{'params': model.T.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.t_out.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.V.parameters()}, {'params': model.v_flatten.parameters()}, {'params': model.v_transformer.parameters()}, {'params': model.v_out.parameters()}, {'params': model.A.parameters()}, {'params': model.a_flatten.parameters()}, {'params': model.a_transformer.parameters()}, {'params': model.a_out.parameters()}, {'params': model.weighted_fusion.parameters()}], lr=lr, weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args['learning_rate'], weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam([{'params': model.T.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.t_out.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.V.parameters()}, {'params': model.v_flatten.parameters()}, {'params': model.v_transformer.parameters()}, {'params': model.v_out.parameters()}, {'params': model.A.parameters()}, {'params': model.a_flatten.parameters()}, {'params': model.a_transformer.parameters()}, {'params': model.a_out.parameters()}, {'params': model.weighted_fusion.parameters()}], lr=lr, weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=args['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args['epochs'] * len(train_loader.dataset) // args['batch_size']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "L1Loss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='train', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='train', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='valid', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='valid', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='test', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='test', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='train', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='train', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_hcf_mosei if args['hand_crafted'] else collate_fn",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='valid', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='valid', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_hcf_mosei if args['hand_crafted'] else collate_fn",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_iemocap(data_folder=args['datapath'], phase='test', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ],
                        [
                            "get_dataset_mosei(data_folder=args['datapath'], phase='test', img_interval=args['img_interval'], hand_crafted_features=args['hand_crafted'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_hcf_mosei if args['hand_crafted'] else collate_fn",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.T.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.t_out.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.V.parameters()}, {'params': model.v_flatten.parameters()}, {'params': model.v_transformer.parameters()}, {'params': model.v_out.parameters()}, {'params': model.A.parameters()}, {'params': model.a_flatten.parameters()}, {'params': model.a_transformer.parameters()}, {'params': model.a_out.parameters()}, {'params': model.weighted_fusion.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.T.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.t_out.parameters(), 'lr': lr / args['text_lr_factor']}, {'params': model.V.parameters()}, {'params': model.v_flatten.parameters()}, {'params': model.v_transformer.parameters()}, {'params': model.v_out.parameters()}, {'params': model.A.parameters()}, {'params': model.a_flatten.parameters()}, {'params': model.a_transformer.parameters()}, {'params': model.a_out.parameters()}, {'params': model.weighted_fusion.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_140": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.getPosWeight()",
                            "Call"
                        ],
                        [
                            "torch.tensor(pos_weight).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_144": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.getPosWeight()",
                            "Call"
                        ],
                        [
                            "torch.tensor(pos_weight).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets.py": {
        "torch": {
            "cat_135": {
                "variable": {
                    "value": "video_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load(os.path.join(data_folder, 'IEMOCAP_HCF_FEATURES', f'{phase}_video_features.pt'))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(video_features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(video_features, dim=0)",
                            "Call"
                        ],
                        [
                            "video_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load(os.path.join(data_folder, 'IEMOCAP_HCF_FEATURES', f'{phase}_audio_features.pt'))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(audio_features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(audio_features, dim=0)",
                            "Call"
                        ],
                        [
                            "audio_features[:, self.audio_feature_indices]",
                            "Subscript"
                        ],
                        [
                            "audio_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_229": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_366": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "video_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load(os.path.join(data_folder, 'IEMOCAP_HCF_FEATURES', f'{phase}_video_features.pt'))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(video_features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(video_features, dim=0)",
                            "Call"
                        ],
                        [
                            "video_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load(os.path.join(data_folder, 'IEMOCAP_HCF_FEATURES', f'{phase}_audio_features.pt'))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(audio_features, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(audio_features, dim=0)",
                            "Call"
                        ],
                        [
                            "audio_features[:, self.audio_feature_indices]",
                            "Subscript"
                        ],
                        [
                            "audio_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[meta[uttr_id]['text'] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['text'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "texts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_145": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emoDict[meta[uttr_id]['label']] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['label'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_188": {
                "variable": {
                    "value": "specs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "specs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padRight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_271": {
                "variable": {
                    "value": "waveformPieces[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "waveformPieces[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padLeft, padRight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_285": {
                "variable": {
                    "value": "specs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "specs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padRight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "specgrams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.cutSpecToPieces(specgram)",
                            "Call"
                        ],
                        [
                            "self.cutSpecToPieces(specgram)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emoDict[meta[uttr_id]['label']] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['label'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "video_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vision[hcf_id_index]",
                            "Subscript"
                        ],
                        [
                            "self.video_features[uttrId]",
                            "Subscript"
                        ],
                        [
                            "self.sample_by_interval(img_prefix, video_feature, full=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_131": {
                "data": {
                    "value": "audio_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.audio[hcf_id_index]",
                            "Subscript"
                        ],
                        [
                            "self.audio_features[uttrId][audio_suffix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "specgram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchaudio.transforms.MelSpectrogram(sample_rate=sr, win_length=int(float(sr) / 16000 * 400), n_fft=int(float(sr) / 16000 * 400))(waveform).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torchaudio.transforms.MelSpectrogram(sample_rate=sr, win_length=int(float(sr) / 16000 * 400))(waveform).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "texts[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "text_max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_max_len(texts)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_475": {
                "tensors": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[meta[uttr_id]['text'] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['text'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "texts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_476": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emoDict[meta[uttr_id]['label']] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['label'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "data": {
                    "value": "video_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vision[hcf_id_index]",
                            "Subscript"
                        ],
                        [
                            "self.video_features[uttrId]",
                            "Subscript"
                        ],
                        [
                            "self.sample_by_interval(img_prefix, video_feature, full=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_453": {
                "data": {
                    "value": "audio_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.audio[hcf_id_index]",
                            "Subscript"
                        ],
                        [
                            "self.audio_features[uttrId][audio_suffix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emoDict[meta[uttr_id]['label']] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['label'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emoDict[meta[uttr_id]['label']] for uttr_id in uttr_ids]",
                            "ListComp"
                        ],
                        [
                            "[meta[id]['label'] for id in ids]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_462": {
                "data": {
                    "value": "texts[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/attention_block.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.y_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.attn_weight_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.channel_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.y_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.attn_weight_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(attn_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attn_weights_split, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(attn_weights.split(sample_points_lens, dim=0))",
                            "Call"
                        ],
                        [
                            "[F.softmax(a, dim=-1) for a in attn_weights_split]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_100": {
                "variable": {
                    "value": "(this_t_sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "this_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "this_t in enumerate(_t)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.clone().detach()",
                            "Call"
                        ],
                        [
                            "list(_t.split(lens, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.channel_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "all_spatial_attn_weights_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channel_affine(x_tensor)",
                            "Call"
                        ],
                        [
                            "x_k + y_k[i]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x_k)",
                            "Call"
                        ],
                        [
                            "self.channel_affine(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_84": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_101": {
                "input": {
                    "value": "this_t_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(this_t, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(this_t_sorted, dim=-1) < cdf",
                            "Compare"
                        ]
                    ]
                }
            },
            "softmax_39": {
                "input": {
                    "value": "x_attn_weights.reshape(x_tensor.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "input": {
                    "value": "x_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_tensor.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "input": {
                    "value": "x_ks[i] + y_k[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/baselines/lf_rnn.py": {
        "torch": {
            "ModuleDict_20": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'t': nn.LSTM(input_size=feature_sizes[0], hidden_size=feature_sizes[0], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, bidirectional=bi), 'a': nn.LSTM(input_size=feature_sizes[1], hidden_size=feature_sizes[1], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, bidirectional=bi), 'v': nn.LSTM(input_size=feature_sizes[2], hidden_size=feature_sizes[2], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, bidirectional=bi)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_46": {
                "variable": {
                    "value": "self.affines",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'t': nn.Sequential(nn.Linear(linear_in_sizes[0], linear_in_sizes[0] // 2), nn.ReLU(), nn.Linear(linear_in_sizes[0] // 2, num_classes)), 'a': nn.Sequential(nn.Linear(linear_in_sizes[1], linear_in_sizes[1] // 2), nn.ReLU(), nn.Linear(linear_in_sizes[1] // 2, num_classes)), 'v': nn.Sequential(nn.Linear(linear_in_sizes[2], linear_in_sizes[2] // 2), nn.ReLU(), nn.Linear(linear_in_sizes[2] // 2, num_classes))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.weighted_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.mods)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_features.split(audio_features_lens, dim=0)",
                            "Call"
                        ],
                        [
                            "[padTensor(s, max_len) for s in audio_features]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(audio_features, dim=1)",
                            "Call"
                        ],
                        [
                            "audio_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_features.split(img_features_lens, dim=0)",
                            "Call"
                        ],
                        [
                            "[padTensor(s, max_len) for s in img_features]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(img_features, dim=1)",
                            "Call"
                        ],
                        [
                            "img_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "input_size": {
                    "value": "feature_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "feature_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if num_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_28": {
                "input_size": {
                    "value": "feature_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "feature_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if num_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_35": {
                "input_size": {
                    "value": "feature_sizes[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "feature_sizes[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args['hfc_sizes']",
                            "Subscript"
                        ],
                        [
                            "np.array(feature_sizes)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if num_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "nn.Linear(linear_in_sizes[0], linear_in_sizes[0] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "nn.Linear(linear_in_sizes[1], linear_in_sizes[1] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "nn.Linear(linear_in_sizes[2], linear_in_sizes[2] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "linear_in_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_in_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "linear_in_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "linear_in_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_in_sizes[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "linear_in_sizes[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "linear_in_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_in_sizes[2] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "linear_in_sizes[2] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_98": {
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/baselines/lf_transformer.py": {
        "torch": {
            "ModuleDict_18": {
                "variable": {
                    "value": "self.transformers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'t': WrappedTransformerEncoder(dim=feature_sizes[0], num_layers=nlayers, num_heads=4), 'a': WrappedTransformerEncoder(dim=feature_sizes[1], num_layers=nlayers, num_heads=2), 'v': WrappedTransformerEncoder(dim=feature_sizes[2], num_layers=nlayers, num_heads=5)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_36": {
                "variable": {
                    "value": "self.affines",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'t': nn.Sequential(nn.Linear(feature_sizes[0], feature_sizes[0] // 2), nn.ReLU(), nn.Linear(feature_sizes[0] // 2, num_classes)), 'a': nn.Sequential(nn.Linear(feature_sizes[1], feature_sizes[1] // 2), nn.ReLU(), nn.Linear(feature_sizes[1] // 2, num_classes)), 'v': nn.Sequential(nn.Linear(feature_sizes[2], feature_sizes[2] // 2), nn.ReLU(), nn.Linear(feature_sizes[2] // 2, num_classes))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.weighted_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.mods)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.Linear(feature_sizes[0], feature_sizes[0] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.Linear(feature_sizes[1], feature_sizes[1] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "nn.Linear(feature_sizes[2], feature_sizes[2] // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "feature_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "feature_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "feature_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_sizes[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "feature_sizes[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "feature_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_sizes[2] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "feature_sizes[2] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_emotions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/e2e.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=64, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.v_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.a_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 8 * 2, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.v_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.t_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_cls_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.a_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.weighted_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.mod)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mtcnn(imgs)",
                            "Call"
                        ],
                        [
                            "[self.normalize(face) for face in faces]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(faces, dim=0).to(device=self.device)",
                            "Call"
                        ],
                        [
                            "self.V(faces)",
                            "Call"
                        ],
                        [
                            "self.v_flatten(faces.flatten(start_dim=1))",
                            "Call"
                        ],
                        [
                            "self.v_transformer(faces, imgs_lens, get_cls=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "512 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "512 * 8 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "imgs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_96": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/e2e_t.py": {
        "torch": {}
    },
    "src/models/sparse_e2e.py": {
        "torch": {
            "sort_14": {
                "variable": {
                    "value": "(sorted_t_flatten, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.flatten(start_dim=1).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_15": {
                "variable": {
                    "value": "sorted_t_flatten_cum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_t_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(t_flatten, descending=True, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleDict_51": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'low_level': nn.Sequential(nn.Conv2d(in_channels=3, out_channels=64, kernel_size=5, padding=2), nn.BatchNorm2d(64), nn.ReLU(), nn.MaxPool2d(kernel_size=2, stride=2), VggBasicBlock(in_planes=64, out_planes=64), VggBasicBlock(in_planes=64, out_planes=64)), 'sparse_layers': nn.ModuleList([scn.Sequential(scn.SparseVggNet(2, 64, [['C', 128], ['C', 128], ['MP', 2, 2]])), scn.Sequential(scn.SparseVggNet(2, 128, [['C', 256], ['C', 256], ['MP', 2, 2]])), scn.Sequential(scn.SparseVggNet(2, 256, [['C', 512], ['C', 512], ['MP', 2, 2]]), scn.SparseToDense(2, 512))]), 'attn_layers': nn.ModuleList([CrossModalAttentionLayer(k=64, x_channels=64, y_size=text_cls_dim, spatial=True), SparseCrossModalAttentionLayer(k=128, x_channels=128, y_size=text_cls_dim, sparse_threshold=self.threshold), SparseCrossModalAttentionLayer(k=256, x_channels=256, y_size=text_cls_dim, sparse_threshold=self.threshold)])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_86": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'low_level': nn.Sequential(nn.Conv2d(in_channels=1, out_channels=64, kernel_size=5, padding=2), nn.BatchNorm2d(64), nn.ReLU(), nn.MaxPool2d(kernel_size=2, stride=2), VggBasicBlock(in_planes=64, out_planes=64), VggBasicBlock(in_planes=64, out_planes=64)), 'sparse_layers': nn.ModuleList([scn.Sequential().add(scn.SparseVggNet(2, 64, [['C', 128], ['C', 128], ['MP', 2, 2]])), scn.Sequential().add(scn.SparseVggNet(2, 128, [['C', 256], ['C', 256], ['MP', 2, 2]])), scn.Sequential().add(scn.SparseVggNet(2, 256, [['C', 512], ['C', 512], ['MP', 2, 2]])).add(scn.SparseToDense(2, 512))]), 'attn_layers': nn.ModuleList([CrossModalAttentionLayer(k=64, x_channels=64, y_size=text_cls_dim, spatial=True), SparseCrossModalAttentionLayer(k=128, x_channels=128, y_size=text_cls_dim, sparse_threshold=self.threshold), SparseCrossModalAttentionLayer(k=256, x_channels=256, y_size=text_cls_dim, sparse_threshold=self.threshold)])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.v_sparse_input_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[scn.InputLayer(2, self.V['sparse_layers'][0].input_spatial_size(torch.LongTensor([12, 12]))), scn.InputLayer(2, self.V['sparse_layers'][1].input_spatial_size(torch.LongTensor([6, 6]))), scn.InputLayer(2, self.V['sparse_layers'][2].input_spatial_size(torch.LongTensor([3, 3])))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.a_sparse_input_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[scn.InputLayer(2, self.A['sparse_layers'][0].input_spatial_size(torch.LongTensor([32, 8]))), scn.InputLayer(2, self.A['sparse_layers'][1].input_spatial_size(torch.LongTensor([16, 4]))), scn.InputLayer(2, self.A['sparse_layers'][2].input_spatial_size(torch.LongTensor([8, 2])))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.v_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.a_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 8 * 2, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.t_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_cls_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.v_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.a_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.weighted_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.mod)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mtcnn(imgs)",
                            "Call"
                        ],
                        [
                            "[self.normalize(face) for face in faces]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(faces, dim=0).to(device=self.device)",
                            "Call"
                        ],
                        [
                            "self.V['low_level'](faces)",
                            "Call"
                        ],
                        [
                            "self.v_flatten(faces.flatten(start_dim=1))",
                            "Call"
                        ],
                        [
                            "self.v_transformer(faces, imgs_lens, get_cls=True)",
                            "Call"
                        ],
                        [
                            "sparse_layer(sparse_input)",
                            "Call"
                        ],
                        [
                            "sparse_layer(sparse_input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_t_flatten_cum[i] < cdf",
                            "Compare"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "512 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "512 * 8 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "trans_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['trans_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "modules": {
                    "value": "[scn.Sequential(scn.SparseVggNet(2, 64, [['C', 128], ['C', 128], ['MP', 2, 2]])), scn.Sequential(scn.SparseVggNet(2, 128, [['C', 256], ['C', 256], ['MP', 2, 2]])), scn.Sequential(scn.SparseVggNet(2, 256, [['C', 512], ['C', 512], ['MP', 2, 2]]), scn.SparseToDense(2, 512))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "modules": {
                    "value": "[CrossModalAttentionLayer(k=64, x_channels=64, y_size=text_cls_dim, spatial=True), SparseCrossModalAttentionLayer(k=128, x_channels=128, y_size=text_cls_dim, sparse_threshold=self.threshold), SparseCrossModalAttentionLayer(k=256, x_channels=256, y_size=text_cls_dim, sparse_threshold=self.threshold)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=64, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "modules": {
                    "value": "[scn.Sequential().add(scn.SparseVggNet(2, 64, [['C', 128], ['C', 128], ['MP', 2, 2]])), scn.Sequential().add(scn.SparseVggNet(2, 128, [['C', 256], ['C', 256], ['MP', 2, 2]])), scn.Sequential().add(scn.SparseVggNet(2, 256, [['C', 512], ['C', 512], ['MP', 2, 2]])).add(scn.SparseToDense(2, 512))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "modules": {
                    "value": "[CrossModalAttentionLayer(k=64, x_channels=64, y_size=text_cls_dim, spatial=True), SparseCrossModalAttentionLayer(k=128, x_channels=128, y_size=text_cls_dim, sparse_threshold=self.threshold), SparseCrossModalAttentionLayer(k=256, x_channels=256, y_size=text_cls_dim, sparse_threshold=self.threshold)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_226": {
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "imgs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_168": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/transformer_encoder.py": {
        "torch": {
            "TransformerEncoderLayer_11": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(d_model=dim, nhead=num_heads)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_13": {
                "variable": {
                    "value": "self.cls_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_19": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_emb, inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[False] * (l + int(get_cls)) + [True] * (max_len - l) for l in lens]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask).to(device=inputs.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "stack_31": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(inputs.split(lens, dim=0))",
                            "Call"
                        ],
                        [
                            "[padTensor(inp, max_len) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.prepend_cls(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(src=inputs, src_key_padding_mask=mask)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/vgg_block.py": {
        "torch": {
            "Conv2d_6": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_7": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_8": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainers/basetrainer.py": {
        "torch": {
            "save_82": {
                "obj": {
                    "value": "self.best_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.saving_path, 'models', self.get_saving_file_name())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/emotiontrainer.py": {
        "torch": {
            "cat_181": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "total_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_Y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_Y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "total_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_Y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_Y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_167": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_211": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__174": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "loss_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[n / len(labels) for n in nums]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(t, torch.zeros(targetLen - oriLen, dim).to(t.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "targetLen - oriLen",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}