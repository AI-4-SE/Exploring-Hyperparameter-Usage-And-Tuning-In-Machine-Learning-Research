{
    "lib/mirror/retrieval/deep_query.py": {
        "sklearn": {
            "PCA_396": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_286": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PCA_292": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KMeans_209": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "constant_119": {
                "variable": {
                    "value": "num_regions",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_regions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_regions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "feat.shape[0]",
                            "Subscript"
                        ],
                        [
                            "read_feature(feature_list, euclidean_dist, rmac, mac)",
                            "Call"
                        ],
                        [
                            "num_regions",
                            "Method Argument"
                        ],
                        [
                            "num_regions",
                            "Method Argument"
                        ],
                        [
                            "num_regions",
                            "Method Argument"
                        ],
                        [
                            "num_regions",
                            "Method Argument"
                        ],
                        [
                            "num_regions",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "reshape_query_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(query_features, dtype=tf.float32, name='query_features')",
                            "Call"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_query, num_regions, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_148": {
                "variable": {
                    "value": "res_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: body(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "reshape_query_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(query_features, (num_query, num_regions, feat_dim))",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(top_k, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "query_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "query_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(query_features, dtype=tf.float32, name='query_features')",
                            "Call"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "query_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_165": {
                "variable": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(db_features, dtype=tf.float32, name='db_features')",
                            "Call"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "db_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_174": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "norm_db",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(db_features * db_features, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "max_rv_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(tf.reshape(dist_mat, [-1, num_regions]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.reshape(dist_mat, [-1, num_regions]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_regions, num_db]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_152": {
                "variable": {
                    "value": "(sorted_dist, sorted_indx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-res_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(top_k, tf.int32))",
                            "Call"
                        ],
                        [
                            "top",
                            "variable"
                        ],
                        [
                            "num_db",
                            "variable"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_155": {
                "variable": {
                    "value": "(sorted_dist, sorted_indx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: body(x), reshape_query_features, back_prop=False)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(top_k, tf.int32))",
                            "Call"
                        ],
                        [
                            "top",
                            "variable"
                        ],
                        [
                            "num_db",
                            "variable"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "sorted_indx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sorted_indx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-res_dist, top_k)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(res_dist, top_k, name='dist')",
                            "Call"
                        ],
                        [
                            "tf.cast(sorted_indx, tf.float32, name='rank')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rank",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(db_features, dtype=tf.float32, name='db_features')",
                            "Call"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "norm_query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(single_query * single_query, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_136": {
                "variable": {
                    "value": "dist_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(dist_mat, [-1, num_regions])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "single_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_feat[i * num_regions:(i + 1) * num_regions]",
                            "Subscript"
                        ],
                        [
                            "single_query + weight * db_feat[inds[j] * num_regions:(inds[j] + 1) * num_regions]",
                            "BinOp"
                        ],
                        [
                            "single_query",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(db_features, dtype=tf.float32, name='db_features')",
                            "Call"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_139": {
                "variable": {
                    "value": "dist_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(dist_mat, [-1, num_regions])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_142": {
                "variable": {
                    "value": "final_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_rv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dist_seg, [num_regions, num_db])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "final_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_rv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dist_seg, [num_regions, num_db])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(top_k, tf.int32))",
                            "Call"
                        ],
                        [
                            "top",
                            "variable"
                        ],
                        [
                            "num_db",
                            "variable"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_176": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "query_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(query_features, dtype=tf.float32, name='query_features')",
                            "Call"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ],
                        [
                            "query_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_121": {
                "input": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(db_features, dtype=tf.float32, name='db_features')",
                            "Call"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "db_features * db_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "single_query * single_query",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "a": {
                    "value": "norm_db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(db_features * db_features, axis=1), [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_query - 2 * tf.matmul(single_query, db_features, transpose_b=True) + tf.transpose(norm_db)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(single_query, db_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_regions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_query - 2 * tf.matmul(single_query, db_features, transpose_b=True) + tf.transpose(norm_db)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(single_query, db_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_regions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "a": {
                    "value": "single_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_feat[i * num_regions:(i + 1) * num_regions]",
                            "Subscript"
                        ],
                        [
                            "single_query + weight * db_feat[inds[j] * num_regions:(inds[j] + 1) * num_regions]",
                            "BinOp"
                        ],
                        [
                            "single_query",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "db_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(db_features, dtype=tf.float32, name='db_features')",
                            "Call"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ],
                        [
                            "db_features",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/mirror/cnn_wrapper/network.py": {
        "tensorflow": {
            "pad_41": {
                "variable": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[PAD(0), PAD(padding), PAD(padding), PAD(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_373": {
                "variable": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_410": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse or reuse",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.bn_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_428": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_430": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(input_tensor), axis=1, keep_dims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_431": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(input_tensor), axis=1, keep_dims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_434": {
                "variable": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(num_elem, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_435": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(variance)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stddev, min_stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.cast(num_elem, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_437": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(input_tensor, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_438": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(input_tensor, center=center, scale=scale, fused=True, training=self.training, trainable=self.trainable, reuse=self.reuse or reuse, epsilon=self.bn_epsilon, gamma_regularizer=None, beta_regularizer=None, name=name)",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.subtract(input_tensor, mean)",
                            "Call"
                        ],
                        [
                            "tf.div(output, stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(variance)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stddev, min_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_44": {
                "variable": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_304": {
                "features": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pooling2d_316": {
                "inputs": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_pooling2d_331": {
                "inputs": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_346": {
                "x": {
                    "value": "tf.layers.average_pooling2d(tf.square(padded_input), pool_size=pool_size, strides=strides, padding=padding_type, name=name) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "local_response_normalization_355": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_364": {
                "values": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensors",
                            "Method Argument"
                        ],
                        [
                            "input_tensors",
                            "Method Argument"
                        ],
                        [
                            "input_tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_368": {
                "inputs": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensors",
                            "Method Argument"
                        ],
                        [
                            "input_tensors",
                            "Method Argument"
                        ],
                        [
                            "input_tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_374": {
                "inputs": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_out",
                            "Method Argument"
                        ],
                        [
                            "num_out",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "biased",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu if relu else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse or reuse",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self.regularizer if biased else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_404": {
                "logits": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_443": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_451": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_455": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_459": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_511": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_516": {
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv3d_transpose_276": {
                "input": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_401": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_429": {
                "input_tensor": {
                    "value": "tf.square(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_429": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_434": {
                "x": {
                    "value": "num_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.get_shape()[1].value * input_tensor.get_shape()[3].value",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_472": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_493": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(phi, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv3d_499": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_504": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta, phi, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(f)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim1, dim2, dim3, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_509": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "variable"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_214": {
                "input": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "separable_conv2d_216": {
                "input": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_278": {
                "input": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_pooling2d_346": {
                "inputs": {
                    "value": "tf.square(padded_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_476": {
                "name_or_scope": {
                    "value": "theta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_481": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_484": {
                "name_or_scope": {
                    "value": "phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_489": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input_tensor, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input_tensor, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(phi, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_495": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta, phi, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict[op_name].iteritems()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_219": {
                "input": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_347": {
                "x": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input_tensor, [PAD(0), PAD(padding), PAD(padding), PAD(padding), PAD(0)], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "caffe_like_padding(input_tensor, padding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/mirror/retrieval/image_preprocessing.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_12": {
                "variable": {
                    "value": "(bbox_begin, bbox_size, bbox_for_draw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.image.extract_jpeg_shape(img_buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_coverage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_object_coverage",
                            "Method Argument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "[aspect_change, 1.0 / aspect_change]",
                    "type": "List",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_image_bounding_box",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_21": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.sample_distorted_bounding_box(tf.image.extract_jpeg_shape(img_buffer), seed=seed, bounding_boxes=bbox, min_object_covered=min_object_coverage, aspect_ratio_range=[aspect_change, 1.0 / aspect_change], use_image_if_no_bounding_boxes=True, name='sample_image_bounding_box')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_22": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.sample_distorted_bounding_box(tf.image.extract_jpeg_shape(img_buffer), seed=seed, bounding_boxes=bbox, min_object_covered=min_object_coverage, aspect_ratio_range=[aspect_change, 1.0 / aspect_change], use_image_if_no_bounding_boxes=True, name='sample_image_bounding_box')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_23": {
                "variable": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_24": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer",
                            "Method Argument"
                        ],
                        [
                            "img_buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_25": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_30": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer",
                            "Method Argument"
                        ],
                        [
                            "img_buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_32": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_49": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(height * scale_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(width * scale_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_84": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "add_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "add_random",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : add_randomness(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_86": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "spec.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_35": {
                "variable": {
                    "value": "smaller_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.ceil(height * scale_ratio), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.ceil(width * scale_ratio), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_contrast_77": {
                "variable": {
                    "value": "random_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "random_saturation",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "random_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_contrast(img, 0.5, 1.5)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_79": {
                "variable": {
                    "value": "random_hue",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "random_saturation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_saturation(random_contrast, 0.5, 1.5)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_80": {
                "variable": {
                    "value": "random_brightness_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "random_hue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(random_saturation, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_flip_left_right_81": {
                "variable": {
                    "value": "random_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "random_brightness_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(random_hue, 0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_jpeg_shape_13": {
                "contents": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer",
                            "Method Argument"
                        ],
                        [
                            "img_buffer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_33": {
                "x": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_44": {
                "variable": {
                    "value": "smaller_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.ceil(height * scale_ratio), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.ceil(width * scale_ratio), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_49": {
                "x": {
                    "value": "height * scale_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_50": {
                "x": {
                    "value": "width * scale_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(img_buffer, crop_window, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_buffer, channels=channel)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, img_size, img_size)",
                            "Call"
                        ],
                        [
                            "tf.cond(add_random, lambda : add_randomness(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img, spec.mean)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[crop_top, crop_left, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[crop_height, crop_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/mirror/retrieval/inference.py": {
        "tensorflow": {
            "DEFINE_string_40": {
                "name": {
                    "value": "gl3d_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to GL3D dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "ckpt_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./ckpt/model.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "img_list",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to image list.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "img_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Input image size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "model_data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to model data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "output_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "pooling method: L2, Max, AVE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "googlenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "network tyep: googlenet or half_googlenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "rmac_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "RMAC steps. e.g., 1,3,5 for three scales,\\n                            1 for single scale (equals to MAC)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "oxford_gt",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "extract oxford query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "log_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to store the log.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "save_suffix",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": ".npy",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "save suffix.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of gpus in a machine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_106": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reset_default_graph_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_103": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_121": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_122": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "mark_flags_as_required_233": {
                "flag_names": {
                    "value": "['rmac_step', 'img_list']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_109": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_111": {
                "device_name": {
                    "value": "'/gpu:%d' % device_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "local_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/mirror/retrieval/model.py": {
        "tensorflow": {
            "placeholder_103": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, FLAGS.img_size, FLAGS.img_size, spec.channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "data_iterator[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_152": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat - offset) * mask + offset",
                            "BinOp"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[feat.get_shape()[1].value, feat.get_shape()[2].value]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(feat, kernel_size, 1, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(vec, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vec, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_327": {
                "variable": {
                    "value": "input_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batch_sample[0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_328": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_sample[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_367": {
                "variable": {
                    "value": "input_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batch_sample[:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_474": {
                "variable": {
                    "value": "dataset_anc_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "idx_record.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "idx_record[:, 0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_475": {
                "variable": {
                    "value": "dataset_pos_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "idx_record.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "idx_record[:, 1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_476": {
                "variable": {
                    "value": "dataset_neg_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "idx_record.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "idx_record[:, 2].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_477": {
                "variable": {
                    "value": "mask_record_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mask_record.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "mask_record.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_147": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat - offset) * mask + offset",
                            "BinOp"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_bilinear_148": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(mask, (7, 7))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_mask, [-1, 28, 14, 1])",
                            "Call"
                        ],
                        [
                            "one_batch_mask[i]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(mask, [28, 14])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_155": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(feat, kernel_size, 1, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(vec, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vec, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "norm_anc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_anc * feat_anc, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "norm_easy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_easy * feat_easy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "norm_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_hard * feat_hard, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "variable": {
                    "value": "easy_dist_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_anc - 2 * tf.matmul(feat_anc, feat_easy, transpose_b=True) + tf.transpose(norm_easy) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_204": {
                "variable": {
                    "value": "hard_dist_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_anc - 2 * tf.matmul(feat_anc, feat_hard, transpose_b=True) + tf.transpose(norm_hard) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "norm_anc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_anc * feat_anc, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "norm_easy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_easy * feat_easy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "norm_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(feat_hard * feat_hard, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_337": {
                "variable": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_338": {
                "variable": {
                    "value": "feat_easy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[spec.batch_size, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_339": {
                "variable": {
                    "value": "feat_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[2 * spec.batch_size, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_375": {
                "variable": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_376": {
                "variable": {
                    "value": "feat_easy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[spec.batch_size, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_377": {
                "variable": {
                    "value": "feat_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feat_stage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ],
                        [
                            "feature_tower.get_output_by_name(feat_name)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[2 * spec.batch_size, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[spec.batch_size, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_422": {
                "variable": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_list",
                            "Method Argument"
                        ],
                        [
                            "image_list",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "read_file_423": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.string_join([dataset_root, img_path])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_image_424": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(tf.string_join([dataset_root, img_path]))",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_530": {
                "name": {
                    "value": "act.op.name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "endpoints.values()",
                            "Call"
                        ],
                        [
                            "act",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_531": {
                "name": {
                    "value": "act.op.name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_556": {
                "variable": {
                    "value": "(batch_size, feat_h, feat_w, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(feat_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_586": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rvec, scale_rvec], axis=-1)",
                            "Call"
                        ],
                        [
                            "_rmac(feat_map, rmac_step, reduce_method, deploy=True)",
                            "Call"
                        ],
                        [
                            "multi_scale_feature(rvec, fn, image, output_tensor_name, rmac_step, reduce_method, deploy=True)",
                            "Call"
                        ],
                        [
                            "_rmac(feat_map, rmac_step, reduce_method, deploy=False)",
                            "Call"
                        ],
                        [
                            "multi_scale_feature(rvec, fn, image, output_tensor_name, rmac_step, reduce_method, deploy=False)",
                            "Call"
                        ],
                        [
                            "gen_nn_ops._avg_pool(feat_map, [1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rvec, [tf.shape(feat_map)[0], -1, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(rvec, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.sqrt(gen_nn_ops._avg_pool(tf.square(feat_map), [-1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feat_map, [1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "rvec",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(feat_map)[0], -1, feat_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_587": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rvec, scale_rvec], axis=-1)",
                            "Call"
                        ],
                        [
                            "_rmac(feat_map, rmac_step, reduce_method, deploy=True)",
                            "Call"
                        ],
                        [
                            "multi_scale_feature(rvec, fn, image, output_tensor_name, rmac_step, reduce_method, deploy=True)",
                            "Call"
                        ],
                        [
                            "_rmac(feat_map, rmac_step, reduce_method, deploy=False)",
                            "Call"
                        ],
                        [
                            "multi_scale_feature(rvec, fn, image, output_tensor_name, rmac_step, reduce_method, deploy=False)",
                            "Call"
                        ],
                        [
                            "gen_nn_ops._avg_pool(feat_map, [1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rvec, [tf.shape(feat_map)[0], -1, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(rvec, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.sqrt(gen_nn_ops._avg_pool(tf.square(feat_map), [-1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feat_map, [1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "rvec",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_40": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rvec, scale_rvec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_165": {
                "variable": {
                    "value": "stack_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[easy_dist] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_169": {
                "variable": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "stack_mat - dist_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "count_nonzero_170": {
                "variable": {
                    "value": "tmp_acc_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.relu(diff_col)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_171": {
                "variable": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(diff_col) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_176": {
                "variable": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.matrix_transpose(stack_mat) - dist_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "count_nonzero_177": {
                "variable": {
                    "value": "tmp_acc_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.relu(diff_row)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_178": {
                "variable": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(diff_row) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "ret_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_col + loss_row",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(batch_sample[3], tf.float32)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 14, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "variable": {
                    "value": "hard_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(feat_anc - feat_hard), axis=1) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_220": {
                "variable": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "easy_dist - hard_dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_221": {
                "variable": {
                    "value": "diff_hard_log_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(diff_hard) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "variable": {
                    "value": "hard_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff_hard_log_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.exp(diff_hard) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_224": {
                "variable": {
                    "value": "tmp_acc_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.relu(diff_hard)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_233": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_237": {
                "variable": {
                    "value": "stack_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[easy_dist] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_239": {
                "variable": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "margin + stack_mat - dist_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "count_nonzero_242": {
                "variable": {
                    "value": "tmp_acc_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(stack_mat - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_col) + 1)",
                            "Call"
                        ],
                        [
                            "diff_col - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + stack_mat - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_col, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_246": {
                "variable": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "margin + tf.matrix_transpose(stack_mat) - dist_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "count_nonzero_248": {
                "variable": {
                    "value": "tmp_acc_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.matrix_transpose(stack_mat) - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_row) + 1)",
                            "Call"
                        ],
                        [
                            "diff_row - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + tf.matrix_transpose(stack_mat) - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_row, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_289": {
                "variable": {
                    "value": "hard_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(feat_anc - feat_hard)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_290": {
                "variable": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hard_margin + easy_dist - hard_dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_292": {
                "variable": {
                    "value": "hard_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(easy_dist - hard_dist, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(hard_margin + easy_dist - hard_dist, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_294": {
                "variable": {
                    "value": "tmp_acc_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(easy_dist - hard_dist, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(hard_margin + easy_dist - hard_dist, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_332": {
                "name": {
                    "value": "feature_tower",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_360": {
                "*inputs": {
                    "value": "feature_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_370": {
                "name": {
                    "value": "feature_tower",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_396": {
                "*inputs": {
                    "value": "feature_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "read_file_505": {
                "variable": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(image_list, idx)",
                            "Call"
                        ],
                        [
                            "img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_510": {
                "name": {
                    "value": "data_queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_531": {
                "value": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "endpoints.values()",
                            "Call"
                        ],
                        [
                            "act",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_535": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_591": {
                "variable": {
                    "value": "all_rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_rvec, rvec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_197": {
                "input_tensor": {
                    "value": "feat_anc * feat_anc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "input_tensor": {
                    "value": "feat_easy * feat_easy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "feat_hard * feat_hard",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "feat_anc * feat_anc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_265": {
                "input_tensor": {
                    "value": "feat_easy * feat_easy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "feat_hard * feat_hard",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "a": {
                    "value": "norm_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(feat_easy * feat_easy, axis=1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(feat_easy * feat_easy, axis=1), [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_272": {
                "a": {
                    "value": "norm_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(feat_hard * feat_hard, axis=1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(feat_hard * feat_hard, axis=1), [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_426": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_504": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_556": {
                "input": {
                    "value": "feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "feat_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_578": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gen_nn_ops._avg_pool(tf.square(feat_map), [-1, k_h, k_w, 1], [1, s_h, s_w, 1], 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_167": {
                "values": {
                    "value": "[tf.log(2.0)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_170": {
                "features": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(stack_mat - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_col) + 1)",
                            "Call"
                        ],
                        [
                            "diff_col - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + stack_mat - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_col, zero_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_173": {
                "input_tensor": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(stack_mat - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_col) + 1)",
                            "Call"
                        ],
                        [
                            "diff_col - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + stack_mat - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_col, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_177": {
                "features": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.matrix_transpose(stack_mat) - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_row) + 1)",
                            "Call"
                        ],
                        [
                            "diff_row - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + tf.matrix_transpose(stack_mat) - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_row, zero_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.matrix_transpose(stack_mat) - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_row) + 1)",
                            "Call"
                        ],
                        [
                            "diff_row - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + tf.matrix_transpose(stack_mat) - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_row, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_224": {
                "features": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(easy_dist - hard_dist, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(hard_margin + easy_dist - hard_dist, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(stack_mat - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_col) + 1)",
                            "Call"
                        ],
                        [
                            "diff_col - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + stack_mat - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_col, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_249": {
                "input_tensor": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.matrix_transpose(stack_mat) - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_row) + 1)",
                            "Call"
                        ],
                        [
                            "diff_row - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + tf.matrix_transpose(stack_mat) - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_row, zero_diag)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_252": {
                "input_tensor": {
                    "value": "loss_col + loss_row",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_289": {
                "x": {
                    "value": "feat_anc - feat_hard",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_582": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "feat_map",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_171": {
                "x": {
                    "value": "diff_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(stack_mat - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_col) + 1)",
                            "Call"
                        ],
                        [
                            "diff_col - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + stack_mat - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_col, zero_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_transpose_176": {
                "a": {
                    "value": "stack_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([easy_dist] * batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([easy_dist] * batch_size, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_178": {
                "x": {
                    "value": "diff_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.matrix_transpose(stack_mat) - dist_mat, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(diff_row) + 1)",
                            "Call"
                        ],
                        [
                            "diff_row - omit",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(margin + tf.matrix_transpose(stack_mat) - dist_mat, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(diff_row, zero_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_203": {
                "a": {
                    "value": "norm_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(feat_easy * feat_easy, axis=1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(feat_easy * feat_easy, axis=1), [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_205": {
                "a": {
                    "value": "norm_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(feat_hard * feat_hard, axis=1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(feat_hard * feat_hard, axis=1), [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "tf.square(feat_anc - feat_hard)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_221": {
                "x": {
                    "value": "diff_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(easy_dist - hard_dist, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(hard_margin + easy_dist - hard_dist, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_270": {
                "a": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_anc, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_anc, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_easy, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_easy, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_easy",
                            "Method Argument"
                        ],
                        [
                            "feat_easy",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_272": {
                "a": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_anc, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_anc, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_hard, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_hard, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [2 * spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [2 * spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_hard",
                            "Method Argument"
                        ],
                        [
                            "feat_hard",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_512": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_586": {
                "input": {
                    "value": "feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "feat_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_219": {
                "x": {
                    "value": "feat_anc - feat_hard",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matrix_transpose_246": {
                "a": {
                    "value": "stack_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([easy_dist] * batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([easy_dist] * batch_size, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_578": {
                "x": {
                    "value": "feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "net.get_output_by_name(output_tensor_name)",
                            "Call"
                        ],
                        [
                            "feat_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_167": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_anc, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_anc, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_easy, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_easy, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_easy",
                            "Method Argument"
                        ],
                        [
                            "feat_easy",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "a": {
                    "value": "feat_anc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_anc, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_anc, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [0, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ],
                        [
                            "feat_anc",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_reduce(feat_hard, norm=False)",
                            "Call"
                        ],
                        [
                            "feature_reduce(feat_hard, norm=True)",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [2 * spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(feat_stage, [2 * spec.batch_size, 0, 0, 0], [spec.batch_size, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "feat_hard",
                            "Method Argument"
                        ],
                        [
                            "feat_hard",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/mirror/retrieval/train.py": {
        "tensorflow": {
            "DEFINE_integer_29": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "np_model_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "numpy model parameter path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "log_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./tf_log",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to store the log.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "save_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "gl3d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to gl3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "test_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the every number of steps to run test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of gpus in a machine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "half_googlenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "network used, half_googlenet or googlenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_43": {
                "name": {
                    "value": "base_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Base learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "max_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max training iteration.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "display",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Interval of loginfo display.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "stepvalue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "snapshot",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to save the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_53": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_55": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "momentum in when using SGD with momentum solver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_57": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Fraction of regularization term.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_80": {
                "variable": {
                    "value": "weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_98": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_100": {
                "variable": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "FLAGS.stepvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "FLAGS.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_133": {
                "variable": {
                    "value": "bn_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_157": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_159": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_106": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate=FLAGS.base_lr, global_step=global_step, decay_steps=FLAGS.stepvalue, decay_rate=FLAGS.gamma, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_137": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_loss",
                            "variable"
                        ],
                        [
                            "final_loss + loss[i][0]",
                            "BinOp"
                        ],
                        [
                            "final_loss + loss[i][next_loss]",
                            "BinOp"
                        ],
                        [
                            "final_loss + loss[i][next_loss]",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "finetuned_layer_vars + new_layers_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_142": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate=FLAGS.base_lr, global_step=global_step, decay_steps=FLAGS.stepvalue, decay_rate=FLAGS.gamma, name='lr')",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_172": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_191": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mark_flags_as_required_294": {
                "flag_names": {
                    "value": "['gl3d']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_112": {
                "name": {
                    "value": "'EASY_loss' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_113": {
                "name": {
                    "value": "'accuracy' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_134": {
                "control_inputs": {
                    "value": "bn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_147": {
                "variable": {
                    "value": "opt_new",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "10 * lr_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_149": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_gradients(zip(grads1, finetuned_layer_vars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, train_op2)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_new.apply_gradients(zip(grads2, new_layers_vars), global_step=global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_152": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_list",
                            "variable"
                        ],
                        [
                            "weights_list",
                            "variable"
                        ]
                    ]
                }
            },
            "FileWriter_203": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "net_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_type",
                            "Method Argument"
                        ],
                        [
                            "net_type",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_208": {
                "variable": {
                    "value": "param_count_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_prod(tf.shape(v)) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "scalar_120": {
                "name": {
                    "value": "'weak_loss' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss[i][next_loss]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_121": {
                "name": {
                    "value": "'weak_accuracy' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[i][next_loss]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_128": {
                "name": {
                    "value": "'hard_loss' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss[i][next_loss]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_129": {
                "name": {
                    "value": "'hard_accuracy' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[i][next_loss]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "parameter_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "first_layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv1_7x7_s2'",
                            "str"
                        ],
                        [
                            "'conv1_1'",
                            "str"
                        ],
                        [
                            "'conv1'",
                            "str"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "get_variable_scope_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_188": {
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools.tf.put_kernels_on_grid(weights)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_208": {
                "input_tensor": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_208": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/mirror/tools/tf.py": {
        "tensorflow": {
            "reduce_min_38": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_39": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "norm_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norm_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel - x_min) / (x_max - x_min)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(norm_kernel, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(norm_kernel, (display_size, display_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(3, 0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_46": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel - x_min) / (x_max - x_min)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(norm_kernel, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(norm_kernel, (display_size, display_size))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.constant([[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "x_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(norm_kernel, tf.constant([[0, 0], [pad, pad], [pad, pad], [0, 0]]), mode='CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([grid_x, y_dim * grid_y, x_dim, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "x_3",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_1, tf.stack([grid_x, y_dim * grid_y, x_dim, channels]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "x_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x_2, (0, 2, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([1, x_dim * grid_x, y_dim * grid_y, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "x_5",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_3, tf.stack([1, x_dim * grid_x, y_dim * grid_y, channels]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 1, 3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "x_6",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x_4, (2, 1, 3, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(3, 0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "all_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "saver_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[embedding_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_118": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_46": {
                "value": {
                    "value": "[[0, 0], [pad, pad], [pad, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "[grid_x, y_dim * grid_y, x_dim, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_57": {
                "values": {
                    "value": "[1, x_dim * grid_x, y_dim * grid_y, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_120": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projector.ProjectorConfig()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "write_graph_121": {
                "graph_or_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "model_name + '.pbtxt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_text": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphDef_156": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GFile_155": {
                "name": {
                    "value": "pb_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pb_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_160": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}