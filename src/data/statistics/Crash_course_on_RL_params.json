{
    "cartpole/pg_on_cartpole.py": {
        "tensorflow": {
            "create_file_writer_17": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "STORE_PATH + f\"/data_{dt.datetime.now().strftime('%d%m%Y%H%M')}\"",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_70": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tot_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(rewards)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(agent_par['num_episodes'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cartpole/pgrl.py": {
        "tensorflow": {
            "Sequential_13": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Dense(self.hparams['hidden_size'], input_dim=self.hparams['num_state'], activation='relu', kernel_initializer=keras.initializers.he_normal(), dtype='float64'), keras.layers.Dense(self.hparams['hidden_size'], activation='relu', kernel_initializer=keras.initializers.he_normal(), dtype='float64'), keras.layers.Dense(self.hparams['num_actions'], activation='softmax', dtype='float64')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_categorical_40": {
                "variable": {
                    "value": "target_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.hparams['num_actions']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_seed_10": {
                "seed": {
                    "value": "hparams['Rand_Seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dense_14": {
                "units": {
                    "value": "self.hparams['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.hparams['num_state']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "self.hparams['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "self.hparams['num_actions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "epsilon": {
                    "value": "self.hparams['adam_eps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.hparams['learning_rate_adam']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "he_normal_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cartpole/policy_iteration.py": {
        "tensorflow": {
            "Sequential_20": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Dense(self.hparams['hidden_size'], input_dim=self.hparams['num_state'], activation='relu', kernel_initializer=keras.initializers.he_normal(), dtype='float64'), keras.layers.Dense(self.hparams['hidden_size'], activation='relu', kernel_initializer=keras.initializers.he_normal(), dtype='float64'), keras.layers.Dense(self.hparams['hidden_size'], activation='relu', kernel_initializer=keras.initializers.he_normal(), dtype='float64'), keras.layers.Dense(self.hparams['num_actions'], dtype='float64')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_seed_12": {
                "seed": {
                    "value": "hparams['Rand_Seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "units": {
                    "value": "self.hparams['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.hparams['num_state']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "self.hparams['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "units": {
                    "value": "self.hparams['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "self.hparams['num_actions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "epsilon": {
                    "value": "self.hparams['adam_eps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.hparams['learning_rate_adam']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "he_normal_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_69": {
                "input_tensor": {
                    "value": "self.network(next_state)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cartpole/q_on_cartpole.py": {
        "tensorflow": {
            "create_file_writer_16": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "STORE_PATH + f\"/data_{dt.datetime.now().strftime('%d%m%Y%H%M')}\"",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_70": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tot_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(rewards)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(agent_par['num_episodes'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cartpole/replay_q_on_cartpole.py": {
        "tensorflow": {
            "create_file_writer_16": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "STORE_PATH + f\"/data_{dt.datetime.now().strftime('%d%m%Y%H%M')}\"",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_72": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tot_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(rewards)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(agent_par['num_episodes'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}