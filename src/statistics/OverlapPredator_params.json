{
    "lib/loss.py": {
        "sklearn": {
            "precision_recall_fscore_support_94": {
                "variable": {
                    "value": "(cls_precision, cls_recall, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prediction.detach().cpu().round().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "max_47": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(neg_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_53": {
                "variable": {
                    "value": "lse_pos_row",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_scale * (feats_dist - self.pos_margin) * pos_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_54": {
                "variable": {
                    "value": "lse_pos_col",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_scale * (feats_dist - self.pos_margin) * pos_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_56": {
                "variable": {
                    "value": "lse_neg_row",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_scale * (self.neg_margin - feats_dist) * neg_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_57": {
                "variable": {
                    "value": "lse_neg_col",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_scale * (self.neg_margin - feats_dist) * neg_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_72": {
                "variable": {
                    "value": "(_, sel_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(square_distance(src_feats[None, :, :], tgt_feats[None, :, :], normalised=True)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_79": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_83": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "w_class_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * class_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "src_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_pcd.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "tgt_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_pcd.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_gt, tgt_gt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feats_sel",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_feats_sel.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_135": {
                "variable": {
                    "value": "distance_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pcd_sel - tgt_pcd_sel[idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "distance_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pcd_sel - src_pcd_sel[idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((distance_1 < self.matchability_radius).float(), (distance_2 < self.matchability_radius).float())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "scores_saliency",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_saliency_scores, tgt_saliency_scores)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_152": {
                "variable": {
                    "value": "c_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pcd[correspondence[:, 0]] - tgt_pcd[correspondence[:, 1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "variable": {
                    "value": "coords_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "square_distance(src_pcd[None, :, :], tgt_pcd[None, :, :]).squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_166": {
                "variable": {
                    "value": "feats_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "square_distance(src_feats[None, :, :], tgt_feats[None, :, :], normalised=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "feats_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_59": {
                "input": {
                    "value": "lse_pos_row + lse_neg_row",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_60": {
                "input": {
                    "value": "lse_pos_col + lse_neg_col",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_73": {
                "input": {
                    "value": "coords_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(square_distance(src_pcd[None, :, :], tgt_pcd[None, :, :]).squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sel_idx[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_47": {
                "input": {
                    "value": "pos_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats_dist - 100000.0 * (~pos_mask).float()",
                            "BinOp"
                        ],
                        [
                            "pos_weight - self.pos_optimal",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.zeros_like(pos_weight), pos_weight).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_51": {
                "input": {
                    "value": "neg_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats_dist + 100000.0 * (~neg_mask).float()",
                            "BinOp"
                        ],
                        [
                            "self.neg_optimal - neg_weight",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.zeros_like(neg_weight), neg_weight).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "input": {
                    "value": "rot",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "src_pcd.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "sklearn": {},
        "torch": {
            "clamp_96": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-2 * torch.matmul(src, dst.permute(0, 2, 1))",
                            "BinOp"
                        ],
                        [
                            "dist + torch.sum(dst ** 2, dim=-1)[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, min=1e-12, max=None)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_all_73": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "input": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "any_106": {
                "input": {
                    "value": "torch.isnan(param.grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_108": {
                "input": {
                    "value": "torch.isinf(param.grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_106": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isinf_108": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/math_torch/se3.py": {
        "torch": {
            "cat_23": {
                "variable": {
                    "value": "inverse_transform",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rot.transpose(-1, -2), rot.transpose(-1, -2) @ -trans[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "concatenated",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rot_cat, trans_cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "R.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_7": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "common/torch.py": {
        "torch": {
            "load_122": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_67": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'step': step}",
                            "Dict"
                        ],
                        [
                            "torch.load(save_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._save_path.format(step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/dataloader.py": {
        "torch": {
            "from_numpy_85": {
                "variable": {
                    "value": "batched_features",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_features_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "batched_points",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_points_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "batched_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batched_lengths_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_258": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate_fn_descriptor, config=dataset.config, neighborhood_limits=neighborhood_limits)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "neighbors[:, :max_neighbors]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "neighbors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cpp_neighbors.batch_query(queries, supports, q_batches, s_batches, radius=radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "conv_i",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "pool_i",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "pool_p",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "pool_b",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "up_i",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "rot",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "trans",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "src_pcd_raw",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "tgt_pcd_raw",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "s_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "neighb_mat < neighb_mat.shape[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "s_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "s_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "ndarray": {
                    "value": "s_labels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/indoor.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "src_pcd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "src_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.base_dir, self.infos['src'][item])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "tgt_pcd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "tgt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.base_dir, self.infos['tgt'][item])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/kitti.py": {
        "torch": {
            "ones_182": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/modelnet.py": {
        "torch": {
            "from_numpy_195": {
                "variable": {
                    "value": "sample[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "sample[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/transforms.py": {
        "torch": {}
    },
    "lib/benchmark.py": {
        "torch": {
            "matmul_26": {
                "variable": {
                    "value": "R_",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "R1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "R2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(torch.trace(R_[_, :, :]) - 1) / 2 for _ in range(R_.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([(torch.trace(R_[_, :, :]) - 1) / 2 for _ in range(R_.shape[0])], dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(e, -1, 1, out=None)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "acos_32": {
                "variable": {
                    "value": "ae",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([(torch.trace(R_[_, :, :]) - 1) / 2 for _ in range(R_.shape[0])], dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(e, -1, 1, out=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "src_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_194": {
                "variable": {
                    "value": "tgt",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "tgt_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "norm_52": {
                "input": {
                    "value": "t1 - t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trace_27": {
                "input": {
                    "value": "R_[_, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "est_traj[:, 0:3, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "ndarray": {
                    "value": "est_traj[:, 0:3, 3:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/benchmark_utils.py": {
        "torch": {
            "from_numpy_134": {
                "variable": {
                    "value": "correspondences",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "correspondences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(correspondences)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(correspondences)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_feat.transpose(0, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_251": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pcd - tgt_pcd[idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_261": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pcd[row_sel] - tgt_pcd[col_sel]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_feat.transpose(0, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_241": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_243": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_195": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_197": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_245": {
                "input": {
                    "value": "rot",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "src_pcd.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tester.py": {
        "torch": {
            "sum_179": {
                "variable": {
                    "value": "centroid_a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "a * weights_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "centroid_b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "b * weights_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_187": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a_centered.transpose(-2, -1) @ (b_centered * weights_normalized)",
                            "BinOp"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "compute_uv": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_192": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.det(rot_mat_pos)[:, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "rot_mat_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "rot_mat_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v_neg @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "transform",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rot_mat, translation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_199": {
                "variable": {
                    "value": "tsfm",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_193": {
                "input": {
                    "value": "torch.det(rot_mat) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_226": {
                "variable": {
                    "value": "t_mse",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(t_gt - t_pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_227": {
                "variable": {
                    "value": "t_mae",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t_gt - t_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "(src[:, :, None, :] - dst[:, None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "weights[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "det_193": {
                "input": {
                    "value": "rot_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(torch.det(rot_mat_pos)[:, None, None] > 0, rot_mat_pos, rot_mat_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_227": {
                "input": {
                    "value": "t_gt - t_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_240": {
                "input": {
                    "value": "square_distance(src_transformed, ref_clean)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_241": {
                "input": {
                    "value": "square_distance(points_ref, src_clean)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_242": {
                "input": {
                    "value": "dist_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.min(square_distance(points_ref, src_clean), dim=-1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_372": {
                "ndarray": {
                    "value": "np.array(pred_transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{self.snapshot_dir}/{self.config.benchmark}/{idx}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "det_192": {
                "input": {
                    "value": "rot_mat_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_233": {
                "input": {
                    "value": "torch.clamp(0.5 * (rot_trace - 1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_233": {
                "input": {
                    "value": "0.5 * (rot_trace - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "acos_327": {
                "input": {
                    "value": "torch.clamp(0.5 * (rot_trace - 1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_327": {
                "input": {
                    "value": "0.5 * (rot_trace - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/trainer.py": {
        "torch": {
            "save_72": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'best_loss': self.best_loss, 'best_recall': self.best_recall}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'model_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'model_{name}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "empty_cache_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "ExponentialLR_69": {
                "variable": {
                    "value": "config.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "config.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_54": {
                "variable": {
                    "value": "config.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "config.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "config.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "config.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/architectures.py": {
        "torch": {
            "normalize_169": {
                "variable": {
                    "value": "feats_gnn_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.bottle(feats_c)",
                            "Call"
                        ],
                        [
                            "torch.cat([src_feats_c, tgt_feats_c], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj_gnn(feats_c)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_169": {
                "variable": {
                    "value": "feats_gnn_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "feats_gnn_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "feats_f",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :self.final_feats_dim]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(feats_f, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "input": {
                    "value": "inner_products / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "input": {
                    "value": "inner_products.transpose(0, 1) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/blocks.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_101": {
                "variable": {
                    "value": "(max_features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gather(x, inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_68": {
                "input": {
                    "value": "-sq_r / (2 * sig ** 2 + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_125": {
                "tensors": {
                    "value": "averaged_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((self.K, in_channels, out_channels), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "s_pts",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_pts, torch.zeros_like(s_pts[:1, :]) + 1000000.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_289": {
                "variable": {
                    "value": "sq_distances",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "differences ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_354": {
                "variable": {
                    "value": "weighted_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "neighb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gather(x, new_neighb_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_362": {
                "variable": {
                    "value": "kernel_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(all_weights, neighb_x)",
                            "Call"
                        ],
                        [
                            "weighted_features * modulations.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weighted_features.permute((1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_366": {
                "variable": {
                    "value": "output_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(weighted_features, self.weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "neighbor_features_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "neighb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gather(x, new_neighb_inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_370": {
                "variable": {
                    "value": "neighbor_num",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.gt(neighbor_features_sum, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_371": {
                "variable": {
                    "value": "neighbor_num",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.gt(neighbor_features_sum, 0.0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(neighbor_num, torch.ones_like(neighbor_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_490": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_524": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_574": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_646": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.offset_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.offset_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "data": {
                    "value": "torch.tensor(K_points_numpy, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_295": {
                "variable": {
                    "value": "(self.min_d2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "any_298": {
                "variable": {
                    "value": "in_range",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances < self.KP_extent ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_301": {
                "variable": {
                    "value": "new_max_neighb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_range, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_304": {
                "variable": {
                    "value": "(neighb_row_bool, neighb_row_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "in_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.any(sq_distances < self.KP_extent ** 2, dim=2).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "new_max_neighb.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_323": {
                "variable": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_341": {
                "variable": {
                    "value": "neighbors_1nn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_448": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_450": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_493": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_620": {
                "variable": {
                    "value": "self.unary1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_643": {
                "variable": {
                    "value": "self.unary_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_119": {
                "input": {
                    "value": "x[i0:i0 + length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "(self.K, in_channels, out_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "K_points_numpy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_kernels(self.radius, self.K, dimension=self.p_dim, fixed=self.fixed_kernel_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_328": {
                "variable": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.sqrt(sq_distances) / self.KP_extent",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "variable": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_342": {
                "input": {
                    "value": "nn.functional.one_hot(neighbors_1nn, self.K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_370": {
                "input": {
                    "value": "neighbor_features_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(neighb_x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_371": {
                "input": {
                    "value": "neighbor_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.gt(neighbor_features_sum, 0.0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(neighbor_num, torch.ones_like(neighbor_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "self.offset_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_301": {
                "input": {
                    "value": "in_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.any(sq_distances < self.KP_extent ** 2, dim=2).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_335": {
                "variable": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_342": {
                "tensor": {
                    "value": "neighbors_1nn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argmin(sq_distances, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_348": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_450": {
                "*size": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_247": {
                "input": {
                    "value": "self.offset_features[:, self.p_dim * self.K:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "s_pts[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_328": {
                "input": {
                    "value": "sq_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/gcn.py": {
        "torch": {
            "gather_28": {
                "variable": {
                    "value": "neighbor_feats",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.unsqueeze(2).repeat(1, 1, N, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist.topk(k=k + 1, dim=-1, largest=False, sorted=True)[1]",
                            "Subscript"
                        ],
                        [
                            "idx[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "idx.unsqueeze(1).repeat(1, C, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "feats_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats, neighbor_feats - feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('bdhn,bdhm->bhnm', query, key) / dim ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_43": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_46": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_49": {
                "variable": {
                    "value": "self.in3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in1(self.conv1(x1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_71": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in2(self.conv2(x2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "x3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_75": {
                "variable": {
                    "value": "x3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in3(self.conv3(x3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(self.merge) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_96": {
                "equation": {
                    "value": "bdhn,bdhm->bhnm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_98": {
                "equation": {
                    "value": "bhnm,bdhm->bdhn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_86": {
                "in_channels": {
                    "value": "channels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "[x, message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_89": {
                "num_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/demo.py": {
        "torch": {
            "load_240": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "config.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "src_pcd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "self.src_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "tgt_pcd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "self.tgt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "correspondences",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_202": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_204": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/evaluate_predator.py": {
        "torch": {
            "load_56": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "eachfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(feats_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_32": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "k": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}