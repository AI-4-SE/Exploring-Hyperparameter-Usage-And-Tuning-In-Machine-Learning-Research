{
    "capslayer/_test.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "b_IJ",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros([10, 10, 1, 1], dtype=np.float32)",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "b_ij",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 10, 1, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "possible_values": []
                }
            },
            "main_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "capslayer/layers.py": {
        "tensorflow": {
            "get_variable_37": {
                "variable": {
                    "value": "T_matrix",
                    "possible_values": []
                },
                "name": {
                    "value": "transformation_matrix",
                    "possible_values": []
                },
                "shape": {
                    "value": "T_shape",
                    "possible_values": [
                        [
                            "[1, num_inputs, num_outputs] + T_size",
                            "BinOp"
                        ],
                        [
                            "(1, num_inputs, filters) + tuple(T_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_38": {
                "variable": {
                    "value": "T_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "T_matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(T_matrix, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "tile_39": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, axis=2)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_outputs, 1, 1]",
                    "possible_values": []
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "capsules",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(inputs, axis=2), [1, 1, num_outputs, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters * cap_size",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "possible_values": []
                }
            },
            "conv2d_262": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(inputs, axis=2), [1, 1, num_outputs, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters * pose_size",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters * pose_size, kernel_size=kernel_size, strides=strides, activation=None, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pose, shape=pose_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "pose_shape",
                    "possible_values": [
                        [
                            "pose.get_shape().as_list()[:3] + [filters] + out_caps_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_331": {
                "variable": {
                    "value": "T_matrix",
                    "possible_values": []
                },
                "name": {
                    "value": "transformation_matrix",
                    "possible_values": []
                },
                "shape": {
                    "value": "T_shape",
                    "possible_values": [
                        [
                            "[1, num_inputs, num_outputs] + T_size",
                            "BinOp"
                        ],
                        [
                            "(1, num_inputs, filters) + tuple(T_size)",
                            "BinOp"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_332": {
                "variable": {
                    "value": "T_matrix_batched",
                    "possible_values": []
                },
                "input": {
                    "value": "T_matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(T_matrix, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "concat_374": {
                "variable": {
                    "value": "out_pose",
                    "possible_values": []
                },
                "values": {
                    "value": "out_pose",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(out_pose, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_375": {
                "variable": {
                    "value": "out_activation",
                    "possible_values": []
                },
                "values": {
                    "value": "out_activation",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(out_activation, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "vote",
                    "possible_values": []
                },
                "a": {
                    "value": "T_matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(T_matrix, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('transformation_matrix', shape=T_shape, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(inputs, axis=2), [1, 1, num_outputs, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.reshape(activation, shape=activation.get_shape().as_list() + [1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, shape=[batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(input, filters, kernel_size=kernel_size, strides=strides, activation=tf.nn.sigmoid, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(pose), axis=2, keepdims=True) + 1e-09)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "activation.get_shape().as_list() + [1, 1]",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "vote",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vote",
                    "possible_values": [
                        [
                            "tf.matmul(T_matrix, inputs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vote, shape=[batch_size, num_inputs, num_outputs, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(T_matrix_batched, batch_pose), shape=[batch_size, num_inputs, filters, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_inputs, num_outputs, -1]",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters * pose_size, kernel_size=kernel_size, strides=strides, activation=None, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pose, shape=pose_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_outputs] + out_caps_shape",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.reshape(activation, shape=activation.get_shape().as_list() + [1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, shape=[batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(input, filters, kernel_size=kernel_size, strides=strides, activation=tf.nn.sigmoid, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(pose), axis=2, keepdims=True) + 1e-09)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "shape_184": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "input_tensor_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_shape[0] * input_dim, input_atoms, input_shape[3], input_shape[4]]",
                    "possible_values": []
                }
            },
            "conv2d_194": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, [input_shape[0] * input_dim, input_atoms, input_shape[3], input_shape[4]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "variables.weight_variable(shape=[kernel_size, kernel_size, input_atoms, output_dim * output_atoms])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, stride, stride]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NCHW",
                    "possible_values": []
                }
            },
            "shape_200": {
                "variable": {
                    "value": "conv_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_tensor_reshaped, kernel, [1, 1, stride, stride], padding=padding, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "conv_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_tensor_reshaped, kernel, [1, 1, stride, stride], padding=padding, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0], input_dim, output_dim, output_atoms, conv_shape[2], conv_shape[3]]",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "capsules",
                    "possible_values": []
                },
                "tensor": {
                    "value": "capsules",
                    "possible_values": [
                        [
                            "dynamic_routing(u_hat, cap_num_in, cap_num, cap_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters * cap_size, kernel_size, strides, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(capsules, (-1, shape[1], shape[2], 1, cap_num, cap_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, shape[1], shape[2], 1, cap_num, cap_size)",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_370": {
                "variable": {
                    "value": "col_pose",
                    "possible_values": []
                },
                "values": {
                    "value": "col_pose",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(col_pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "col_prob",
                    "possible_values": []
                },
                "values": {
                    "value": "col_prob",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(col_prob, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(inputs, axis=2), [1, 1, num_outputs, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "transformation",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "routing",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "routing",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "layer_name",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "logit_shape",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_shape[0], input_dim, output_dim, votes_shape[2], votes_shape[3]]",
                    "possible_values": []
                }
            },
            "tile_135": {
                "variable": {
                    "value": "biases_replicated",
                    "possible_values": []
                },
                "input": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "variables.bias_variable([output_dim, output_atoms, 1, 1])",
                            "Call"
                        ],
                        [
                            "variables.bias_variable([output_dim, output_atoms])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, votes_shape[2], votes_shape[3]]",
                    "possible_values": []
                }
            },
            "name_scope_183": {
                "name": {
                    "value": "conv",
                    "possible_values": []
                }
            },
            "sqrt_277": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(pose), axis=2, keepdims=True) + 1e-09",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "layer_name",
                    "possible_values": []
                }
            },
            "tile_425": {
                "variable": {
                    "value": "input_tiled",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_tensor, -1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, output_dim * output_atoms]",
                    "possible_values": []
                }
            },
            "reduce_sum_428": {
                "variable": {
                    "value": "votes",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_tiled * weights",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "votes_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "votes",
                    "possible_values": [
                        [
                            "tf.reduce_sum(input_tiled * weights, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_dim, output_dim, output_atoms]",
                    "possible_values": []
                }
            },
            "shape_433": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "possible_values": []
                }
            },
            "stack_434": {
                "variable": {
                    "value": "logit_shape",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_shape[0], input_dim, output_dim]",
                    "possible_values": []
                }
            },
            "name_scope_131": {
                "name": {
                    "value": "routing",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "tensor": {
                    "value": "capsules",
                    "possible_values": [
                        [
                            "dynamic_routing(u_hat, cap_num_in, cap_num, cap_size)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters * cap_size, kernel_size, strides, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(capsules, (-1, shape[1], shape[2], 1, cap_num, cap_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, cap_num, cap_size)",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "pose_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pose_sliced",
                    "possible_values": [
                        [
                            "in_pose[:, h_s:h_e, w_s:w_s + w_kernel_size, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_inputs, 1] + in_caps_shape",
                    "possible_values": []
                }
            },
            "multiply_353": {
                "variable": {
                    "value": "batch_pose",
                    "possible_values": []
                },
                "x": {
                    "value": "pose_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(pose_sliced, shape=[batch_size, num_inputs, 1] + in_caps_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0, shape=shape)",
                    "possible_values": []
                }
            },
            "reshape_354": {
                "variable": {
                    "value": "vote",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(T_matrix_batched, batch_pose)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_inputs, filters, -1]",
                    "possible_values": []
                }
            },
            "slice_365": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "input_": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.reshape(activation, shape=activation.get_shape().as_list() + [1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, shape=[batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(input, filters, kernel_size=kernel_size, strides=strides, activation=tf.nn.sigmoid, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(pose), axis=2, keepdims=True) + 1e-09)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "begin": {
                    "value": "begin",
                    "possible_values": [
                        [
                            "[0, i * h_stride, j * w_stride, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, i * h_stride, j * w_stride, 0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "batch_shape + in_caps_shape",
                            "BinOp"
                        ],
                        [
                            "[batch_size, h_kernel_size, w_kernel_size, in_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "tf.slice(activation, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prob, shape=[batch_size, -1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "name_scope_421": {
                "name": {
                    "value": "Wx_plus_b",
                    "possible_values": []
                }
            },
            "name_scope_432": {
                "name": {
                    "value": "routing",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "transformation",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "routing",
                    "possible_values": []
                }
            },
            "expand_dims_426": {
                "input": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "input_tensor": {
                    "value": "tf.square(pose)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "constant_353": {
                "value": {
                    "value": "1.0",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "capsules.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[batch_size, num_inputs, filters] + in_caps_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_354": {
                "a": {
                    "value": "T_matrix_batched",
                    "possible_values": [
                        [
                            "tf.tile(T_matrix, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "batch_pose",
                    "possible_values": [
                        [
                            "tf.multiply(pose_reshaped, tf.constant(1.0, shape=shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_277": {
                "x": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters * pose_size, kernel_size=kernel_size, strides=strides, activation=None, activity_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pose, shape=pose_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "capslayer/losses.py": {
        "tensorflow": {
            "matmul_18": {
                "variable": {
                    "value": "a_target",
                    "possible_values": []
                },
                "a": {
                    "value": "labels",
                    "possible_values": []
                },
                "b": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "raw_logits - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "maximum_19": {
                "variable": {
                    "value": "dist",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "margin - (a_target - logits)",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.matmul(1 - labels, dist, transpose_a=True))",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "v_length",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), axis=2, keepdim=True) + epsilon",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, m_plus - v_length)",
                    "possible_values": []
                }
            },
            "square_35": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, v_length - m_minus)",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_l",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, m_plus - v_length))",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_l, shape=(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1)",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_r",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, v_length - m_minus))",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_r, shape=(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1)",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(L_c, axis=1)",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_84": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "raw_logits - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_22": {
                "variable": {
                    "value": "regularizer",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "get_collection_86": {
                "variable": {
                    "value": "regularizer",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "square_20": {
                "x": {
                    "value": "tf.matmul(1 - labels, dist, transpose_a=True)",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_33": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "m_plus - v_length",
                    "possible_values": []
                }
            },
            "maximum_35": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "v_length - m_minus",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "L_c",
                    "possible_values": [
                        [
                            "T_c * max_l + lambda_val * (1 - T_c) * max_r",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "pow_70": {
                "x": {
                    "value": "logits - margin",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_72": {
                "x": {
                    "value": "logits + margin",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_20": {
                "a": {
                    "value": "1 - labels",
                    "possible_values": []
                },
                "b": {
                    "value": "dist",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, margin - (a_target - logits))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "tf.less(logits, margin)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "tf.greater(logits, -margin)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "less_69": {
                "x": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "raw_logits - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_72": {
                "x": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "raw_logits - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-margin",
                    "possible_values": []
                }
            }
        }
    },
    "capslayer/ops.py": {
        "tensorflow": {
            "reduce_sum_15": {
                "variable": {
                    "value": "squared_norm",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(input_tensor)",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_32": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "leak",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ij",
                    "possible_values": [
                        [
                            "tf.zeros(b_ij_shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "optimize": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "leak",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "leak",
                    "possible_values": [
                        [
                            "tf.zeros_like(b_ij, optimize=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(leak, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "leaky_b_ij",
                    "possible_values": []
                },
                "values": {
                    "value": "[leak, b_ij]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "leaky_routing",
                    "possible_values": []
                },
                "logits": {
                    "value": "leaky_b_ij",
                    "possible_values": [
                        [
                            "tf.concat([leak, b_ij], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_85": {
                "variable": {
                    "value": "votes_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "possible_values": []
                },
                "perm": {
                    "value": "votes_t_shape",
                    "possible_values": [
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ],
                        [
                            "votes_t_shape + [i + 4]",
                            "BinOp"
                        ],
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_118": {
                "variable": {
                    "value": "activations",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "size": {
                    "value": "num_routing",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "fill_121": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "i",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "while_loop_123": {
                "variable": {
                    "value": "(_, logits, activations)",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, logits, activations: i < num_routing",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, logits, activations]",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "variable": {
                    "value": "votes_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "possible_values": []
                },
                "perm": {
                    "value": "votes_t_shape",
                    "possible_values": [
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ],
                        [
                            "votes_t_shape + [i + 4]",
                            "BinOp"
                        ],
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "stop_gradient_156": {
                "variable": {
                    "value": "votes_trans_stopped",
                    "possible_values": []
                },
                "input": {
                    "value": "votes_trans",
                    "possible_values": [
                        [
                            "tf.transpose(votes, votes_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(votes, votes_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "stop_gradient",
                    "possible_values": []
                }
            },
            "fill_158": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cap_num_in, cap_size_in, cap_size * cap_num)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(inputs, [1, 1, 1, cap_num * cap_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tile_208": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(inputs, [1, 1, 1, cap_num * cap_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, cap_num * cap_size]",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "u_hat",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs * w",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "u_hat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "tf.reduce_sum(inputs * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat, shape=[-1, cap_num_in, cap_num, cap_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, cap_num_in, cap_num, cap_size]",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "u_hat_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "tf.reduce_sum(inputs * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat, shape=[-1, cap_num_in, cap_num, cap_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "u_hat_t_shape",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i] + u_hat_t_shape",
                            "BinOp"
                        ],
                        [
                            "u_hat_t_shape + [i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_252": {
                "variable": {
                    "value": "b_ij_shape",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.shape(u_hat)[0:-1]",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "b_ij",
                    "possible_values": []
                },
                "shape": {
                    "value": "b_ij_shape",
                    "possible_values": [
                        [
                            "tf.stack(tf.shape(u_hat)[0:-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "biases",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cap_num, cap_size)",
                    "possible_values": []
                }
            },
            "TensorArray_280": {
                "variable": {
                    "value": "v_j",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "size": {
                    "value": "iter_routing",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "clear_after_read": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "constant_282": {
                "variable": {
                    "value": "i",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "while_loop_283": {
                "variable": {
                    "value": "(_, b_ij, v_j)",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _i, _b_ij, _: _i < iter_routing",
                    "possible_values": []
                },
                "body": {
                    "value": "_routing",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, b_ij, v_j]",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "stop_gradient_316": {
                "variable": {
                    "value": "vote_stopped",
                    "possible_values": []
                },
                "input": {
                    "value": "vote",
                    "possible_values": []
                },
                "name": {
                    "value": "stop_gradient",
                    "possible_values": []
                }
            },
            "multiply_373": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "x": {
                    "value": "R",
                    "possible_values": [
                        [
                            "tf.constant(np.ones(shape, dtype=np.float32) / num_outputs)",
                            "Call"
                        ],
                        [
                            "E_step(pose, stddev, activation_prime, vote_stopped)",
                            "Call"
                        ],
                        [
                            "tf.multiply(R, activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation * P, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation_prime, shape=[batch_size, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(lambda_val * (beta_a - tf.reduce_sum(cost, axis=3, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_381": {
                "variable": {
                    "value": "stddev",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(R * tf.square(vote - pose), axis=1, keepdims=True) / R_sum_i + epsilon",
                    "possible_values": []
                }
            },
            "get_variable_385": {
                "variable": {
                    "value": "beta_v",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_v",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, pose.shape[2].value, H]",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_389": {
                "variable": {
                    "value": "beta_a",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_a",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, pose.shape[2], 1]",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_390": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "x": {
                    "value": "lambda_val * (beta_a - tf.reduce_sum(cost, axis=3, keepdims=True))",
                    "possible_values": []
                }
            },
            "square_409": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "x": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(R * tf.square(vote - pose), axis=1, keepdims=True) / R_sum_i + epsilon)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_410": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(vote - pose) / (2 * var)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_415": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation * P",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "preact_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans_stopped",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "r_t_shape + [i + 1]",
                            "BinOp"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "act_3d",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation_prime, shape=[batch_size, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(lambda_val * (beta_a - tf.reduce_sum(cost, axis=3, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_112": {
                "variable": {
                    "value": "act_replicated",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "possible_values": [
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "possible_values": [
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(len(u_hat_shape), dtype=np.int32).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "distances",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "votes * act_replicated",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "multiply_262": {
                "variable": {
                    "value": "s_j",
                    "possible_values": []
                },
                "x": {
                    "value": "c_ij",
                    "possible_values": [
                        [
                            "_leaky_routing(_b_ij, cap_num, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(_b_ij, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_hat_trans",
                    "possible_values": [
                        [
                            "tf.transpose(u_hat, u_hat_t_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "s_j",
                    "possible_values": []
                },
                "a": {
                    "value": "s_j",
                    "possible_values": [
                        [
                            "tf.multiply(c_ij, u_hat_trans)",
                            "Call"
                        ],
                        [
                            "tf.transpose(s_j, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_j, axis=-3, keepdims=True) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "r_t_shape + [i + 1]",
                            "BinOp"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tile_273": {
                "variable": {
                    "value": "s_j_tile",
                    "possible_values": []
                },
                "input": {
                    "value": "s_j",
                    "possible_values": [
                        [
                            "tf.multiply(c_ij, u_hat_trans)",
                            "Call"
                        ],
                        [
                            "tf.transpose(s_j, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_j, axis=-3, keepdims=True) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "possible_values": [
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(len(u_hat_shape), dtype=np.int32).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "distance",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_hat * s_j_tile",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "constant_321": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(shape, dtype=np.float32) / num_outputs",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, 1, 1, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pose, tf.constant(1.0, shape=shape))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(R * vote, axis=1, keepdims=True) / R_sum_i",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, num_outputs] + out_caps_shape",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation_prime",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, -1]",
                    "possible_values": []
                }
            },
            "square_15": {
                "x": {
                    "value": "input_tensor",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "x": {
                    "value": "squared_norm + epsilon",
                    "possible_values": []
                }
            },
            "split_55": {
                "value": {
                    "value": "leaky_routing",
                    "possible_values": [
                        [
                            "tf.nn.softmax(leaky_b_ij, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, output_dim]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "route",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ],
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "route",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ],
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "preact_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans_stopped",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "r_t_shape + [i + 1]",
                            "BinOp"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_173": {
                "variable": {
                    "value": "preact_trans",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans_stopped",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "r_t_shape + [i + 1]",
                            "BinOp"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_177": {
                "variable": {
                    "value": "act_3d",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "_squash(preactivate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation_prime, shape=[batch_size, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(lambda_val * (beta_a - tf.reduce_sum(cost, axis=3, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_180": {
                "variable": {
                    "value": "act_replicated",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "possible_values": [
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "possible_values": [
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ],
                        [
                            "np.ones(len(u_hat_shape), dtype=np.int32).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_181": {
                "variable": {
                    "value": "distances",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "votes * act_replicated",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "softmax_260": {
                "variable": {
                    "value": "c_ij",
                    "possible_values": []
                },
                "logits": {
                    "value": "_b_ij",
                    "possible_values": [
                        [
                            "_b_ij + distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "constant_338": {
                "variable": {
                    "value": "B",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros([batch_size, vote.shape[1].value, num_outputs, 1, 1], dtype=np.float32)",
                    "possible_values": []
                }
            },
            "reduce_sum_374": {
                "input_tensor": {
                    "value": "R",
                    "possible_values": [
                        [
                            "tf.constant(np.ones(shape, dtype=np.float32) / num_outputs)",
                            "Call"
                        ],
                        [
                            "E_step(pose, stddev, activation_prime, vote_stopped)",
                            "Call"
                        ],
                        [
                            "tf.multiply(R, activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation * P, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_378": {
                "input_tensor": {
                    "value": "R * vote",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_412": {
                "x": {
                    "value": "-x",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "preact_trans",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "random_normal_initializer_199": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(R * tf.square(vote - pose), axis=1, keepdims=True) / R_sum_i + epsilon)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_252": {
                "input": {
                    "value": "u_hat",
                    "possible_values": [
                        [
                            "tf.reduce_sum(inputs * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat, shape=[-1, cap_num_in, cap_num, cap_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "s_j",
                    "possible_values": [
                        [
                            "tf.multiply(c_ij, u_hat_trans)",
                            "Call"
                        ],
                        [
                            "tf.transpose(s_j, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_j, axis=-3, keepdims=True) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-3",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_267": {
                "input": {
                    "value": "s_j",
                    "possible_values": [
                        [
                            "tf.multiply(c_ij, u_hat_trans)",
                            "Call"
                        ],
                        [
                            "tf.transpose(s_j, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_j, axis=-3, keepdims=True) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-3",
                    "possible_values": []
                }
            },
            "log_386": {
                "x": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(R * tf.square(vote - pose), axis=1, keepdims=True) / R_sum_i + epsilon)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_410": {
                "x": {
                    "value": "vote - pose",
                    "possible_values": []
                }
            },
            "reduce_prod_411": {
                "input_tensor": {
                    "value": "tf.sqrt(2 * np.pi * var + epsilon)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "preact_trans",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "input_tensor": {
                    "value": "preact_trans",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "M-STEP",
                    "possible_values": []
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "E-STEP",
                    "possible_values": []
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "coef",
                    "possible_values": []
                },
                "logits": {
                    "value": "B",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros([batch_size, vote.shape[1].value, num_outputs, 1, 1], dtype=np.float32))",
                            "Call"
                        ],
                        [
                            "B + tf.matmul(vote_stopped, pose, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_sum_381": {
                "input_tensor": {
                    "value": "R * tf.square(vote - pose)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_390": {
                "input_tensor": {
                    "value": "cost",
                    "possible_values": [
                        [
                            "(beta_v + tf.log(stddev)) * R_sum_i",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_411": {
                "x": {
                    "value": "2 * np.pi * var + epsilon",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "'iter_' + str(r_iter)",
                    "possible_values": []
                }
            },
            "reduce_sum_343": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(coef, vote)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_346": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(coef, vote_stopped)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "multiply_349": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "x": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, 1, 1, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pose, tf.constant(1.0, shape=shape))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(R * vote, axis=1, keepdims=True) / R_sum_i",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0, shape=shape)",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "a": {
                    "value": "vote_stopped",
                    "possible_values": [
                        [
                            "tf.stop_gradient(vote, name='stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "tf.reshape(pose, shape=[batch_size, 1, 1, num_outputs] + out_caps_shape)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "squash(s)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pose, tf.constant(1.0, shape=shape))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(R * vote, axis=1, keepdims=True) / R_sum_i",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "square_381": {
                "x": {
                    "value": "vote - pose",
                    "possible_values": []
                }
            },
            "multiply_343": {
                "x": {
                    "value": "coef",
                    "possible_values": [
                        [
                            "tf.nn.softmax(B, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vote",
                    "possible_values": []
                }
            },
            "multiply_346": {
                "x": {
                    "value": "coef",
                    "possible_values": [
                        [
                            "tf.nn.softmax(B, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vote_stopped",
                    "possible_values": [
                        [
                            "tf.stop_gradient(vote, name='stop_gradient')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_349": {
                "value": {
                    "value": "1.0",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "vote.get_shape().as_list()[:3] + [1]",
                            "BinOp"
                        ],
                        [
                            "[batch_size, vote.shape[1].value, num_outputs] + out_caps_shape",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "capslayer/test/layers_test.py": {
        "tensorflow": {
            "get_collection_25": {
                "variable": {
                    "value": "trainable_vars",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "variable": {
                    "value": "trainable_vars",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                }
            },
            "main_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "capslayer/test/loss_test.py": {
        "tensorflow": {
            "main_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_19": {
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "[[-0.3, 0.3, 0.9], [1.2, 0.5, -0.5]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "capslayer/test/routing_test.py": {
        "tensorflow": {
            "ones_15": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3, 4)",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "biases",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "main_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "capslayer/test/squash_test.py": {
        "tensorflow": {
            "ones_14": {
                "variable": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, 1, 1, 1)",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, 1, 1, 1)",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 1, 1000, 1, 20, 1)",
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 1, 1000, 1, 20, 1)",
                    "possible_values": []
                }
            },
            "main_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "capslayer/variables.py": {
        "tensorflow": {
            "device_40": {
                "device_name": {
                    "value": "/cpu:0",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev, dtype=tf.float32)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "device_62": {
                "device_name": {
                    "value": "/cpu:0",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "biases",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "possible_values": []
                }
            },
            "histogram_105": {
                "name": {
                    "value": "activations",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "sparsity",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "weights",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "biases",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "summaries",
                    "possible_values": []
                }
            },
            "scalar_83": {
                "name": {
                    "value": "mean",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "stddev",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var - mean))",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "stddev",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "max",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(var)",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "min",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(var)",
                    "possible_values": []
                }
            },
            "histogram_90": {
                "name": {
                    "value": "histogram",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "possible_values": []
                }
            },
            "zero_fraction_106": {
                "value": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "input_tensor": {
                    "value": "var",
                    "possible_values": []
                }
            },
            "reduce_min_89": {
                "input_tensor": {
                    "value": "var",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_45": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "possible_values": []
                }
            },
            "square_86": {
                "x": {
                    "value": "var - mean",
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "tensorflow": {}
    },
    "data_input/cifar/cifar10_input_test.py": {
        "tensorflow": {
            "main_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FIFOQueue_53": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "capacity": {
                    "value": "100",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "possible_values": []
                },
                "shapes": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "Coordinator_77": {
                "variable": {
                    "value": "coord",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_78": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_input/cifar/cifar_download.py": {
        "tensorflow": {
            "DEFINE_string_8": {
                "name": {
                    "value": "dir",
                    "possible_values": []
                },
                "default": {
                    "value": "data_input/data/cifar10",
                    "possible_values": []
                },
                "help": {
                    "value": "directory",
                    "possible_values": []
                }
            },
            "DEFINE_integer_9": {
                "name": {
                    "value": "cifar",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "cifar 10 or 100",
                    "possible_values": []
                }
            },
            "DEFINE_bool_10": {
                "name": {
                    "value": "b",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "possible_values": []
                },
                "help": {
                    "value": "is binary",
                    "possible_values": []
                }
            },
            "run_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data_input/cifar/cifar_input.py": {
        "tensorflow": {
            "FixedLengthRecordReader_90": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "coarse_label_bytes + fine_label_bytes + image_bytes",
                            "BinOp"
                        ]
                    ]
                },
                "header_bytes": {
                    "value": "0",
                    "possible_values": []
                },
                "footer_bytes": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "decode_raw_97": {
                "variable": {
                    "value": "uint_data",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "byte_data",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(uint_data, [0], [label_bytes])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "depth_major",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(uint_data, [label_bytes], [record_bytes])",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(depth_major, [1, 2, 0])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_156": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "coarse_label_bytes + fine_label_bytes + image_bytes",
                            "BinOp"
                        ]
                    ]
                },
                "header_bytes": {
                    "value": "0",
                    "possible_values": []
                },
                "footer_bytes": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "decode_raw_162": {
                "variable": {
                    "value": "uint_data",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "byte_data",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_165": {
                "variable": {
                    "value": "coarse_label",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [0], [coarse_label_bytes])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "fine_label",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [coarse_label_bytes], [coarse_label_bytes + fine_label_bytes])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "depth_major",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(uint_data, [coarse_label_bytes + fine_label_bytes], [record_bytes])",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(depth_major, [1, 2, 0])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "batched_features[labels]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batched_features['labels']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 10]",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "batched_features[recons_label]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batched_features['recons_label']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "random_crop_258": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(resized_image)",
                            "Call"
                        ],
                        [
                            "labels_images[1].reshape(TRAIN_NUM, IMAGE_SIZE, IMAGE_SIZE, IMAGE_DEPTH)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width, 3]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_259": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_260": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "possible_values": []
                }
            },
            "random_contrast_261": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "possible_values": []
                }
            },
            "string_input_producer_312": {
                "variable": {
                    "value": "filename_queue",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(data_dir, 'train.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(data_dir, 'test.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(files_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(files_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "per_image_standardization_333": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "possible_values": [
                        [
                            "_distort_resize(float_image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(float_image, width, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_208": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(resized_image)",
                            "Call"
                        ],
                        [
                            "labels_images[1].reshape(TRAIN_NUM, IMAGE_SIZE, IMAGE_SIZE, IMAGE_DEPTH)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "possible_values": []
                }
            },
            "shuffle_batch_217": {
                "variable": {
                    "value": "batched_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "possible_values": [
                        [
                            "{'images': image, 'labels': tf.one_hot(label, 10), 'recons_image': image, 'recons_label': label}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "16",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "possible_values": [
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_224": {
                "variable": {
                    "value": "batched_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "possible_values": [
                        [
                            "{'images': image, 'labels': tf.one_hot(label, 10), 'recons_image': image, 'recons_label': label}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "possible_values": []
                }
            },
            "image_240": {
                "name": {
                    "value": "images",
                    "possible_values": []
                },
                "data": {
                    "value": "batched_features['images']",
                    "possible_values": []
                }
            },
            "strided_slice_101": {
                "input_": {
                    "value": "uint_data",
                    "possible_values": [
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes]",
                    "possible_values": []
                }
            },
            "strided_slice_109": {
                "input_": {
                    "value": "uint_data",
                    "possible_values": [
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "possible_values": []
                },
                "end": {
                    "value": "[record_bytes]",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "a": {
                    "value": "depth_major",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(uint_data, [label_bytes], [record_bytes]), [depth, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.strided_slice(uint_data, [coarse_label_bytes + fine_label_bytes], [record_bytes]), [depth, height, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "strided_slice_165": {
                "input_": {
                    "value": "record_bytes",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "coarse_label_bytes + fine_label_bytes + image_bytes",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "possible_values": []
                },
                "end": {
                    "value": "[coarse_label_bytes]",
                    "possible_values": []
                }
            },
            "strided_slice_168": {
                "input_": {
                    "value": "record_bytes",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "coarse_label_bytes + fine_label_bytes + image_bytes",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[coarse_label_bytes]",
                    "possible_values": []
                },
                "end": {
                    "value": "[coarse_label_bytes + fine_label_bytes]",
                    "possible_values": []
                }
            },
            "strided_slice_180": {
                "input_": {
                    "value": "uint_data",
                    "possible_values": [
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(byte_data, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[coarse_label_bytes + fine_label_bytes]",
                    "possible_values": []
                },
                "end": {
                    "value": "[record_bytes]",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "depth_major",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(uint_data, [label_bytes], [record_bytes]), [depth, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.strided_slice(uint_data, [coarse_label_bytes + fine_label_bytes], [record_bytes]), [depth, height, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "one_hot_211": {
                "indices": {
                    "value": "label",
                    "possible_values": [
                        [
                            "tf.cast(tf.strided_slice(uint_data, [0], [label_bytes]), tf.int32)",
                            "Call"
                        ],
                        [
                            "fine_label",
                            "Name"
                        ],
                        [
                            "coarse_label",
                            "Name"
                        ],
                        [
                            "labels_images[0].reshape(TRAIN_NUM)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "Exists_308": {
                "filename": {
                    "value": "f",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "Exists_363": {
                "filename": {
                    "value": "f",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "data_input/mnist/mnist_download.py": {
        "tensorflow": {
            "DEFINE_string_10": {
                "name": {
                    "value": "dir",
                    "possible_values": []
                },
                "default": {
                    "value": "data_input/data/mnist",
                    "possible_values": []
                },
                "help": {
                    "value": "directory",
                    "possible_values": []
                }
            },
            "DEFINE_string_11": {
                "name": {
                    "value": "dataset",
                    "possible_values": []
                },
                "default": {
                    "value": "mnist",
                    "possible_values": []
                },
                "help": {
                    "value": "mnist or fashion-mnist",
                    "possible_values": []
                }
            },
            "DEFINE_bool_12": {
                "name": {
                    "value": "force",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "rewrite or not",
                    "possible_values": []
                }
            },
            "run_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data_input/mnist/mnist_input.py": {
        "tensorflow": {
            "slice_input_producer_91": {
                "variable": {
                    "value": "data_queues",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[trX, trY]",
                    "possible_values": []
                }
            },
            "shuffle_batch_92": {
                "variable": {
                    "value": "(X, Y)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_queues",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([trX, trY])",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_threads",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "capacity": {
                    "value": "batch_size * 64",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "batch_size * 32",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "data_input/small_norb/small_norb_download.py": {
        "tensorflow": {
            "DEFINE_string_9": {
                "name": {
                    "value": "dir",
                    "possible_values": []
                },
                "default": {
                    "value": "data_input/data/mnist",
                    "possible_values": []
                },
                "help": {
                    "value": "directory",
                    "possible_values": []
                }
            },
            "DEFINE_bool_10": {
                "name": {
                    "value": "force",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "rewrite or not",
                    "possible_values": []
                }
            },
            "run_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data_input/utils.py": {
        "tensorflow": {
            "repeat_11": {
                "variable": {
                    "value": "tr_data_set",
                    "possible_values": []
                },
                "input": {
                    "value": "n_repeat",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_11": {
                "variable": {
                    "value": "tr_data_set",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "repeat_12": {
                "variable": {
                    "value": "val_data_set",
                    "possible_values": []
                },
                "input": {
                    "value": "n_repeat",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_12": {
                "variable": {
                    "value": "val_data_set",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_26": {
                "variable": {
                    "value": "te_data_set",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Exists_33": {
                "filename": {
                    "value": "f",
                    "possible_values": [
                        [
                            "files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "get_checkpoint_state_11": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "possible_values": []
                }
            },
            "reset_default_graph_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_35": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_39": {
                "msg": {
                    "value": " Graph loaded",
                    "possible_values": []
                }
            },
            "FileWriter_45": {
                "variable": {
                    "value": "train_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "cfg.logdir + '/train'",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "FileWriter_46": {
                "variable": {
                    "value": "valid_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "cfg.logdir + '/valid'",
                    "possible_values": []
                }
            },
            "reset_default_graph_91": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_95": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_131": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "handle",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "Session_43": {
                "graph": {
                    "value": "model.graph",
                    "possible_values": []
                }
            },
            "Session_99": {
                "graph": {
                    "value": "model.graph",
                    "possible_values": []
                }
            },
            "info_102": {
                "msg": {
                    "value": "Model restored!",
                    "possible_values": []
                }
            },
            "info_123": {
                "msg": {
                    "value": " Start training...",
                    "possible_values": []
                }
            },
            "info_125": {
                "msg": {
                    "value": "Training done",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "Input",
                    "possible_values": []
                }
            },
            "latest_checkpoint_101": {
                "checkpoint_dir": {
                    "value": "cfg.logdir",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "tensorflow": {
            "Graph_14": {
                "variable": {
                    "value": "self.graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "merge_56": {
                "variable": {
                    "value": "self.merged_summary",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary_arr",
                    "possible_values": []
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "random_crop_101": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width, channel]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_102": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [height, width, channel])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=max_delta)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=contrast_lower, upper=contrast_upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_103": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [height, width, channel])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=max_delta)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=contrast_lower, upper=contrast_upper)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "max_delta",
                    "possible_values": [
                        [
                            "63",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_contrast_104": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [height, width, channel])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=max_delta)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=contrast_lower, upper=contrast_upper)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "contrast_lower",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "upper": {
                    "value": "contrast_upper",
                    "possible_values": [
                        [
                            "1.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_40": {
                "variable": {
                    "value": "self.one_hot_labels",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_label",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "to_int32_52": {
                "variable": {
                    "value": "activations_idx",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(outputs['activations'], axis=1), axis=1)",
                    "possible_values": []
                }
            },
            "equal_53": {
                "variable": {
                    "value": "correct_prediction",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(self.labels)",
                    "possible_values": []
                },
                "y": {
                    "value": "activations_idx",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(tf.nn.softmax(outputs['activations'], axis=1), axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "Pre_process",
                    "possible_values": []
                }
            },
            "per_image_standardization_39": {
                "variable": {
                    "value": "self.images",
                    "possible_values": []
                },
                "image": {
                    "value": "self.images",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdamOptimizer_48": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "Loss",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Optimizer",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "input": {
                    "value": "tf.nn.softmax(outputs['activations'], axis=1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_int32_53": {
                "x": {
                    "value": "self.labels",
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "correct_prediction",
                    "possible_values": [
                        [
                            "tf.equal(tf.to_int32(self.labels), activations_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "name",
                    "possible_values": []
                },
                "data": {
                    "value": "obj",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "logits": {
                    "value": "outputs['activations']",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "histogram_70": {
                "name": {
                    "value": "name",
                    "possible_values": []
                },
                "data": {
                    "value": "obj",
                    "possible_values": []
                }
            },
            "image_72": {
                "name": {
                    "value": "name",
                    "possible_values": []
                },
                "data": {
                    "value": "obj",
                    "possible_values": []
                }
            }
        }
    },
    "models/baseline.py": {
        "tensorflow": {
            "Graph_14": {
                "variable": {
                    "value": "self.graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "conv1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "max_pool_35": {
                "variable": {
                    "value": "pool1",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(self.x, filters=256, kernel_size=5, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "conv2",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv1, ksize=[1, 3, 3, 1], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "max_pool_38": {
                "variable": {
                    "value": "pool2",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool1, filters=256, kernel_size=5, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "conv3",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv2, ksize=[1, 3, 3, 1], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "max_pool_41": {
                "variable": {
                    "value": "pool3",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool2, filters=128, kernel_size=5, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv3, ksize=[1, 3, 3, 1], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(cfg.batch_size, -1)",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_pred",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_51": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "self.y",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_pred",
                    "possible_values": []
                }
            },
            "merge_56": {
                "variable": {
                    "value": "self.train_summary",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_summary",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "self.x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.X",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, self.height, self.width, self.channels]",
                    "possible_values": []
                }
            },
            "one_hot_20": {
                "variable": {
                    "value": "self.y",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_label",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdamOptimizer_27": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "equal_30": {
                "variable": {
                    "value": "correct_prediction",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(tf.argmax(self.y_pred, axis=1))",
                    "possible_values": []
                },
                "y": {
                    "value": "self.labels",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "possible_values": []
                }
            },
            "scalar_55": {
                "name": {
                    "value": "train/loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "to_int32_30": {
                "x": {
                    "value": "tf.argmax(self.y_pred, axis=1)",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "correct_prediction",
                    "possible_values": [
                        [
                            "tf.equal(tf.to_int32(tf.argmax(self.y_pred, axis=1)), self.labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "argmax_30": {
                "input": {
                    "value": "self.y_pred",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/matrix_caps_model.py": {
        "tensorflow": {
            "Graph_29": {
                "variable": {
                    "value": "self.graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "square_84": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, cfg.m_plus - self.activation)",
                    "possible_values": []
                }
            },
            "square_86": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, self.activation - cfg.m_minus)",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_l",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, cfg.m_plus - self.activation))",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_l, shape=(cfg.batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(cfg.batch_size, -1)",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_r",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, self.activation - cfg.m_minus))",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_r, shape=(cfg.batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(cfg.batch_size, -1)",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "self.margin_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(L_c, axis=1)",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "orgin",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cfg.batch_size, -1)",
                    "possible_values": []
                }
            },
            "square_102": {
                "variable": {
                    "value": "squared",
                    "possible_values": []
                },
                "x": {
                    "value": "self.decoded - orgin",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "self.reconstruction_err",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "squared",
                    "possible_values": [
                        [
                            "tf.square(self.decoded - orgin)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "recon_img",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.decoded",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cfg.batch_size, self.height, self.width, self.channels)",
                    "possible_values": []
                }
            },
            "merge_121": {
                "variable": {
                    "value": "self.train_summary",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_summary",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "conv1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "primaryCaps",
                    "possible_values": []
                },
                "tensor": {
                    "value": "primaryCaps",
                    "possible_values": [
                        [
                            "tf.reshape(primaryCaps, shape=[cfg.batch_size, -1, 8, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[cfg.batch_size, -1, 8, 1]",
                    "possible_values": []
                }
            },
            "multiply_74": {
                "variable": {
                    "value": "masked_caps",
                    "possible_values": []
                },
                "x": {
                    "value": "self.digitCaps",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.Y, (-1, self.num_label, 1, 1))",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "active_caps",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_caps",
                    "possible_values": [
                        [
                            "tf.multiply(self.digitCaps, tf.reshape(self.Y, (-1, self.num_label, 1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(cfg.batch_size, -1)",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "self.x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.X",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, self.height, self.width, self.channels]",
                    "possible_values": []
                }
            },
            "one_hot_34": {
                "variable": {
                    "value": "self.Y",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_label",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdamOptimizer_41": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.X",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cfg.batch_size, None)",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "self.x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.X",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, self.height, self.width, self.channels]",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cfg.batch_size,)",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "variable": {
                    "value": "self.Y",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_label",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "to_int32_51": {
                "variable": {
                    "value": "logits_idx",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(softmax(self.activation, axis=1), axis=1)",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "correct_prediction",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(self.labels)",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_idx",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(softmax(self.activation, axis=1), axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_54": {
                "variable": {
                    "value": "self.test_acc",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(0.0)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Conv1_layer",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "PrimaryCaps_layer",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "DigitCaps_layer",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "Decoder",
                    "possible_values": []
                }
            },
            "maximum_84": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "cfg.m_plus - self.activation",
                    "possible_values": []
                }
            },
            "maximum_86": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "self.activation - cfg.m_minus",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "L_c",
                    "possible_values": [
                        [
                            "T_c * max_l + cfg.lambda_val * (1 - T_c) * max_r",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "scalar_115": {
                "name": {
                    "value": "train/margin_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.margin_loss",
                    "possible_values": []
                }
            },
            "scalar_116": {
                "name": {
                    "value": "train/reconstruction_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconstruction_err",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "train/total_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "image_119": {
                "name": {
                    "value": "reconstruction_img",
                    "possible_values": []
                },
                "data": {
                    "value": "recon_img",
                    "possible_values": [
                        [
                            "tf.reshape(self.decoded, shape=(cfg.batch_size, self.height, self.width, self.channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_120": {
                "name": {
                    "value": "activation",
                    "possible_values": []
                },
                "data": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "self.Y",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.num_label, 1, 1)",
                    "possible_values": []
                }
            },
            "argmax_51": {
                "input": {
                    "value": "softmax(self.activation, axis=1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_int32_52": {
                "x": {
                    "value": "self.labels",
                    "possible_values": []
                }
            },
            "cast_53": {
                "x": {
                    "value": "correct_prediction",
                    "possible_values": [
                        [
                            "tf.equal(tf.to_int32(self.labels), logits_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            }
        }
    },
    "models/vector_caps_model.py": {
        "tensorflow": {
            "sqrt_49": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(digit_caps), axis=-1) + epsilon",
                    "possible_values": []
                }
            },
            "square_97": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, self.m_plus - activation)",
                    "possible_values": []
                }
            },
            "square_99": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, activation - self.m_minus)",
                    "possible_values": []
                }
            },
            "flatten_104": {
                "variable": {
                    "value": "max_l",
                    "possible_values": []
                },
                "structure": {
                    "value": "max_l",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, self.m_plus - activation))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(max_l)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_105": {
                "variable": {
                    "value": "max_r",
                    "possible_values": []
                },
                "structure": {
                    "value": "max_r",
                    "possible_values": [
                        [
                            "tf.square(tf.maximum(0.0, activation - self.m_minus))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(max_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "margin_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(l_c, axis=1)",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "Convolution_layer",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "PrimaryCaps_layer",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "DigitCaps_layer",
                    "possible_values": []
                }
            },
            "flatten_75": {
                "variable": {
                    "value": "active_caps",
                    "possible_values": []
                },
                "structure": {
                    "value": "masked_v",
                    "possible_values": [
                        [
                            "tf.multiply(digit_caps, tf.reshape(self.one_hot_labels, (-1, 10, 1)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(digit_caps, tf.reshape(pre_label, (-1, 10, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_77": {
                "variable": {
                    "value": "fc1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "active_caps",
                    "possible_values": [
                        [
                            "tf.layers.flatten(masked_v)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "fc2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "possible_values": [
                        [
                            "tf.layers.dense(active_caps, units=512)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "decoded",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.height * self.width * self.channels",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "recon_img",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoded",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, units=self.height * self.width * self.channels, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "outputs['decoded']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.height, self.width, self.channels)",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "Margin_loss",
                    "possible_values": []
                }
            },
            "flatten_119": {
                "variable": {
                    "value": "origin",
                    "possible_values": []
                },
                "structure": {
                    "value": "images",
                    "possible_values": []
                }
            },
            "square_121": {
                "variable": {
                    "value": "squared",
                    "possible_values": []
                },
                "x": {
                    "value": "decoded - origin",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "reconstruction_err",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "squared",
                    "possible_values": [
                        [
                            "tf.square(decoded - origin)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "Masking",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "variable": {
                    "value": "masked_v",
                    "possible_values": []
                },
                "x": {
                    "value": "digit_caps",
                    "possible_values": [
                        [
                            "capslayer.layers.vector_fully_connected(primary_caps, self.num_label, cfg.digit_caps_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(self.one_hot_labels, (-1, 10, 1))",
                    "possible_values": []
                }
            },
            "to_int32_65": {
                "variable": {
                    "value": "argmax_idx",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(activation, axis=1)",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "argmax_idx",
                    "possible_values": []
                },
                "tensor": {
                    "value": "argmax_idx",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(activation, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(argmax_idx, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "possible_values": []
                }
            },
            "one_hot_67": {
                "variable": {
                    "value": "pre_label",
                    "possible_values": []
                },
                "indices": {
                    "value": "argmax_idx",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(activation, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(argmax_idx, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_label",
                    "possible_values": []
                }
            },
            "multiply_68": {
                "variable": {
                    "value": "masked_v",
                    "possible_values": []
                },
                "x": {
                    "value": "digit_caps",
                    "possible_values": [
                        [
                            "capslayer.layers.vector_fully_connected(primary_caps, self.num_label, cfg.digit_caps_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(pre_label, (-1, 10, 1))",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "Decoder",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "self.m_plus - activation",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "x": {
                    "value": "0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "activation - self.m_minus",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "l_c",
                    "possible_values": [
                        [
                            "t_c * max_l + self.lambda_val * (1 - t_c) * max_r",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "name_scope_118": {
                "name": {
                    "value": "Reconstruct_loss",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.square(digit_caps)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "square_49": {
                "x": {
                    "value": "digit_caps",
                    "possible_values": [
                        [
                            "capslayer.layers.vector_fully_connected(primary_caps, self.num_label, cfg.digit_caps_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "self.one_hot_labels",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 10, 1)",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(digit_caps), axis=-1) + epsilon)",
                            "Call"
                        ],
                        [
                            "outputs['activations']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "pre_label",
                    "possible_values": [
                        [
                            "tf.one_hot(argmax_idx, self.num_label)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 10, 1)",
                    "possible_values": []
                }
            }
        }
    }
}