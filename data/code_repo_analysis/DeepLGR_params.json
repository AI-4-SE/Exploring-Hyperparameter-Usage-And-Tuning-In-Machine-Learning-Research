{
    "model.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(t_params) * in_channels",
                            "BinOp"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.senet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*se_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features + features // 8 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.deconvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_119": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "features // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(t_params) * in_channels",
                            "BinOp"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * upscale_factor * upscale_factor",
                            "BinOp"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_136": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale_factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d1, d2, d3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d3, n_filters * self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d1, height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d2, width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.core, self.F)",
                            "Call"
                        ],
                        [
                            "region_param.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(region_param, self.H)",
                            "Call"
                        ],
                        [
                            "region_param.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(region_param, self.W)",
                            "Call"
                        ],
                        [
                            "region_param.unsqueeze(0).repeat(b, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "region_param.reshape(b, -1, self.n_filters, self.height * self.width).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.L, self.R).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "region_param.repeat(b, 1, 1).reshape(b, -1, self.n_filters, self.out_channels)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.core, self.F)",
                            "Call"
                        ],
                        [
                            "region_param.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(region_param, self.H)",
                            "Call"
                        ],
                        [
                            "region_param.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(region_param, self.W)",
                            "Call"
                        ],
                        [
                            "region_param.unsqueeze(0).repeat(b, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "region_param.reshape(b, -1, self.n_filters, self.height * self.width).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.L, self.R).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "region_param.repeat(b, 1, 1).reshape(b, -1, self.n_filters, self.out_channels)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_features * region_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(height * width, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(10, n_filters * self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, self.out_channels, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "region_param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_features * region_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.senet(out1)",
                            "Call"
                        ],
                        [
                            "torch.add(out1, out2)",
                            "Call"
                        ],
                        [
                            "self.glonet(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(b, self.n_filters, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(region_features * region_param, 2).reshape(b, self.height, self.width, -1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape(b, self.n_filters, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(region_features * region_param, 2).reshape(b, self.height, self.width, -1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.output_conv(out)",
                            "Call"
                        ],
                        [
                            "priors + [x]",
                            "BinOp"
                        ],
                        [
                            "self.ps(x)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}