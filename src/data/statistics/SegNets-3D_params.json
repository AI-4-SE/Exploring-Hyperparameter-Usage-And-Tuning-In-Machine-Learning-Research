{
    "cyclegan.py": {
        "tensorflow": {
            "trainable_variables_298": {
                "variable": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_318": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_330": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_339": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_346": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_698": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_710": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_711": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, self.input_c_dim + self.output_c_dim]",
                            "List"
                        ],
                        [
                            "[None, None, None, None, self.input_c_dim + self.output_c_dim]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "real_A_and_B_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "psnr_152": {
                "variable": {
                    "value": "self.gAPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.fake_A_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_154": {
                "variable": {
                    "value": "self.gAPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "psnr_204": {
                "variable": {
                    "value": "self.gA2PSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.fake_A__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "psnr_205": {
                "variable": {
                    "value": "self.gCidtPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.identitySR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.real_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShapeC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, self.sr_c_dim]",
                            "List"
                        ],
                        [
                            "[None, None, None, None, self.sr_c_dim]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "real_C_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.real_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShapeA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, self.input_c_dim]",
                            "List"
                        ],
                        [
                            "[None, None, None, None, self.input_c_dim]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "real_A_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_129": {
                "variable": {
                    "value": "self.DB_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminatorDummy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_130": {
                "variable": {
                    "value": "self.DB_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminatorDummy2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShapeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, self.output_c_dim]",
                            "List"
                        ],
                        [
                            "[None, None, None, None, self.output_c_dim]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "real_B_images_SR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "self.DB_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_156": {
                "input": {
                    "value": "self.DB_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "self.DB_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_171": {
                "input": {
                    "value": "self.DC_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "self.DC_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_181": {
                "input": {
                    "value": "self.DC_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "psnr_290": {
                "variable": {
                    "value": "self.gBPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.fake_B_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShapeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, self.output_c_dim]",
                            "List"
                        ],
                        [
                            "[None, None, None, None, self.output_c_dim]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "real_B_images_SR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_198": {
                "input": {
                    "value": "self.DC_fake_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_199": {
                "input": {
                    "value": "self.DC_fake_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_200": {
                "input": {
                    "value": "self.DC_real_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "psnr_238": {
                "variable": {
                    "value": "self.gBidtPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.identitySR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_240": {
                "variable": {
                    "value": "self.identity_loss_SR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_241": {
                "variable": {
                    "value": "self.gBidtPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_251": {
                "variable": {
                    "value": "self.g_loss_B_variation_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "psnr_285": {
                "variable": {
                    "value": "self.gBPSNR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.fake_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "glcmLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_280": {
                "input": {
                    "value": "self.DA_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_292": {
                "input": {
                    "value": "self.DA_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_293": {
                "input": {
                    "value": "self.DA_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_243": {
                "input": {
                    "value": "self.DB_fake_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "input": {
                    "value": "self.DB_fake_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_245": {
                "input": {
                    "value": "self.DB_real_idt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "input_tensor": {
                    "value": "tf.abs(compute8WayGLCM(self.real_B, numLevels, span) - compute8WayGLCM(self.fake_B, numLevels, span))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "GLCMGeneratorLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "input_tensor": {
                    "value": "tf.abs(tf.squeeze(tf.one_hot(self.real_B, self.options.num_classes)) - tf.one_hot(tf.argmax(self.fake_B, self.options.nDims + 1), self.options.num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_259": {
                "x": {
                    "value": "compute8WayGLCM(self.real_B, numLevels, span) - compute8WayGLCM(self.fake_B, numLevels, span)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_287": {
                "x": {
                    "value": "tf.squeeze(tf.one_hot(self.real_B, self.options.num_classes)) - tf.one_hot(tf.argmax(self.fake_B, self.options.nDims + 1), self.options.num_classes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "input": {
                    "value": "tf.one_hot(self.real_B, self.options.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_287": {
                "indices": {
                    "value": "self.real_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.options.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_287": {
                "input": {
                    "value": "self.fake_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.options.nDims + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "glcmLosses.py": {
        "tensorflow": {
            "sort_56": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2 + img1 * 2 ** numLevels",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.framework.sort(inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_59": {
                "variable": {
                    "value": "indsint",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "segment_sum_62": {
                "variable": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2 + img1 * 2 ** numLevels",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.framework.sort(inds)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "indsint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(inds), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "2 ** numLevels * 2 ** numLevels - tf.shape(glcm)[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[glcm, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.segment_sum(inds, indsint)",
                            "Call"
                        ],
                        [
                            "tf.concat([glcm, pad], 0)",
                            "Call"
                        ],
                        [
                            "glcm / np.linspace(1, 2 ** numLevels * 2 ** numLevels, 2 ** numLevels * 2 ** numLevels)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(glcm, [2 ** numLevels, 2 ** numLevels])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(glcm, 2)",
                            "Call"
                        ],
                        [
                            "glcm / tf.reduce_prod(tf.cast(tf.shape(image), tf.float32))",
                            "BinOp"
                        ],
                        [
                            "session.run([GLCM, GLCM2, glcmLoss], {image: img, image2: noisy})",
                            "Call"
                        ],
                        [
                            "np.array(glcm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2 ** numLevels, 2 ** numLevels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.segment_sum(inds, indsint)",
                            "Call"
                        ],
                        [
                            "tf.concat([glcm, pad], 0)",
                            "Call"
                        ],
                        [
                            "glcm / np.linspace(1, 2 ** numLevels * 2 ** numLevels, 2 ** numLevels * 2 ** numLevels)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(glcm, [2 ** numLevels, 2 ** numLevels])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(glcm, 2)",
                            "Call"
                        ],
                        [
                            "glcm / tf.reduce_prod(tf.cast(tf.shape(image), tf.float32))",
                            "BinOp"
                        ],
                        [
                            "session.run([GLCM, GLCM2, glcmLoss], {image: img, image2: noisy})",
                            "Call"
                        ],
                        [
                            "np.array(glcm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, 1]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "tempImagePlaceholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, None, 1]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "tempImagePlaceholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_84": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "glcmLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(GLCM - GLCM2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "GLCMGeneratorLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "GLCMs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[GLCMs, GLCM]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "imageLeveled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + 1.0",
                            "BinOp"
                        ],
                        [
                            "imageLeveled / 2.0 * maxGrey + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "imageLeveled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + 1.0",
                            "BinOp"
                        ],
                        [
                            "imageLeveled / 2.0 * maxGrey + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageLeveled[:, -start1:nx - end1, -start2:ny - end2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(img1, [-1]) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageLeveled[:, end1:nx + start1, end2:ny + start2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(img2, [-1]) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_59": {
                "x": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2 + img1 * 2 ** numLevels",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.framework.sort(inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_70": {
                "input_tensor": {
                    "value": "tf.cast(tf.shape(image), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_99": {
                "x": {
                    "value": "GLCM - GLCM2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_70": {
                "x": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "glcm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.segment_sum(inds, indsint)",
                            "Call"
                        ],
                        [
                            "tf.concat([glcm, pad], 0)",
                            "Call"
                        ],
                        [
                            "glcm / np.linspace(1, 2 ** numLevels * 2 ** numLevels, 2 ** numLevels * 2 ** numLevels)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(glcm, [2 ** numLevels, 2 ** numLevels])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(glcm, 2)",
                            "Call"
                        ],
                        [
                            "glcm / tf.reduce_prod(tf.cast(tf.shape(image), tf.float32))",
                            "BinOp"
                        ],
                        [
                            "session.run([GLCM, GLCM2, glcmLoss], {image: img, image2: noisy})",
                            "Call"
                        ],
                        [
                            "np.array(glcm)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', inputShape, name='tempImagePlaceholder')",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_114": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "gpuList",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpuIDs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_115": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(visible_device_list=gpuList)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_116": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "module.py": {
        "tensorflow": {
            "reshape_765": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.one_hot(labels, logits.shape[nDims - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, logits.shape[nDims - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_766": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, (-1, logits.shape[nDims - 1]))",
                            "Call"
                        ],
                        [
                            "logits + epsilon",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, logits.shape[nDims - 1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_767": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_770": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, (-1, logits.shape[nDims - 1]))",
                            "Call"
                        ],
                        [
                            "logits + epsilon",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_23": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(c0, options.gf_dim, 9, 1, name='g_e1_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(c0, options.gf_dim, 7, 1, name='g_e2_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(c0, options.gf_dim, 5, 1, name='g_e3_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(d, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "space_to_depth_66": {
                "variable": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(image, options.gf_dim, 4, 1, name='g_e1_conv'))",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e1, 2, name='g_e1_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(image, options.gf_dim, name='g_e1_conv'))",
                            "Call"
                        ],
                        [
                            "batchnormSR(conv2d(image, options.gf_dim, name='g_e1_conv'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e1_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_69": {
                "variable": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e1), options.gf_dim * 2, 4, 1, name='g_e2_conv'), 'g_bn_e2')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e2, 2, name='g_e2_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e1), options.gf_dim * 2, name='g_e2_conv'), 'g_bn_e2')",
                            "Call"
                        ],
                        [
                            "batchnormSR(conv2d(lrelu(e1), options.gf_dim * 2, name='g_e2_conv'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e2_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_72": {
                "variable": {
                    "value": "e3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e2), options.gf_dim * 4, 4, 1, name='g_e3_conv'), 'g_bn_e3')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e3, 2, name='g_e3_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e2), options.gf_dim * 4, name='g_e3_conv'), 'g_bn_e3')",
                            "Call"
                        ],
                        [
                            "batchnormSR(conv2d(lrelu(e2), options.gf_dim * 4, name='g_e3_conv'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e3_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_75": {
                "variable": {
                    "value": "e4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e3), options.gf_dim * 8, 4, 1, name='g_e4_conv'), 'g_bn_e4')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e4, 2, name='g_e4_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e3), options.gf_dim * 8, name='g_e4_conv'), 'g_bn_e4')",
                            "Call"
                        ],
                        [
                            "batchnormSR(conv2d(lrelu(e3), options.gf_dim * 8, name='g_e4_conv'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e4_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_78": {
                "variable": {
                    "value": "e5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e4), options.gf_dim * 8, 4, 1, name='g_e5_conv'), 'g_bn_e5')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e5, 2, name='g_e5_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e4), options.gf_dim * 8, name='g_e5_conv'), 'g_bn_e5')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e5_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_81": {
                "variable": {
                    "value": "e6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e5), options.gf_dim * 8, 4, 1, name='g_e6_conv'), 'g_bn_e6')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e6, 2, name='g_e6_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e5), options.gf_dim * 8, name='g_e6_conv'), 'g_bn_e6')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e6_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_84": {
                "variable": {
                    "value": "e7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e6), options.gf_dim * 8, 4, 1, name='g_e7_conv'), 'g_bn_e7')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e7, 2, name='g_e7_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e6), options.gf_dim * 8, name='g_e7_conv'), 'g_bn_e7')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e7_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_87": {
                "variable": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, 4, 1, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e8, 2, name='g_e8_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e8), options.gf_dim * 8, 4, 1, name='g_bottom_conv'), 'g_bn_bottom')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(e8, 2, name='g_bottom_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_e8_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depth_to_space_91": {
                "variable": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, 4, 1, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e8, 2, name='g_e8_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e8), options.gf_dim * 8, 4, 1, name='g_bottom_conv'), 'g_bn_bottom')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(e8, 2, name='g_bottom_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_bottom_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(e8), options.gf_dim * 8, 4, 1, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d1, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, stride, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_94": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d1, 'g_bn_d1'), e7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_96": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(e8), options.gf_dim * 8, 4, 1, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d1, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, stride, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d1_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d1), options.gf_dim * 8, 4, 1, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d2, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, stride, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_99": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d2, 'g_bn_d2'), e6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_101": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d1), options.gf_dim * 8, 4, 1, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d2, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, stride, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d2_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d2), options.gf_dim * 8, 4, 1, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d3, 2, name='g_d3_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_104": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d3, 'g_bn_d3'), e5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_106": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d2), options.gf_dim * 8, 4, 1, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d3, 2, name='g_d3_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d3_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d4, 'g_bn_d4'), e4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_110": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d3), options.gf_dim * 8, 4, 1, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d4, 2, name='g_d4_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e4), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d4, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d4), e3], 3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d4_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d5, 'g_bn_d5'), e3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_114": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d4), options.gf_dim * 4, 4, 1, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d5, 2, name='g_d5_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d5, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d5), e2], 3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d5_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d6, 'g_bn_d6'), e2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_118": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d5), options.gf_dim * 2, 4, 1, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d6, 2, name='g_d6_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d6, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d6), e1], 3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d6_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d7, 'g_bn_d7'), e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_122": {
                "variable": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d6), options.gf_dim, 4, 1, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d7, 2, name='g_d7_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d6), options.gf_dim, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d7_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depth_to_space_153": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 9, 1, name='g_e1_c'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 7, 1, name='g_e2_c'))",
                            "Call"
                        ],
                        [
                            "c0",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 5, 1, name='g_e3_c'))",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 3, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i)",
                            "Call"
                        ],
                        [
                            "deep + shallow",
                            "BinOp"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv2d(c0, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c') + wideOut)",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 7, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i, dropout_rate=dropout_rate)",
                            "Call"
                        ],
                        [
                            "deep",
                            "variable"
                        ],
                        [
                            "conv2d(c0, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d1_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 9, 1, name='g_e1_c'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 7, 1, name='g_e2_c'))",
                            "Call"
                        ],
                        [
                            "c0",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 5, 1, name='g_e3_c'))",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 3, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i)",
                            "Call"
                        ],
                        [
                            "deep + shallow",
                            "BinOp"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv2d(c0, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c') + wideOut)",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 7, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i, dropout_rate=dropout_rate)",
                            "Call"
                        ],
                        [
                            "deep",
                            "variable"
                        ],
                        [
                            "conv2d(c0, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ]
                    ]
                }
            },
            "depth_to_space_157": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 9, 1, name='g_e1_c'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 7, 1, name='g_e2_c'))",
                            "Call"
                        ],
                        [
                            "c0",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 5, 1, name='g_e3_c'))",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 3, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i)",
                            "Call"
                        ],
                        [
                            "deep + shallow",
                            "BinOp"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv2d(c0, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c') + wideOut)",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 7, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i, dropout_rate=dropout_rate)",
                            "Call"
                        ],
                        [
                            "deep",
                            "variable"
                        ],
                        [
                            "conv2d(c0, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "g_d2_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 9, 1, name='g_e1_c'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 7, 1, name='g_e2_c'))",
                            "Call"
                        ],
                        [
                            "c0",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(conv2d(c0, options.gf_dim, 5, 1, name='g_e3_c'))",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 3, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i)",
                            "Call"
                        ],
                        [
                            "deep + shallow",
                            "BinOp"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "conv2d(c0, options.srf_dim * 4, 3, 1, name='g_presubconv_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(c0, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv2d(c0, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c') + wideOut)",
                            "Call"
                        ],
                        [
                            "conv2d(image, options.srf_dim, 7, 1, name='g_e_shallow_c')",
                            "Call"
                        ],
                        [
                            "residualBlock(c0, options.srf_dim, name='g_residual_%d' % i, dropout_rate=dropout_rate)",
                            "Call"
                        ],
                        [
                            "deep",
                            "variable"
                        ],
                        [
                            "conv2d(c0, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_160": {
                "variable": {
                    "value": "wideOut",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.depth_to_space(conv2d(shallow, options.output_c_dim * 16, 5, 1, name='wideSkip'), 4, name='wideSubPix')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_161": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(c0, options.output_c_dim, 3, 1, padding='SAME', name='g_pred_c') + wideOut",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_236": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(e8), options.gf_dim * 8, 4, 1, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d1, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, stride, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_237": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d1, 'g_bn_d1'), e7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_241": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d1), options.gf_dim * 8, 4, 1, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d2, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, stride, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_242": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d2, 'g_bn_d2'), e6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d2), options.gf_dim * 8, 4, 1, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d3, 2, name='g_d3_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_247": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d3, 'g_bn_d3'), e5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_251": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d4, 'g_bn_d4'), e4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_255": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d5, 'g_bn_d5'), e3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_259": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d6, 'g_bn_d6'), e2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_263": {
                "variable": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d7, 'g_bn_d7'), e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(image, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'), 'g_e1_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_295": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(c1, options.gf_dim * 2, 3, 2, name='g_e2_c'), 'g_e2_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(c2, options.gf_dim * 4, 3, 2, name='g_e3_c'), 'g_e3_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_311": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(d1, 'g_d1_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_313": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(d2, 'g_d2_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_315": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(d2, options.output_c_dim, 7, 1, padding='SAME', name='g_pred_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_329": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))), dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_330": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))), dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_331": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))), dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_332": {
                "variable": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))), dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e5_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_338": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e6_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_341": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e7_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_344": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e8_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_371": {
                "variable": {
                    "value": "deep",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormSR(conv2d(c0, options.srf_dim, 7, 1, name='g_e_deep_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_399": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d3), options.gf_dim * 8, 4, 1, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d4, 2, name='g_d4_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e4), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d4, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d4), e3], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_400": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batchnormSR(d4), e3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_404": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d4), options.gf_dim * 4, 4, 1, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d5, 2, name='g_d5_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d5, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d5), e2], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_405": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batchnormSR(d5), e2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_409": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d5), options.gf_dim * 2, 4, 1, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d6, 2, name='g_d6_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d6, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d6), e1], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_410": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batchnormSR(d6), e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_745": {
                "variable": {
                    "value": "d8",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_750": {
                "input_tensor": {
                    "value": "tf.abs(in_ - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_753": {
                "input_tensor": {
                    "value": "(in_ - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_756": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_759": {
                "input_tensor": {
                    "value": "tf.image.total_variation(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_775": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(labels * tf.log(softmax + epsilon), 1.0 / segWeights), axis=[1])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "psnr_778": {
                "a": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_",
                            "Method Argument"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "max_val": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_18": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_41": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(r, options.gf_dim, 3, 1, name='g_d1_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_126": {
                "x": {
                    "value": "d8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d7), options.output_c_dim, 4, 1, name='g_d8')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d7), options.output_c_dim, name='g_d8')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d6), options.num_classes, name='g_d8')",
                            "Call"
                        ],
                        [
                            "conv2d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "conv3d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "conv2d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv3d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c'))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_138": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_269": {
                "x": {
                    "value": "d8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d7), options.output_c_dim, 4, 1, name='g_d8')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d7), options.output_c_dim, name='g_d8')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d6), options.num_classes, name='g_d8')",
                            "Call"
                        ],
                        [
                            "conv2d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "conv3d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "conv2d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(conv3d(y4, options.num_classes, 1, 1, padding='SAME', name='g_pred_c'))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_361": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_362": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_382": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_432": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_460": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_465": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_470": {
                "variable": {
                    "value": "y4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y4, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_482": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_492": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_515": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_520": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_525": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_530": {
                "variable": {
                    "value": "y4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y4, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_633": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_643": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_666": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_671": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_676": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_681": {
                "variable": {
                    "value": "y4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y4, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_693": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'EDSRYDW'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'segNetYDW3D'",
                            "Method Argument"
                        ],
                        [
                            "'UResNetYDW'",
                            "Method Argument"
                        ],
                        [
                            "'uResNetp2p3D'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resEDSR'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ],
                        [
                            "'resBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_703": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_726": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_731": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_736": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y3, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_741": {
                "variable": {
                    "value": "y4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y4, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_750": {
                "x": {
                    "value": "in_ - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_756": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, (-1, logits.shape[nDims - 1]))",
                            "Call"
                        ],
                        [
                            "logits + epsilon",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.one_hot(labels, logits.shape[nDims - 1]), [-1, logits.shape[nDims - 1]])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "total_variation_759": {
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_765": {
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.one_hot(labels, logits.shape[nDims - 1]), [-1, logits.shape[nDims - 1]])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "logits.shape[nDims - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_772": {
                "input_tensor": {
                    "value": "tf.multiply(labels * tf.log(softmax + epsilon), 1.0 / segWeights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.space_to_depth(c0 + c1, factor, name='g_d1_subpix')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.space_to_depth(d, factor, name='g_d2_subpix')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(d, options.gf_dim, 3, 1, name='g_d2_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_92": {
                "features": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, 4, 1, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e8, 2, name='g_e8_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e8), options.gf_dim * 8, 4, 1, name='g_bottom_conv'), 'g_bn_bottom')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(e8, 2, name='g_bottom_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_97": {
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(e8), options.gf_dim * 8, 4, 1, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d1, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, stride, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d1), options.gf_dim * 8, 4, 1, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d2, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, stride, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_107": {
                "features": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d2), options.gf_dim * 8, 4, 1, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d3, 2, name='g_d3_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_111": {
                "features": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d3), options.gf_dim * 8, 4, 1, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d4, 2, name='g_d4_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e4), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d4, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d4), e3], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_115": {
                "features": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d4), options.gf_dim * 4, 4, 1, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d5, 2, name='g_d5_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d5, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d5), e2], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_119": {
                "features": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d5), options.gf_dim * 2, 4, 1, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d6, 2, name='g_d6_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d6, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d6), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_123": {
                "features": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d6), options.gf_dim, 4, 1, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d7, 2, name='g_d7_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d6), options.gf_dim, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "depth_to_space_160": {
                "input": {
                    "value": "conv2d(shallow, options.output_c_dim * 16, 5, 1, name='wideSkip')",
                    "type": "Call",
                    "possible_values": []
                },
                "block_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "wideSubPix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_235": {
                "features": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, 4, 1, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e8, 2, name='g_e8_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e8), options.gf_dim * 8, 4, 1, name='g_bottom_conv'), 'g_bn_bottom')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(e8, 2, name='g_bottom_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_240": {
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(e8), options.gf_dim * 8, 4, 1, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d1, 2, name='g_d1_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, stride, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_245": {
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d1), options.gf_dim * 8, 4, 1, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d2, 2, name='g_d2_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, stride, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_250": {
                "features": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d2), options.gf_dim * 8, 4, 1, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d3, 2, name='g_d3_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_254": {
                "features": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d3), options.gf_dim * 8, 4, 1, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d4, 2, name='g_d4_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e4), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d4, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d4), e3], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_258": {
                "features": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d4), options.gf_dim * 4, 4, 1, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d5, 2, name='g_d5_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d5, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d5), e2], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_262": {
                "features": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d5), options.gf_dim * 2, 4, 1, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d6, 2, name='g_d6_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d6, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d6), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_266": {
                "features": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d6), options.gf_dim, 4, 1, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d7, 2, name='g_d7_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d6), options.gf_dim, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_329": {
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_330": {
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_331": {
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_332": {
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_335": {
                "features": {
                    "value": "batchnormSR(conv2d(x, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e5_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_338": {
                "features": {
                    "value": "batchnormSR(conv2d(x, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e6_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_341": {
                "features": {
                    "value": "batchnormSR(conv2d(x, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e7_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_344": {
                "features": {
                    "value": "batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e8_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_398": {
                "features": {
                    "value": "e4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e3), options.gf_dim * 8, 4, 1, name='g_e4_conv'), 'g_bn_e4')",
                            "Call"
                        ],
                        [
                            "tf.nn.space_to_depth(e4, 2, name='g_e4_subpix')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(lrelu(e3), options.gf_dim * 8, name='g_e4_conv'), 'g_bn_e4')",
                            "Call"
                        ],
                        [
                            "batchnormSR(conv2d(lrelu(e3), options.gf_dim * 8, name='g_e4_conv'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_403": {
                "features": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d3), options.gf_dim * 8, 4, 1, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d4, 2, name='g_d4_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(e4), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d4, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d4), e3], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_408": {
                "features": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d4), options.gf_dim * 4, 4, 1, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d5, 2, name='g_d5_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d5, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d5), e2], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_413": {
                "features": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(d5), options.gf_dim * 2, 4, 1, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(d6, 2, name='g_d6_subpix')",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d6, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([batchnormSR(d6), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, dim, 1, 1, padding='SAME', name=name + '_c0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_434": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_443": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_445": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_447": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_450": {
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3d(x, dim, 1, 1, padding='SAME', name=name + '_c0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_494": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_503": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_505": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_507": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_510": {
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_642": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, dim, 1, 1, padding='SAME', name=name + '_c0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_645": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_654": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_656": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_658": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_661": {
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_702": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3d(x, dim, 1, 1, padding='SAME', name=name + '_c0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_705": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2')))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_714": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ],
                        [
                            "residualBlock(x, options.gf_dim, ks=4, s=1, name='resBlock1', dropout_rate=dropout_rate, resSkip=False)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_716": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x1, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool1'), options.gf_dim * 2, ks=4, s=1, name='resBlock2', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_718": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool2'), options.gf_dim * 4, ks=4, s=1, name='resBlock3', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_721": {
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))), dropout_rate), ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool(x3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ],
                        [
                            "residualBlock(tf.nn.max_pool3d(x3, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding='SAME', name='pool3'), options.gf_dim * 8, ks=4, s=1, name='resBlock4', dropout_rate=dropout_rate, resSkip=resSkip)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_772": {
                "x": {
                    "value": "labels * tf.log(softmax + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / segWeights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_329": {
                "features": {
                    "value": "batchnormSR(conv2d(x, options.gf_dim, 7, 1, padding='SAME', name='g_e1_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_330": {
                "features": {
                    "value": "batchnormSR(conv2d(x1, options.gf_dim * 2, 7, 1, padding='SAME', name='g_e2_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_331": {
                "features": {
                    "value": "batchnormSR(conv2d(x2, options.gf_dim * 4, 7, 1, padding='SAME', name='g_e3_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_332": {
                "features": {
                    "value": "batchnormSR(conv2d(x3, options.gf_dim * 8, 7, 1, padding='SAME', name='g_e4_c'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_437": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_497": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_648": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_708": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2')), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv2d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormSR(conv3d(x, dim, ks, s, padding='SAME', name=name + '_c1')))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))), dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "space_to_depth_44": {
                "input": {
                    "value": "c0 + c1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "block_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "g_d1_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_depth_47": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(r, options.gf_dim, 3, 1, name='g_d1_c'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.space_to_depth(c0 + c1, factor, name='g_d1_subpix'))",
                            "Call"
                        ],
                        [
                            "conv2d(d, options.gf_dim, 3, 1, name='g_d1_c')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.space_to_depth(d, factor, name='g_d2_subpix'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(d, options.gf_dim, 3, 1, name='g_d2_c'))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "g_d2_subpix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_434": {
                "features": {
                    "value": "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_494": {
                "features": {
                    "value": "batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_645": {
                "features": {
                    "value": "batchnormSR(conv2d(y, dim, ks, s, padding='SAME', name=name + '_c2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_698": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_705": {
                "features": {
                    "value": "batchnormSR(conv3d(y, dim, ks, s, padding='SAME', name=name + '_c2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_772": {
                "x": {
                    "value": "softmax + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "constant_107": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(size)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "np.outer(k, k.T)",
                            "Call"
                        ],
                        [
                            "tf.constant(k, dtype=tf.float32, shape=(size, size, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(size, size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preluLayer(x)",
                            "Call"
                        ],
                        [
                            "1 / factor * (i - np.floor(size / 2) + 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, filter=filter, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preluLayer(x)",
                            "Call"
                        ],
                        [
                            "1 / factor * (i - np.floor(size / 2) + 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, filter=filter, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_24": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_26": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_56": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preluLayer(x)",
                            "Call"
                        ],
                        [
                            "1 / factor * (i - np.floor(size / 2) + 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, filter=filter, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape()[-1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_108": {
                "values": {
                    "value": "[k, k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_36": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv3d_40": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'dense_layer'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv3d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv3d_transpose_44": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "PReLU_59": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_81": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_22": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_23": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_83": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}