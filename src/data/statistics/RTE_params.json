{
    "KAIN/esim_restore.py": {
        "sklearn": {
            "confusion_matrix_121": {
                "variable": {
                    "value": "confuse_m",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "random_uniform_initializer_172": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_201": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_fn": {
                    "value": "load_pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "run_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_185": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "KAIN/snli_train_lr.py": {
        "sklearn": {
            "confusion_matrix_118": {
                "variable": {
                    "value": "confuse_m",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "random_uniform_initializer_170": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_187": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_173": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_183": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MIMN/src/myutils.py": {
        "sklearn": {
            "confusion_matrix_180": {
                "variable": {
                    "value": "confuse_m",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label_total",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "newESIM/esim_restore.py": {
        "sklearn": {
            "confusion_matrix_103": {
                "variable": {
                    "value": "confuse_m",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "random_uniform_initializer_131": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_149": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_160": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_fn": {
                    "value": "load_pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "run_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_134": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/ops_cudnn_bilstm.py": {
        "tensorflow": {
            "transpose_39": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "cudnn_params",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RNNParams",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[est_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_63": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([2 * num_layers, 1, hidden_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_c, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[2 * num_layers, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_153": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/snli_model_mask_lr.py": {
        "tensorflow": {
            "Variable_34": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_38": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_188": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_189": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_394": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_395": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_421": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../data/glove/snli_glove.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_90": {
                "variable": {
                    "value": "diff_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_91": {
                "variable": {
                    "value": "diff_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_93": {
                "variable": {
                    "value": "mul_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "variable": {
                    "value": "mul_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x_output, self.weighted_y, diff_xy, mul_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.y_output, self.weighted_x, diff_yx, mul_yx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_129": {
                "variable": {
                    "value": "v_xymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_131": {
                "variable": {
                    "value": "v_xyave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mxy_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.x_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_133": {
                "variable": {
                    "value": "v_yxmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_135": {
                "variable": {
                    "value": "v_yxave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(myx_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.y_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_139": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax, v_yxmax, v_yxave]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_156": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_161": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_166": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_169": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_225": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "weighted_qt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_fn_257": {
                "fn": {
                    "value": "singel_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp1, inp2)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_268": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(decoder_inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_269": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_329": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_388": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_390": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_428": {
                "variable": {
                    "value": "(self.output, self.state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.my_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_435": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_439": {
                "variable": {
                    "value": "(self.outputs, self.states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.my_cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.my_cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_455": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_456": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_475": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_476": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_486": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[arg1, arg2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_487": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_488": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_496": {
                "variable": {
                    "value": "weighted_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_502": {
                "variable": {
                    "value": "weighted_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_513": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(tf.add(weight_arg1, weight_arg2, name='hstar'))",
                            "Call"
                        ],
                        [
                            "tf.add(weight_arg1, weight_arg2, name='hstar')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_519": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "collect-info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_112": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.x_output, self.weighted_y, diff_xy, mul_xy], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_xy, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_113": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.y_output, self.weighted_x, diff_yx, mul_yx], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_yx, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "composition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_141": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_189": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_278": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_280": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_281": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_283": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "Wr_prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units]), W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_288": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht + Wr_prev_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_291": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_293": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_302": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_343": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_345": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_346": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_348": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_350": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_353": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_355": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_358": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs_transpose)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "my_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_434": {
                "name_or_scope": {
                    "value": "my_bi_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_460": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "direct2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "concat2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "weighted2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_511": {
                "variable": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "aggregate-fnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "encode_mxy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "input": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_156": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_157": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_160": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_169": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_188": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * self.y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * self.x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_198": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_201": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_407": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_413": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_419": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_476": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_488": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_189": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_298": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_360": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(encoder_outputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_395": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_509": {
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_159": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_159": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/snli_reader_mask.py": {
        "tensorflow": {
            "assert_positive_205": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_210": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_212": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_213": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_214": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_215": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_216": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_217": {
                "variable": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_218": {
                "variable": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_221": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_223": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_224": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_226": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_227": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_228": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_238": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_x_mask, [i * batch_size, 0], [(i + 1) * batch_size, xmaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(x_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_y_mask, [i * batch_size, 0], [(i + 1) * batch_size, ymaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(y_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_209": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_208": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/snli_train_lr.py": {
        "tensorflow": {
            "random_uniform_initializer_112": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_129": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "KAIN/ESIM.py": {
        "tensorflow": {
            "Variable_34": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_166": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "self.x_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_179": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_222": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_223": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_235": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_429": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_430": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_456": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "subtract_73": {
                "variable": {
                    "value": "diff_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_74": {
                "variable": {
                    "value": "diff_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_76": {
                "variable": {
                    "value": "mul_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_77": {
                "variable": {
                    "value": "mul_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x_output, self.weighted_y, diff_xy, mul_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.y_output, self.weighted_x, diff_yx, mul_yx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_111": {
                "variable": {
                    "value": "v_xymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_113": {
                "variable": {
                    "value": "v_xyave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mxy_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.x_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_115": {
                "variable": {
                    "value": "v_yxmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_117": {
                "variable": {
                    "value": "v_yxave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(myx_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.y_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax, v_yxmax, v_yxave]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_138": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_143": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_148": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_151": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_189": {
                "variable": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_190": {
                "variable": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.pos_num, self.config.pos_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_203": {
                "variable": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pos_embedding', shape=[self.config.pos_num, self.config.pos_embedding_dim], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_204": {
                "variable": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pos_embedding', shape=[self.config.pos_num, self.config.pos_embedding_dim], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_259": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_260": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "variable": {
                    "value": "weighted_qt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_fn_292": {
                "fn": {
                    "value": "singel_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp1, inp2)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_303": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(decoder_inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_304": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_306": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_308": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_363": {
                "variable": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_364": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_368": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_423": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_425": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_463": {
                "variable": {
                    "value": "(self.output, self.state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.my_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_470": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_474": {
                "variable": {
                    "value": "(self.outputs, self.states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.my_cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.my_cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_490": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_491": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_510": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_511": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_521": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[arg1, arg2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_522": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_523": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_531": {
                "variable": {
                    "value": "weighted_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_537": {
                "variable": {
                    "value": "weighted_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_548": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(tf.add(weight_arg1, weight_arg2, name='hstar'))",
                            "Call"
                        ],
                        [
                            "tf.add(weight_arg1, weight_arg2, name='hstar')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_554": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "add_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_glove_emb, x_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_glove_emb, x_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "collect-info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.x_output, self.weighted_y, diff_xy, mul_xy], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_xy, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.y_output, self.weighted_x, diff_yx, mul_yx], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_yx, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "composition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_184": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_193": {
                "variable": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_glove_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y_glove_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_199": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_207": {
                "variable": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(pos_embedding, self.x_pos)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_pos_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(pos_embedding, self.y_pos)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y_pos_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_264": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_313": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_315": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_318": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "Wr_prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units]), W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_323": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht + Wr_prev_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_326": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_328": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_331": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_378": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_380": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_381": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_383": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_385": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_388": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_390": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_393": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_395": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs_transpose)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_400": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_461": {
                "name_or_scope": {
                    "value": "my_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "my_bi_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_495": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_508": {
                "name_or_scope": {
                    "value": "direct2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "concat2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_530": {
                "name_or_scope": {
                    "value": "weighted2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_546": {
                "variable": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "aggregate-fnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "encode_mxy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "input": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_138": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_142": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_151": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_222": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_229": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_235": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_442": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_448": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_454": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_511": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_523": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_223": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_315": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "tensor": {
                    "value": "prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_328": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_380": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_394": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_395": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(encoder_outputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_430": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_544": {
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_141": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_141": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "KAIN/ops_cudnn_bilstm.py": {
        "tensorflow": {
            "transpose_39": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "cudnn_params",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RNNParams",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[est_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_63": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([2 * num_layers, 1, hidden_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_c, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[2 * num_layers, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_153": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "KAIN/snli_model_mask_lr.py": {
        "tensorflow": {
            "Variable_33": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_38": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.feature_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen, self.config.ymaxlen, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.mask_feature_x_inside",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "self.mask_feature_x_outside",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.placeholder(tf.int32, [self.config.batch_size, self.config.xmaxlen])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_245": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_246": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_446": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_473": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../data/glove/snli_glove.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "relation_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "relation_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../data/lemma/lemma_relation.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_69": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "ek_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "relation_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(relation_embedding_matrix, trainable=True, name='relation_embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.feature_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_107": {
                "variable": {
                    "value": "diff_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_108": {
                "variable": {
                    "value": "diff_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_110": {
                "variable": {
                    "value": "mul_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_111": {
                "variable": {
                    "value": "mul_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x_output, self.weighted_y, diff_xy, mul_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.y_output, self.weighted_x, diff_yx, mul_yx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_147": {
                "variable": {
                    "value": "v_xymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "variable": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_149": {
                "variable": {
                    "value": "v_xyave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mxy_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.x_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_151": {
                "variable": {
                    "value": "v_yxmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_153": {
                "variable": {
                    "value": "v_yxave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(myx_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.y_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax, v_yxave, v_yxmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_172": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_177": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_182": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_185": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "feature_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feature_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(feature_x, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_203": {
                "variable": {
                    "value": "mask_feature_x_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_feature_x_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask_feature_x_inside, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_204": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ],
                        [
                            "gated_input_x * self.x_mask[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_205": {
                "variable": {
                    "value": "x_mask_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask_feature_x_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask_feature_x_inside, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_206": {
                "variable": {
                    "value": "x_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "feature_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(feature_x, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_207": {
                "variable": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ],
                        [
                            "gated_input_x * self.x_mask[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "all_word_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(whole_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_276": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_277": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "weighted_qt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_fn_309": {
                "fn": {
                    "value": "singel_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp1, inp2)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_320": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(decoder_inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_321": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_323": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_380": {
                "variable": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_381": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_383": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_425": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_440": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.config.xmaxlen)",
                            "Call"
                        ],
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_442": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_480": {
                "variable": {
                    "value": "(self.output, self.state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.my_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_487": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_491": {
                "variable": {
                    "value": "(self.outputs, self.states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.my_cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.my_cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_507": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_508": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_527": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_528": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_538": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[arg1, arg2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_539": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_540": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_548": {
                "variable": {
                    "value": "weighted_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_554": {
                "variable": {
                    "value": "weighted_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_565": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(tf.add(weight_arg1, weight_arg2, name='hstar'))",
                            "Call"
                        ],
                        [
                            "tf.add(weight_arg1, weight_arg2, name='hstar')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_571": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_62": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ],
                        [
                            "gated_input_x * self.x_mask[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "ek_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ek_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(relation_embedding, self.feature_x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(ek_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_95": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "collect-info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.x_output, self.weighted_y, diff_xy, mul_xy], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_xy, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.y_output, self.weighted_x, diff_yx, mul_yx], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_yx, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "composition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "gated_relation_p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_211": {
                "variable": {
                    "value": "x_input_word",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_212": {
                "variable": {
                    "value": "x_mask_word",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_mask_inside[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_213": {
                "variable": {
                    "value": "x_feature_word",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_feature[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_214": {
                "variable": {
                    "value": "y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_215": {
                "variable": {
                    "value": "one_batch_p",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_p[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_243": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_246": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_281": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "Wr_prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units]), W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_340": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht + Wr_prev_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_343": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_345": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_348": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_350": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_354": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_395": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_397": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_398": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_400": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_402": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_405": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_407": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_410": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs_transpose)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_417": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_478": {
                "name_or_scope": {
                    "value": "my_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "my_bi_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_512": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_525": {
                "name_or_scope": {
                    "value": "direct2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_537": {
                "name_or_scope": {
                    "value": "concat2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_547": {
                "name_or_scope": {
                    "value": "weighted2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_563": {
                "variable": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "gated_input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "aggregate-fnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "encode_mxy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "input": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_172": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_173": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_176": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_185": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_218": {
                "variable": {
                    "value": "feature_word_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(y_input[j], x_mask_word[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(x_feature_word[j], x_mask_word[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_228": {
                "value": {
                    "value": "whole_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_max_245": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_252": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_253": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_459": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_465": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_471": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_528": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_540": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_246": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "tensor": {
                    "value": "prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_349": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_397": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_412": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(encoder_outputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_447": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_561": {
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_175": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_175": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_218": {
                "tensor": {
                    "value": "y_input[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "x_mask_word[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_219": {
                "tensor": {
                    "value": "x_feature_word[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "x_mask_word[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_scope_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "KAIN/snli_reader_mask.py": {
        "tensorflow": {
            "assert_positive_274": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_279": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_281": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_282": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_283": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_284": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_285": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_286": {
                "variable": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_287": {
                "variable": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_290": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_292": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_293": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_295": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_296": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_297": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_x_mask, [i * batch_size, 0], [(i + 1) * batch_size, xmaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(x_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_308": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_y_mask, [i * batch_size, 0], [(i + 1) * batch_size, ymaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(y_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_271": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_278": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_277": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/data_reader.py": {
        "tensorflow": {
            "assert_positive_215": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_220": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_222": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_223": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_224": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_225": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_226": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_227": {
                "variable": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_228": {
                "variable": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_231": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_233": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_234": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_236": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_237": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_238": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_248": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_x_mask, [i * batch_size, 0], [(i + 1) * batch_size, xmaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(x_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_249": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_y_mask, [i * batch_size, 0], [(i + 1) * batch_size, ymaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(y_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_219": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/mimn.py": {
        "tensorflow": {
            "Variable_31": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_139": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_195": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_196": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_205": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_257": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, att_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_337": {
                "variable": {
                    "value": "prev_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "variable": {
                    "value": "vab",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(v2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_358": {
                "variable": {
                    "value": "vab_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v1, tf.transpose(v2))",
                            "Call"
                        ],
                        [
                            "vab * vab",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_361": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vab_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vab, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(self.label, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(vab_sum, tf.cast(self.label, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "frob_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(vab_sum, tf.cast(self.label, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_74": {
                "variable": {
                    "value": "v_xymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_turn_inference(x=self.x_output, att_y=self.weighted_y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_turn_inference(x=self.x_output, att_y=self.weighted_y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_76": {
                "variable": {
                    "value": "v_xyave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mxy_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.x_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_78": {
                "variable": {
                    "value": "v_yxmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_turn_inference(x=self.y_output, att_y=self.weighted_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_turn_inference(x=self.y_output, att_y=self.weighted_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_80": {
                "variable": {
                    "value": "v_yxave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(myx_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.y_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax, v_yxmax, v_yxave]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_99": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_yxmax, v_yxave]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_108": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_113": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_119": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_145": {
                "variable": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_146": {
                "variable": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.pos_num, self.config.pos_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_158": {
                "variable": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pos_embedding', shape=[self.config.pos_num, self.config.pos_embedding_dim], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_159": {
                "variable": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pos_embedding', shape=[self.config.pos_num, self.config.pos_embedding_dim], trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.char_vocab_size, self.config.char_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_232": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, prev_mem], axis=-1)",
                            "Call"
                        ],
                        [
                            "gt * inp",
                            "BinOp"
                        ],
                        [
                            "self.tensordot(inp=inp, out_dim=self.config.hidden_units, w_name='inp_w')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=shape, regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_251": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ],
                        [
                            "range(len(compare_feature))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_253": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_269": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=shape, regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "add-embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_56": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "aggregate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_144": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_glove_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_glove_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_glove_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y_glove_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_155": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_162": {
                "variable": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(pos_embedding, self.x_pos)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_pos_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_163": {
                "variable": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(pos_embedding, self.y_pos)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y_pos_emb, self.config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "char_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_170": {
                "variable": {
                    "value": "char_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[self.config.char_vocab_size, self.config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_171": {
                "variable": {
                    "value": "char_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[self.config.char_vocab_size, self.config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_193": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_196": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_236": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_274": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, prev_mem]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_307": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tensordot(tf.concat([lstm_output, prev_mem], axis=-1), out_dim=lstm_output.get_shape().as_list()[-1], w_name='gate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_356": {
                "a": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_361": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "input": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, self.config.num_classes], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_99": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_119": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "conv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_x, filter_sizes, heights, 'VALID', tf.cast(self.is_training, tf.bool), self.config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_x, [-1, self.config.xmaxlen, self.config.char_out_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.xmaxlen, self.config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "conv_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_y, filter_sizes, heights, 'VALID', tf.cast(self.is_training, tf.bool), self.config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_y, [-1, self.config.ymaxlen, self.config.char_out_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.ymaxlen, self.config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_195": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_205": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_208": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, -1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "update_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tensordot(inp, out_dim=inp.get_shape().as_list()[-1], w_name='gt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "'com-fnn-%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_196": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_258": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_177": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_179": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_307": {
                "values": {
                    "value": "[lstm_output, prev_mem]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/mpe_reader_mask.py": {
        "tensorflow": {
            "assert_positive_211": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_216": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_218": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_219": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_220": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_221": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_222": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_223": {
                "variable": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_224": {
                "variable": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_227": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_229": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_230": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_232": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_233": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_234": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_x_mask, [i * batch_size, 0], [(i + 1) * batch_size, xmaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(x_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_245": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_y_mask, [i * batch_size, 0], [(i + 1) * batch_size, ymaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(y_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_215": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_214": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/ops_cudnn_rnn.py": {
        "tensorflow": {
            "transpose_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "cudnn_params",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RNNParams",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[est_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_50": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([num_dir * num_layers, 1, hidden_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_c, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "cudnn_params",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RNNParams",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[est_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_120": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([num_dir * num_layers, 1, hidden_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "shape": {
                    "value": "[num_dir * num_layers, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "shape": {
                    "value": "[num_dir * num_layers, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_52": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_122": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/restore_tf_model.py": {
        "tensorflow": {
            "random_uniform_initializer_106": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_120": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_132": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.log_path, config.save_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MIMN/src/train.py": {
        "tensorflow": {
            "set_random_seed_115": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_118": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_132": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_191": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.log_path, config.save_path) + '/model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_119": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_127": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "WBW/snli_model.py": {
        "tensorflow": {
            "Variable_28": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_95": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(input_.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_100": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_104": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_105": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_111": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(ht, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "self.Whht",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(ht, shape=[self.config.batch_size, self.config.hidden_units]), self.W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "Wr_prev_r_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_r, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "self.Wr_prev_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_r_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_r, shape=[self.config.batch_size, self.config.hidden_units]), self.W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_123": {
                "variable": {
                    "value": "self.Mt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.WyY + self.Whht + self.Wr_prev_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "self.WT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.Mt, shape=[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.WT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, self.config.xmaxlen], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "self.Y_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(self.alpha, self.Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "self.W_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_t",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "self.Wt_prev_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_151": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_178": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('glove/snli_glove.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_34": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_43": {
                "variable": {
                    "value": "(self.x_output, self.x_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.fwd_lstm_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_48": {
                "variable": {
                    "value": "(self.y_output, self.y_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.fwd_lstm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.x_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "self.W_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.Y, shape=[config.batch_size * config.xmaxlen, config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.WyY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(self.Y, shape=[config.batch_size * config.xmaxlen, config.hidden_units]), self.W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[config.batch_size, config.xmaxlen, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "self.r_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.r_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.ymaxlen, self.config.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "self.W_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_p",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "self.b_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b_p",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "self.b_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "variable": {
                    "value": "self.hstar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.WprN, self.WxhN)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "self.W_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(self.hstar, self.W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_145": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.config.ymaxlen)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "encode_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "WbW_attetnion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "pred_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "input_.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(input_.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.cast(self._input.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_99": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_105": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_output[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "self.Mt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(self.Mt, shape=[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units]), self.WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "a": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "x": {
                    "value": "self.Wt_prev_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size * config.xmaxlen, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "a": {
                    "value": "self.r_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WprN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "a": {
                    "value": "self.h_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WxhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_89": {
                "x": {
                    "value": "self.WprN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.WxhN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "a": {
                    "value": "self.hstar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_164": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_170": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_176": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "self._input.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "WBW/snli_reader.py": {
        "tensorflow": {
            "assert_positive_180": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_185": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_187": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_188": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_189": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_190": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_191": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_194": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_195": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_196": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_197": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_198": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_184": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_183": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "WBW/wbw-new-early_stop.py": {
        "tensorflow": {
            "random_uniform_initializer_117": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_138": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_124": {
                "name": {
                    "value": "Training Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "m.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_130": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mvalid.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "WBW/wbw-new-restore-2.py": {
        "tensorflow": {
            "random_uniform_initializer_209": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_229": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_240": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_fn": {
                    "value": "load_pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "Training Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "m.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_217": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mvalid.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_222": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "decomposable/snli_model_decomposable.py": {
        "tensorflow": {
            "Variable_32": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_140": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiRNNCell_216": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../../data/glove/snli_glove.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_55": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "co_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x_output, self.weighted_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "co_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.y_output, self.weighted_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_co_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.two_layer_tensordot(co_xy, self.config.hidden_units, scope='compare_fnn_1')",
                            "Call"
                        ],
                        [
                            "v_co_xy * self.x_mask[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(v_co_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_co_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.two_layer_tensordot(co_yx, self.config.hidden_units, scope='compare_fnn_2')",
                            "Call"
                        ],
                        [
                            "v_co_yx * self.y_mask[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(v_co_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v1, v2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_109": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_114": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_119": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_120": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_176": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_223": {
                "variable": {
                    "value": "(self.output, self.state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.my_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_230": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_234": {
                "variable": {
                    "value": "(self.outputs, self.states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.my_cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.my_cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_250": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_270": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[arg1, arg2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_282": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_283": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_291": {
                "variable": {
                    "value": "weighted_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_297": {
                "variable": {
                    "value": "weighted_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_308": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(tf.add(weight_arg1, weight_arg2, name='hstar'))",
                            "Call"
                        ],
                        [
                            "tf.add(weight_arg1, weight_arg2, name='hstar')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_314": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "encode_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "collect-info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "v_co_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_co_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.two_layer_tensordot(co_xy, self.config.hidden_units, scope='compare_fnn_1')",
                            "Call"
                        ],
                        [
                            "v_co_xy * self.x_mask[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(v_co_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "v_co_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_co_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.two_layer_tensordot(co_yx, self.config.hidden_units, scope='compare_fnn_2')",
                            "Call"
                        ],
                        [
                            "v_co_yx * self.y_mask[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(v_co_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_180": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "my_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "my_bi_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_245": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_255": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "direct2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "concat2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "weighted2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_306": {
                "variable": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_109": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_120": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_139": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * self.y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * self.x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 2, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_152": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, 2, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_202": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_208": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_214": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_283": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_140": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_304": {
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_112": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mlstm/snli_model-mlstm.py": {
        "tensorflow": {
            "Variable_25": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_100": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(input_.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_105": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_109": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_110": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_116": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(ht, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "self.Whht",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(ht, shape=[self.config.batch_size, self.config.hidden_units]), self.W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "Wr_prev_r_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_r, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "self.Wr_prev_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_r_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_r, shape=[self.config.batch_size, self.config.hidden_units]), self.W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "self.Mt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.WyY + self.Whht + self.Wr_prev_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "self.WT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.Mt, shape=[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.WT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, self.config.xmaxlen], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "self.Y_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(self.alpha, self.Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.Y_alpha, ht]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_output, r_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_173": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_200": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('glove/snli_glove.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_40": {
                "variable": {
                    "value": "(self.x_output, self.x_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.fwd_lstm_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_45": {
                "variable": {
                    "value": "(self.y_output, self.y_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.fwd_lstm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "self.W_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.Y, shape=[config.batch_size * config.xmaxlen, config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "self.WyY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(self.Y, shape=[config.batch_size * config.xmaxlen, config.hidden_units]), self.W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[config.batch_size, config.xmaxlen, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "self.r_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.r_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.ymaxlen, self.config.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "self.W_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(self.m_N, self.W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_rnn_155": {
                "variable": {
                    "value": "(self.m_outputs, self.m_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([y_output, r_all], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.config.ymaxlen)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_27": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "encode_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "WbW_attetnion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "matching-lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "pred_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "input": {
                    "value": "input_.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(input_.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "tf.cast(self._input.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_104": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_110": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_output[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "self.Mt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(self.Mt, shape=[self.config.batch_size * self.config.xmaxlen, self.config.hidden_units]), self.WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "a": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "mlstm_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size * config.xmaxlen, config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "a": {
                    "value": "self.m_N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_186": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_192": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_198": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "self._input.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_103": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_174": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "newESIM/ops_cudnn_bilstm.py": {
        "tensorflow": {
            "transpose_50": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_53": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([2 * num_layers, 1, hidden_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hiddens, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_h, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output_c, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[2 * num_layers, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_131": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "newESIM/snli_model_mask_lr.py": {
        "tensorflow": {
            "Variable_34": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_38": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(y_sen, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_194": {
                "variable": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_195": {
                "variable": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_204": {
                "variable": {
                    "value": "weighted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(y_sen, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "variable": {
                    "value": "weighted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x_sen, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_400": {
                "variable": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hn_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(hn_tensor)[0], tf.shape(hn_tensor)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_427": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(self.config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../../data/glove/snli_embedding.npy')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(embedding_matrix, trainable=False, name='embedding')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_95": {
                "variable": {
                    "value": "diff_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_96": {
                "variable": {
                    "value": "diff_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_98": {
                "variable": {
                    "value": "mul_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_99": {
                "variable": {
                    "value": "mul_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weighted_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x_output, self.weighted_y, diff_xy, mul_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_102": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.y_output, self.weighted_x, diff_yx, mul_yx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_134": {
                "variable": {
                    "value": "v_xymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_135": {
                "variable": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mxy_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_136": {
                "variable": {
                    "value": "v_xyave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_xy_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mxy_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.x_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_138": {
                "variable": {
                    "value": "v_yxmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "variable": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "myx_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_140": {
                "variable": {
                    "value": "v_yxave",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_yx_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(myx_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(self.y_len, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_xyave, v_xymax, v_yxave, v_yxmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(fnn1, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_162": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "variable": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_167": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.loss_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.reg_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_172": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_175": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_230": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_231": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "weighted_qt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_fn_263": {
                "fn": {
                    "value": "singel_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp1, inp2)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_274": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(decoder_inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_275": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_Y', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "WyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "weighted_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "WyY_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(encoder_outputs, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), W_Y, name='WyY')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_394": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(de_sequence_len)",
                            "Call"
                        ],
                        [
                            "range(self.config.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(i, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_396": {
                "variable": {
                    "value": "last_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_y_length[i] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_434": {
                "variable": {
                    "value": "(self.output, self.state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.my_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_441": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_445": {
                "variable": {
                    "value": "(self.outputs, self.states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.my_cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.my_cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_461": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch-fnn-W'",
                            "Method Argument"
                        ],
                        [
                            "'fnn-W'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_462": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(w_name, shape=[in_dim, out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_481": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_482": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_492": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[arg1, arg2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_493": {
                "variable": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_W_pred",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_494": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_predict, W_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_502": {
                "variable": {
                    "value": "weighted_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_508": {
                "variable": {
                    "value": "weighted_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_arg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_519": {
                "variable": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation(tf.add(weight_arg1, weight_arg2, name='hstar'))",
                            "Call"
                        ],
                        [
                            "tf.add(weight_arg1, weight_arg2, name='hstar')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_525": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "variable": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_xemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_xemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_yemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.y)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_yemb, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "encode_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "dot-product-atten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "collect-info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_117": {
                "variable": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.x_output, self.weighted_y, diff_xy, mul_xy], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_xy, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_xy, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_118": {
                "variable": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m_yx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.y_output, self.weighted_x, diff_yx, mul_yx], axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensordot(inp=m_yx, out_dim=self.config.hidden_units, activation=tf.nn.relu, use_bias=True, w_name='fnn-mxy_W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(m_yx, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "composition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "pred-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "bp_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "a": {
                    "value": "y_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "a": {
                    "value": "weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "3D-batch-fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_284": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_289": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_291": {
                "variable": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_r', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "Wr_prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Wr_prev_output_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(prev_output, shape=[self.config.batch_size, self.config.hidden_units]), W_r)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_294": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht + Wr_prev_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_308": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "matching_encoder_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_349": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_351": {
                "variable": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_h', shape=[self.config.hidden_units, self.config.hidden_units], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_352": {
                "variable": {
                    "value": "Whht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Whht_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(inp, shape=[self.config.batch_size, self.config.hidden_units]), W_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "WhhN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_354": {
                "variable": {
                    "value": "W_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_356": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_encoder_outputs + Whht",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_359": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WT",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.config.l2_strength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_361": {
                "variable": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('WT', shape=[self.config.hidden_units, 1], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_364": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(alpha, encoder_outputs_transpose)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ct, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "my_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_440": {
                "name_or_scope": {
                    "value": "my_bi_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_456": {
                "name_or_scope": {
                    "value": "fnn-layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_466": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ],
                        [
                            "w_name + '-b'",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_479": {
                "name_or_scope": {
                    "value": "direct2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_491": {
                "name_or_scope": {
                    "value": "concat2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_501": {
                "name_or_scope": {
                    "value": "weighted2predict_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_517": {
                "variable": {
                    "value": "hstar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "aggregate-fnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "encode_mxy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "a": {
                    "value": "fnn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fnn(input=self.v, out_dim=self.config.hidden_units, activation=tf.nn.tanh, use_bias=True, w_name='fnn-pred-W')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fnn1, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_162": {
                "input": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(self.pred, 1), tf.argmax(self.label, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "tf.cast(self.label, tf.float32) * tf.log(self.pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_term",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_166": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_175": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_194": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "weight_matrix_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(weight_matrix - tf.reduce_max(weight_matrix, axis=2, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "weight_matrix_y * self.y_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "weight_matrix_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.transpose(weight_matrix - tf.reduce_max(weight_matrix, axis=1, keep_dims=True), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "weight_matrix_x * self.x_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_204": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_207": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_x / (tf.reduce_sum(weight_matrix_x, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "tensor": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_413": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_419": {
                "num_units": {
                    "value": "self.config.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_425": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_494": {
                "a": {
                    "value": "h_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg1",
                            "variable"
                        ],
                        [
                            "tf.concat([arg1, arg2], axis=1, name='h_predict')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hstar, units=self.config.num_classes, activation=None, use_bias=True, kernel_regularizer=l2_regularizer(self.config.l2_strength), name='h_predict')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('concat_W_pred', shape=[2 * self.config.hidden_units, 3], regularizer=l2_regularizer(self.config.l2_strength))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_195": {
                "input_tensor": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_sen, tf.transpose(y_sen, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "tensor": {
                    "value": "prev_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_304": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_351": {
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "tensor": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht + Wr_prev_output, name='Mt')",
                            "Call"
                        ],
                        [
                            "tf.tanh(weighted_encoder_outputs + Whht, name='Mt')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size * en_sequence_len, self.config.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_365": {
                "tensor": {
                    "value": "WTMt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(Mt, shape=[self.config.batch_size * en_sequence_len, self.config.hidden_units]), WT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.batch_size, 1, en_sequence_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_y / (tf.reduce_sum(weight_matrix_y, 1, keep_dims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.reshape(WTMt, shape=[self.config.batch_size, 1, en_sequence_len], name='alpha'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "encoder_outputs_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(encoder_outputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_401": {
                "input": {
                    "value": "hn_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hn_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_515": {
                "x": {
                    "value": "weight_arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hstar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_165": {
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "newESIM/snli_reader_mask.py": {
        "tensorflow": {
            "assert_positive_205": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_210": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_212": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_213": {
                "variable": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_214": {
                "variable": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_215": {
                "variable": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_216": {
                "variable": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_217": {
                "variable": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._x_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_218": {
                "variable": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data._y_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "strided_slice_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_221": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_223": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, xmaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_224": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_mask)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, ymaxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_226": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_227": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._x_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_228": {
                "variable": {
                    "value": "y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(data._y_len)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i * batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[(i + 1) * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_238": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_x_mask, [i * batch_size, 0], [(i + 1) * batch_size, xmaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(x_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strided_slice(data_y_mask, [i * batch_size, 0], [(i + 1) * batch_size, ymaxlen])",
                            "Call"
                        ],
                        [
                            "tf.cast(y_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_209": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_len // batch_size",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ],
                        [
                            "self._data_len // batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_208": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "newESIM/snli_train_lr.py": {
        "tensorflow": {
            "random_uniform_initializer_112": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_130": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}