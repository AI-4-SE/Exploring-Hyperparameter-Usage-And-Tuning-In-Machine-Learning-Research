{
    "reid/evaluation_metrics/ranking.py": {
        "sklearn": {
            "precision_recall_curve_24": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ],
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ],
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "auc_26": {
                "x": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/img_grouping.py": {
        "sklearn": {
            "dbscan_60": {
                "variable": {
                    "value": "(_, updated_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "faiss_compute_jaccard_dist(torch.from_numpy(new_features), k1=k1, k2=k2)",
                            "Call"
                        ],
                        [
                            "cdist(new_features, new_features, 'euclidean')",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "min_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_detect_anomaly_9": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "global_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(global_labels, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "all_cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_cams, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(new_features)",
                            "Call"
                        ],
                        [
                            "new_features / np.linalg.norm(new_features, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "percam_id_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((percam_class_num, percam_feature.shape[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "percam_id_feature / np.linalg.norm(percam_id_feature, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "reid/utils/evaluation_metrics/ranking.py": {
        "sklearn": {
            "precision_recall_curve_31": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "auc_33": {
                "x": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_tensor_12": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/evaluation_metrics/retrieval.py": {
        "sklearn": {
            "cosine_distances_131": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "euclidean_distances_134": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(x, 2).sum(dim=1, keepdim=True).expand(m, n) + torch.pow(y, 2).sum(dim=1, keepdim=True).expand(n, m).t()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, 1e-08, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_144": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_144": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_145": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_145": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/evaluation_metrics/retrieval_with_rerank.py": {
        "sklearn": {
            "cosine_distances_156": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "euclidean_distances_159": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_162": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_173": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(x, 2).sum(dim=1, keepdim=True).expand(m, n) + torch.pow(y, 2).sum(dim=1, keepdim=True).expand(n, m).t()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, 1e-08, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_169": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_170": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/evaluators.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_features[f].unsqueeze(0) for (f, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gallery_features[f].unsqueeze(0) for (f, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(x, 2).sum(dim=1, keepdim=True).expand(m, n) + torch.pow(y, 2).sum(dim=1, keepdim=True).expand(n, m).t()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, 1e-08, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_71": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([query_features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_72": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([gallery_features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/lib/custom_transforms.py": {
        "torch": {
            "from_numpy_27": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reid/lib/normalize.py": {
        "torch": {}
    },
    "reid/loss/CamAwareMemory.py": {
        "torch": {
            "set_detect_anomaly_9": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "self.all_img_cams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "all_img_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unique_41": {
                "variable": {
                    "value": "self.unique_cams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.all_img_cams",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "self.concate_intra_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.concate_intra_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "percam_tempV",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "percam_tempV",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(percam_tempV, dim=0).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_86": {
                "input": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cams == cc",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "mapped_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mapped_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.memory_class_mapper[cc][int(k)] for k in percam_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mapped_targets).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_40": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_65": {
                "variable": {
                    "value": "percam_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.all_img_cams == cc",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "percam_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_66": {
                "variable": {
                    "value": "uniq_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.all_pseudo_label[percam_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_96": {
                "input": {
                    "value": "percam_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExemplarMemory(self.percam_memory[cc], alpha=self.alpha)(percam_feat, mapped_targets)",
                            "Call"
                        ],
                        [
                            "percam_inputs / self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "mapped_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.memory_class_mapper[cc][int(k)] for k in percam_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mapped_targets).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_83": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_106": {
                "variable": {
                    "value": "ori_asso_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concate_intra_class == percam_targets[k]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "ori_asso_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "concated_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_inputs[k, ori_asso_ind], target_inputs[k, sel_ind])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "concated_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(concated_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "concated_input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sort_108": {
                "input": {
                    "value": "temp_sims[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "input": {
                    "value": "concated_input.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/dsbn.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.BN_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.BN_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_20": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(bs / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.BN_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.BN_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(bs / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "child.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "child.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/pooling.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) * norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_64": {
                "variable": {
                    "value": "x_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_40": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clamp(min=self.eps).pow(self.p)",
                            "Call"
                        ],
                        [
                            "x_max + x_avg",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "1.0 / self.p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/resnet.py": {
        "torch": {
            "avg_pool2d_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_317": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "avg_pool2d_347": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_98": {
                "variable": {
                    "value": "tgt_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_249": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_255": {
                "variable": {
                    "value": "tgt_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_260": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_323": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_357": {
                "variable": {
                    "value": "embed_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feat(bn)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(embed_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(embed_feat)",
                            "Call"
                        ],
                        [
                            "self.drop(embed_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_214": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_262": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_122": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_279": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_376": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/resnet_ibn_a.py": {
        "torch": {
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_77": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(planes / 2)",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes - half1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_81": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_160": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_211": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bottleneck(features)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_152": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "scale * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_230": {
                "f": {
                    "value": "model_urls['ibn_resnet50a']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_249": {
                "f": {
                    "value": "model_urls['ibn_resnet101a']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_230": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_249": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/stb_net.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.resnet_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_48": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.resnet_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_84": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_116": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bottleneck(features)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.normalize(bn, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_119": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bottleneck(features)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.normalize(bn, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/trainers.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/__init__.py": {
        "torch": {
            "is_tensor_7": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/data/preprocessor.py": {
        "torch": {}
    },
    "reid/utils/data/sampler.py": {
        "torch": {
            "randperm_25": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/evaluation_metrics/classification.py": {
        "torch": {
            "from_numpy_7": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_8": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/faiss_rerank.py": {
        "torch": {
            "softmax_81": {
                "variable": {
                    "value": "V[i, k_reciprocal_expansion_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "V[i, k_reciprocal_expansion_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "target_features[i].unsqueeze(0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target_features[k_reciprocal_expansion_index].t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/faiss_utils.py": {
        "torch": {
            "empty_26": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_31": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_76": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/meters.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.val, val]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/misc.py": {
        "torch": {
            "mean_51": {
                "variable": {
                    "value": "c_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cF",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cF - c_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_56": {
                "variable": {
                    "value": "(c_u, c_e, c_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "contentConv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(cF, cF.t()).div(cFSize[1] - 1) + torch.eye(cFSize[0]).double()",
                            "BinOp"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "s_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sF",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sF - s_mean.unsqueeze(1).expand_as(sF)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "styleConv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sF",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sF - s_mean.unsqueeze(1).expand_as(sF)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sF.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_67": {
                "variable": {
                    "value": "styleConv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sFSize[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "svd_68": {
                "variable": {
                    "value": "(s_u, s_e, s_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "styleConv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(sF, sF.t()).div(sFSize[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_77": {
                "variable": {
                    "value": "step1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_v[:, 0:k_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(c_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_78": {
                "variable": {
                    "value": "step2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(c_v[:, 0:k_c], torch.diag(c_d))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "c_v[:, 0:k_c].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_79": {
                "variable": {
                    "value": "whiten_cF",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(step1, c_v[:, 0:k_c].t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cF",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cF - c_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_82": {
                "input": {
                    "value": "s_v[:, 0:k_s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(s_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_172": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_179": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n * h * w, 1).repeat(1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n * h * w, 1).repeat(1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_192": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_199": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n * h * w, 1).repeat(1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n * h * w, 1).repeat(1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_55": {
                "input": {
                    "value": "cF",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cF - c_mean",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cF.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_55": {
                "input": {
                    "value": "cFSize[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "cFSize[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_77": {
                "input": {
                    "value": "c_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_e[0:k_c].pow(-0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_168": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_82": {
                "input": {
                    "value": "s_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_e[0:k_s].pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_209": {
                "input": {
                    "value": "input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_210": {
                "input": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/rerank.py": {
        "torch": {
            "argsort_138": {
                "variable": {
                    "value": "initial_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.concatenate([q_q_dist, q_g_dist], axis=1), np.concatenate([q_g_dist.T, g_g_dist], axis=1)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.power(original_dist, 2).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(1.0 * original_dist / np.max(original_dist, axis=0))",
                            "Call"
                        ],
                        [
                            "original_dist[:query_num,]",
                            "Subscript"
                        ],
                        [
                            "torch.pow(target_features, 2).sum(dim=1, keepdim=True) * 2",
                            "BinOp"
                        ],
                        [
                            "original_dist.expand(N, N) - 2 * torch.mm(target_features, target_features.t())",
                            "BinOp"
                        ],
                        [
                            "original_dist / original_dist.max(0)[0]",
                            "BinOp"
                        ],
                        [
                            "original_dist.t()",
                            "Call"
                        ],
                        [
                            "original_dist.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gallery_num",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "all_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gallery_num",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_183": {
                "variable": {
                    "value": "jaccard_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.concatenate([q_q_dist, q_g_dist], axis=1), np.concatenate([q_g_dist.T, g_g_dist], axis=1)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.power(original_dist, 2).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(1.0 * original_dist / np.max(original_dist, axis=0))",
                            "Call"
                        ],
                        [
                            "original_dist[:query_num,]",
                            "Subscript"
                        ],
                        [
                            "torch.pow(target_features, 2).sum(dim=1, keepdim=True) * 2",
                            "BinOp"
                        ],
                        [
                            "original_dist.expand(N, N) - 2 * torch.mm(target_features, target_features.t())",
                            "BinOp"
                        ],
                        [
                            "original_dist / original_dist.max(0)[0]",
                            "BinOp"
                        ],
                        [
                            "original_dist.t()",
                            "Call"
                        ],
                        [
                            "original_dist.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "source_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_166": {
                "variable": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k_reciprocal_index",
                            "Name"
                        ],
                        [
                            "np.unique(k_reciprocal_expansion_index)",
                            "Call"
                        ],
                        [
                            "np.append(k_reciprocal_expansion_index, candidate_k_reciprocal_index)",
                            "Call"
                        ],
                        [
                            "k_reciprocal_index",
                            "Name"
                        ],
                        [
                            "torch.unique(k_reciprocal_expansion_index)",
                            "Call"
                        ],
                        [
                            "torch.cat((k_reciprocal_expansion_index, candidate_k_reciprocal_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_167": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-original_dist[i, k_reciprocal_expansion_index]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "temp_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "gallery_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_g_dist.shape[0] + q_g_dist.shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_102": {
                "input": {
                    "value": "backward_k_neigh_index == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "pow_133": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "source_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_features.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_120": {
                "input": {
                    "value": "-sour_tar_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_134": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k_reciprocal_expansion_index, candidate_k_reciprocal_index)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(-original_dist[i, k_reciprocal_expansion_index])",
                            "Call"
                        ],
                        [
                            "torch.exp(-original_dist[i, k_reciprocal_expansion_index])",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_189": {
                "input": {
                    "value": "V[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_181": {
                "input": {
                    "value": "V[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_193": {
                "input": {
                    "value": "V[i, indNonZero[j]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/serialization.py": {
        "torch": {
            "save_14": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_19": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train_cap.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "propagate_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UnsupervisedTargetPreprocessor(dataset.target_train_original, root=osp.join(dataset.target_images_dir, dataset.target_train_path), num_cam=dataset.target_num_cam, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.target_images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.target_images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "target_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UnsupervisedTargetPreprocessor(new_train_samples, root=osp.join(dataset.target_images_dir, dataset.target_train_path), num_cam=dataset.target_num_cam, transform=train_transformer, has_pseudo_label=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "ClassUniformlySampler(new_train_samples, class_position=sample_position, k=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_193": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_214": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_220": {
                "variable": {
                    "value": "trained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.logs_dir, 'final_model_epoch_' + str(epoch + 1) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "ndarray": {
                    "value": "updated_label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_268": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}