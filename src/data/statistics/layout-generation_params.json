{
    "LayoutGAN/MNIST/mnist_modules.py": {
        "tensorflow": {
            "Conv2D_18": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_20": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_22": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_24": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "f_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.key(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.query(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.query(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(f_q, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "f_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.value(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(attention_weight, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "f_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.value(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(attention_weight, perm=[0, 2, 1]), f_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim])",
                            "Call"
                        ],
                        [
                            "self.projection(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.geometric_param(decoded)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.reshape(out, [-1, self.n_component, self.output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.concat([out, cls_prob], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "layout_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(28",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_58": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_60": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_63": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_85": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(self.n_component, self.n_class, self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_87": {
                "variable": {
                    "value": "self.bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_88": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_90": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_91": {
                "variable": {
                    "value": "self.conv1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_93": {
                "variable": {
                    "value": "self.bn1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_94": {
                "variable": {
                    "value": "self.conv1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_96": {
                "variable": {
                    "value": "self.bn1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_102": {
                "variable": {
                    "value": "self.bn_x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_103": {
                "variable": {
                    "value": "self.bn_x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_104": {
                "variable": {
                    "value": "self.bn_x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_105": {
                "variable": {
                    "value": "self.bn_x4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_107": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_109": {
                "variable": {
                    "value": "self.bn2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_110": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_112": {
                "variable": {
                    "value": "self.bn2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_113": {
                "variable": {
                    "value": "self.conv2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_115": {
                "variable": {
                    "value": "self.bn2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_116": {
                "variable": {
                    "value": "self.conv2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_118": {
                "variable": {
                    "value": "self.bn2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_119": {
                "variable": {
                    "value": "self.geometric_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_121": {
                "variable": {
                    "value": "self.class_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.render(inputs, self.layout_dim[0], self.layout_dim[1])",
                            "Call"
                        ],
                        [
                            "self.act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.act(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], self.n_component, self.n_class, self.output_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], self.n_component, self.n_class, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h1_0, h1_3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [x.shape[0], self.n_component, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], self.n_component, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(out, [-1, self.n_component, self.output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cls_score, [-1, self.n_component, self.n_class])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out, cls_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "a": {
                    "value": "f_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.key(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.query(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(f_q, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_38": {
                "a": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(f_k, f_q) / math.sqrt(inputs.shape[1] * inputs.shape[2])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_132": {
                "x": {
                    "value": "h1_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1_1(self.conv1_1(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h1_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(self.bn1_4(self.conv1_4(h1_2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_146": {
                "x": {
                    "value": "h2_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(context))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h2_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(self.bn2_4(self.conv2_4(h2_2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_148": {
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(attention_weight, perm=[0, 2, 1]), f_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim])",
                            "Call"
                        ],
                        [
                            "self.projection(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.geometric_param(decoded)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.reshape(out, [-1, self.n_component, self.output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.concat([out, cls_prob], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_component, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_137": {
                "x": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h1_0, h1_3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [x.shape[0], self.n_component, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x1(self.relation1(embedding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_139": {
                "x": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(self.bn_x2(tf.add(embedding, self.bn_x1(self.relation1(embedding)))))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x4(tf.add(context, self.bn_x3(self.relation2(context)))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x3(self.relation2(context))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "tensor": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.class_score(decoded)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_component, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "LayoutGAN/MNIST/mnist_train.py": {
        "tensorflow": {
            "ExponentialDecay_34": {
                "variable": {
                    "value": "dlr",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "epoch_step * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "dlr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(1e-05, epoch_step * 20, 0.1, staircase=True, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "g_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.01e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_132": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[real.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_140": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad, (real.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_score, labels=tf.ones_like(tf.sigmoid(fake_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=true_score, labels=tf.ones_like(tf.sigmoid(true_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_score, labels=tf.zeros_like(tf.sigmoid(fake_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tape_p.gradient(logit, interpolated)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(real.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "tf.square(grad_norm - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_147": {
                "logits": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(tf.sigmoid(fake_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_155": {
                "logits": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(tf.sigmoid(true_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_157": {
                "logits": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(tf.sigmoid(fake_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "grad_norm - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "tf.sigmoid(fake_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_156": {
                "input": {
                    "value": "tf.sigmoid(true_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "tf.sigmoid(fake_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "x": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_156": {
                "x": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_158": {
                "x": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LayoutGAN/MNIST/mnist_utils.py": {
        "tensorflow": {
            "reshape_33": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 128, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(output_width, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, output_width, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(x_r, [1, 1, output_width, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, output_width * output_width, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_39": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_width, dtype=tf.float32), [1, output_width, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(x_r, [1, 1, output_width, 1]), [1, output_width * output_width, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x_r, [64, 1, 128, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[64, 1, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "y_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(output_height, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, output_height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "y_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(y_r, [1, output_height, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, output_height * output_height, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "y_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_height, dtype=tf.float32), [1, 1, output_height, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(y_r, [1, output_height, 1, 1]), [1, output_height * output_height, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y_r, [64, 1, 128, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[64, 1, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(bbox_pred, [0, 0, 0], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 1, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "x_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(bbox_pred, [0, 0, 0], [-1, -1, 1]), [64, 1, 128, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x_pred, [1, output_width * output_width, 1, 1])",
                            "Call"
                        ],
                        [
                            "(output_width - 1.0) * x_pred",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, output_width * output_width, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(bbox_pred, [0, 0, 1], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 1, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_54": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(bbox_pred, [0, 0, 1], [-1, -1, 1]), [64, 1, 128, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y_pred, [1, output_height * output_height, 1, 1])",
                            "Call"
                        ],
                        [
                            "(output_height - 1.0) * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, output_height * output_height, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "variable": {
                    "value": "x_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - tf.abs(x_r - x_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_58": {
                "variable": {
                    "value": "y_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - tf.abs(y_r - y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_61": {
                "variable": {
                    "value": "xy_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_diff * y_diff",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 128, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "xy_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xy_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(xy_diff, ksize=[1, 1, 128, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(xy_max, [64, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[64, output_height, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_35": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_37": {
                "input": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_width, dtype=tf.float32), [1, output_width, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(x_r, [1, 1, output_width, 1]), [1, output_width * output_width, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x_r, [64, 1, 128, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_43": {
                "input": {
                    "value": "y_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_height, dtype=tf.float32), [1, 1, output_height, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(y_r, [1, output_height, 1, 1]), [1, output_height * output_height, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y_r, [64, 1, 128, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, output_height, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_48": {
                "input_": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(final_pred, [64, 128, 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_53": {
                "input_": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(final_pred, [64, 128, 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_57": {
                "x": {
                    "value": "x_r - x_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_58": {
                "x": {
                    "value": "y_r - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "LayoutGAN/Publaynet/modules.py": {
        "tensorflow": {
            "Conv2D_16": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_18": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_20": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_22": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "f_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.key(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.query(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.query(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(f_q, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "f_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.value(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(attention_weight, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "f_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.value(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(attention_weight, perm=[0, 2, 1]), f_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim])",
                            "Call"
                        ],
                        [
                            "self.projection(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.geometric_param(decoded)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.reshape(out, [-1, self.n_component, self.output_dim]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "layout_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(28",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_51": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_54": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_59": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_60": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.RandomNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.RandomNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_87": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(self.n_component, 1, self.n_class + self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_89": {
                "variable": {
                    "value": "self.bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_91": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_93": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_95": {
                "variable": {
                    "value": "self.conv1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_97": {
                "variable": {
                    "value": "self.bn1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_99": {
                "variable": {
                    "value": "self.conv1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_101": {
                "variable": {
                    "value": "self.bn1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_113": {
                "variable": {
                    "value": "self.bn_x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_115": {
                "variable": {
                    "value": "self.bn_x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_117": {
                "variable": {
                    "value": "self.bn_x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_119": {
                "variable": {
                    "value": "self.bn_x4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_122": {
                "variable": {
                    "value": "self.bn_x5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_124": {
                "variable": {
                    "value": "self.bn_x6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_126": {
                "variable": {
                    "value": "self.bn_x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_128": {
                "variable": {
                    "value": "self.bn_x8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_131": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_133": {
                "variable": {
                    "value": "self.bn2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_135": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_137": {
                "variable": {
                    "value": "self.bn2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_139": {
                "variable": {
                    "value": "self.conv2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_141": {
                "variable": {
                    "value": "self.bn2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_143": {
                "variable": {
                    "value": "self.conv2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_145": {
                "variable": {
                    "value": "self.bn2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_147": {
                "variable": {
                    "value": "self.geometric_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.001, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_149": {
                "variable": {
                    "value": "self.class_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.TruncatedNormal(stddev=0.02, mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.render(inputs, self.layout_dim[0], self.layout_dim[1])",
                            "Call"
                        ],
                        [
                            "self.act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.act(self.bn3(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], self.n_component, 1, self.n_class + self.output_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], self.n_component, 1, self.n_class + self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h1_0, h1_3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [x.shape[0], self.n_component, 1, 256])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], self.n_component, 1, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_180": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(out, [-1, self.n_component, self.output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cls_score, [-1, self.n_component, self.n_class])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out, cls_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "f_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.key(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "f_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.query(inputs), [inputs.shape[0], inputs.shape[1] * inputs.shape[2], self.key_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(f_q, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "a": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(f_k, f_q) / (inputs.shape[1] * inputs.shape[2])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_159": {
                "x": {
                    "value": "h1_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1_1(self.conv1_1(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h1_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1_4(self.conv1_4(h1_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_172": {
                "x": {
                    "value": "h2_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(context))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h2_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn2_4(self.conv2_4(h2_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_180": {
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(attention_weight, perm=[0, 2, 1]), f_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [inputs.shape[0], inputs.shape[1], inputs.shape[2], self.output_dim])",
                            "Call"
                        ],
                        [
                            "self.projection(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.geometric_param(decoded)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.reshape(out, [-1, self.n_component, self.output_dim]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_component, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.class_score(decoded)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_component, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TruncatedNormal_16": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_17": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_18": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_19": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_20": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_21": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_22": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_23": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_50": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_54": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_55": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_60": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_64": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_88": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_88": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_92": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_92": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_96": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_100": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_131": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_132": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_136": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_136": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_140": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_140": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_143": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_144": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_148": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TruncatedNormal_149": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_150": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_164": {
                "x": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h1_0, h1_3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [x.shape[0], self.n_component, 1, 256])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x1(self.relation1(embedding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_166": {
                "x": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(self.bn_x2(tf.add(embedding, self.bn_x1(self.relation1(embedding)))))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x4(tf.add(context, self.bn_x3(self.relation2(context)))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x3(self.relation2(context))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_175": {
                "x": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h2_0, h2_3))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x6(tf.add(decoded, self.bn_x5(self.relation3(decoded)))))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x8(tf.add(decoded, self.bn_x7(self.relation4(decoded)))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x5(self.relation3(decoded))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_177": {
                "x": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act(tf.add(h2_0, h2_3))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x6(tf.add(decoded, self.bn_x5(self.relation3(decoded)))))",
                            "Call"
                        ],
                        [
                            "self.act(self.bn_x8(tf.add(decoded, self.bn_x7(self.relation4(decoded)))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.bn_x7(self.relation4(decoded))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LayoutGAN/Publaynet/train.py": {
        "tensorflow": {
            "ExponentialDecay_38": {
                "variable": {
                    "value": "dlr",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "d_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20 * epoch_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "dlr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(d_lr, decay_steps=20 * epoch_step, decay_rate=0.1, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "dlr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(d_lr, decay_steps=20 * epoch_step, decay_rate=0.1, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_score, labels=tf.ones_like(tf.sigmoid(fake_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=true_score, labels=tf.ones_like(tf.sigmoid(true_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_score, labels=tf.zeros_like(tf.sigmoid(fake_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_121": {
                "logits": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(tf.sigmoid(fake_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_129": {
                "logits": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(tf.sigmoid(true_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_131": {
                "logits": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(tf.sigmoid(fake_score))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_122": {
                "input": {
                    "value": "tf.sigmoid(fake_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_130": {
                "input": {
                    "value": "tf.sigmoid(true_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_132": {
                "input": {
                    "value": "tf.sigmoid(fake_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_130": {
                "x": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_132": {
                "x": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x, training=True)",
                            "Call"
                        ],
                        [
                            "self.D(x_fake, training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LayoutGAN/Publaynet/utils.py": {
        "tensorflow": {
            "reshape_96": {
                "variable": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(final_pred, [64, 9, 9])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[64, 9, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_97": {
                "variable": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(final_pred, [64, 9, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_98": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "final_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(final_pred, [64, 9, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 0], [-1, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_reg, [64, 9, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[64, 9, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(output_width, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(xt, [64, 9, output_height, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(output_height, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(yt, [64, 9, 1, output_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x1_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xt - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, output_height, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "y1_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "yt - y1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, output_height, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x2_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x2 - xt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, output_height, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "y2_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2 - yt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 9, output_height, output_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_132": {
                "variable": {
                    "value": "xy_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([x1_line, x2_line, y1_line, y2_line], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_135": {
                "variable": {
                    "value": "spatial_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(xy_max, [1, 1, 1, 1, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(cls_prob, [64, 9, 1, 1, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_137": {
                "variable": {
                    "value": "spatial_prob_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "spatial_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.tile(xy_max, [1, 1, 1, 1, 5]), tf.reshape(cls_prob, [64, 9, 1, 1, 5]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_102": {
                "input_": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 0], [-1, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_reg, [64, 9, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "input_": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 0], [-1, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_reg, [64, 9, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_104": {
                "input_": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 0], [-1, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_reg, [64, 9, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_105": {
                "input_": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 0], [-1, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_reg, [64, 9, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_112": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_113": {
                "input": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_width, dtype=tf.float32), [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(xt, [64, 9, output_height, 1]), [64, 9, -1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[64, 9, output_height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_115": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_116": {
                "input": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(output_height, dtype=tf.float32), [1, 1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(yt, [64, 9, 1, output_width]), [64, 9, -1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[64, 9, 1, output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_124": {
                "x": {
                    "value": "tf.nn.relu(y2_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_126": {
                "x": {
                    "value": "tf.nn.relu(y2_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_128": {
                "x": {
                    "value": "tf.nn.relu(x2_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_130": {
                "x": {
                    "value": "tf.nn.relu(x2_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x1_line, x2_line, y1_line, y2_line]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_136": {
                "input": {
                    "value": "xy_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.concat([x1_line, x2_line, y1_line, y2_line], axis=-1), axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(final_pred, [0, 0, 4], [-1, -1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[64, 9, 1, 1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_123": {
                "features": {
                    "value": "1.0 - tf.abs(x1_diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_123": {
                "x": {
                    "value": "tf.nn.relu(y1_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_124": {
                "features": {
                    "value": "y1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(yt - y1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_125": {
                "features": {
                    "value": "1.0 - tf.abs(x2_diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_125": {
                "x": {
                    "value": "tf.nn.relu(y1_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_126": {
                "features": {
                    "value": "y1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(yt - y1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_127": {
                "features": {
                    "value": "1.0 - tf.abs(y1_diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_127": {
                "x": {
                    "value": "tf.nn.relu(x1_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_128": {
                "features": {
                    "value": "x1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(xt - x1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_129": {
                "features": {
                    "value": "1.0 - tf.abs(y2_diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_129": {
                "x": {
                    "value": "tf.nn.relu(x1_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_130": {
                "features": {
                    "value": "x1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(xt - x1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_123": {
                "x": {
                    "value": "x1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(xt - x1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_125": {
                "x": {
                    "value": "x2_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x2 - xt, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_127": {
                "x": {
                    "value": "y1_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(yt - y1, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_129": {
                "x": {
                    "value": "y2_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(y2 - yt, [64, 9, output_height, output_width, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LayoutVAE/Source/bboxvae.py": {
        "torch": {
            "stack_86": {
                "variable": {
                    "value": "BBoxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "BBoxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "T.stack(BBoxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "PrevBox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[PrevBox, T.unsqueeze(GroundTruth, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "PrevLabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[PrevLabel, T.unsqueeze(CurrentLabel, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "PrevBox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[PrevBox, T.unsqueeze(BBox, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "PrevLabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[PrevLabel, T.unsqueeze(CurrentLabel, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "PrevLabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, *BoxLabel[..., i, :].shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "PrevBox",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, *GTBBox[..., i, :].shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "PrevLabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, *BoxLabel[..., i, :].shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "PrevBox",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, BoxLabel.shape[0], 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "[PrevLabel, PrevBox]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "input": {
                    "value": "GroundTruth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GTBBox[..., i, :].view(-1, self.n_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "CurrentLabel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BoxLabel[..., i, :].view(-1, self.n_class)",
                            "Call"
                        ],
                        [
                            "BoxLabel[..., i, :].view(-1, self.n_class)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "[PrevLabel, PrevBox]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "input": {
                    "value": "BBox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rep_mul(Mu)",
                            "Call"
                        ],
                        [
                            "self.rep_mul(Mu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "CurrentLabel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BoxLabel[..., i, :].view(-1, self.n_class)",
                            "Call"
                        ],
                        [
                            "BoxLabel[..., i, :].view(-1, self.n_class)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LayoutVAE/Source/countvae.py": {
        "torch": {
            "zeros_like_46": {
                "variable": {
                    "value": "previous_counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "previous_counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "current_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_counts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.zeros_like(label_set)",
                            "Call"
                        ],
                        [
                            "T.zeros_like(label_set)",
                            "Call"
                        ],
                        [
                            "previous_counts + current_label * (q.view(-1, 1) + x_.view(-1, 1))",
                            "BinOp"
                        ],
                        [
                            "previous_counts + current_label * (q.view(-1, 1) + x_.view(-1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_74": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ],
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "Poisson_78": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ],
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "current_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_counts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.zeros_like(label_set)",
                            "Call"
                        ],
                        [
                            "T.zeros_like(label_set)",
                            "Call"
                        ],
                        [
                            "previous_counts + current_label * (q.view(-1, 1) + x_.view(-1, 1))",
                            "BinOp"
                        ],
                        [
                            "previous_counts + current_label * (q.view(-1, 1) + x_.view(-1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_108": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ],
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "Poisson_112": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ],
                        [
                            "self.decoder([embedding, z])",
                            "Call"
                        ],
                        [
                            "T.exp(decoded)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LayoutVAE/Source/layoutvae.py": {
        "torch": {
            "floor_52": {
                "variable": {
                    "value": "pred_class_counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_box * (pred_class_counts / T.sum(pred_class_counts, dim=1).view(-1, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "class_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(label_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T.argmax(class_labels, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[class_info, pred_box]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_331": {
                "variable": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.test_class_labels[0:64 * batches]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_332": {
                "variable": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.unsqueeze(T.argmax(class_labels, dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "T.unsqueeze(T.argmax(data[1], dim=2), dim=2)",
                            "Call"
                        ],
                        [
                            "T.argmax(self.test_class_labels[0:64 * batches], dim=2)",
                            "Call"
                        ],
                        [
                            "T.unsqueeze(class_info, dim=2)",
                            "Call"
                        ],
                        [
                            "T.unsqueeze(T.argmax(labels, dim=2), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[class_info, self.test_b_boxes[0:64 * batches]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_338": {
                "variable": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pred_countvae()",
                            "Call"
                        ],
                        [
                            "T.sum(pred_cvae, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_cvae / T.sum(pred_cvae)",
                            "BinOp"
                        ],
                        [
                            "pred_cvae.clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_342": {
                "variable": {
                    "value": "gt_cvae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.class_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_385": {
                "variable": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T.argmax(labels, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "cxywh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[class_info, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "Data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Data[0:data_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "self.class_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Data[..., 4:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "self.test_class_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "test_data[..., 4:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "self.countvae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "self.bboxvae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_247": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.bboxvae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_bvae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_263": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.countvae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_cvae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_318": {
                "variable": {
                    "value": "class_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T.argmax(data[1], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[class_info, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_391": {
                "obj": {
                    "value": "self.countvae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'countvae.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_392": {
                "obj": {
                    "value": "self.bboxvae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'bboxvae.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_393": {
                "obj": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'layoutvae.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_71": {
                "input": {
                    "value": "class_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.zeros(len(label_set), self.max_box, self.n_class)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[predictions, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_339": {
                "input": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pred_countvae()",
                            "Call"
                        ],
                        [
                            "T.sum(pred_cvae, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_cvae / T.sum(pred_cvae)",
                            "BinOp"
                        ],
                        [
                            "pred_cvae.clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_343": {
                "input": {
                    "value": "gt_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.sum(self.class_counts, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_cvae / T.sum(gt_cvae)",
                            "BinOp"
                        ],
                        [
                            "gt_cvae.clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_385": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[..., 4:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "class_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_class_counts",
                            "Name"
                        ]
                    ]
                }
            },
            "argmax_318": {
                "input": {
                    "value": "data[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "pred_class_counts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.countvae(label_set, isTrain=False)",
                            "Call"
                        ],
                        [
                            "T.floor(self.max_box * (pred_class_counts / T.sum(pred_class_counts, dim=1).view(-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "class_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_class_counts",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "LayoutVAE/Source/modelblocks.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(n_class, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in1, in2, in3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, in2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in1, in2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.seq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(128, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_141": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "n_class + 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in1, in2, in3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_185": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_186": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.exp(logvar / 2)",
                            "Call"
                        ],
                        [
                            "T.ones_like(mu) * 0.02",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_200": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.exp(logvar / 2)",
                            "Call"
                        ],
                        [
                            "T.ones_like(mu) * 0.02",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_embed_217": {
                "variable": {
                    "value": "covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T.exp(logvar / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_220": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc4(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "covar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.diag_embed(T.exp(logvar / 2), dim1=-2, dim2=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lamda.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_box",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_234": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(in2 > 0) + 0.0",
                            "BinOp"
                        ],
                        [
                            "T.zeros(lamda.shape[0], self.max_box)",
                            "Call"
                        ],
                        [
                            "mask + T.arange(0, self.max_box, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_236": {
                "variable": {
                    "value": "e_lamda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lamda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lamda.view(-1)",
                            "Call"
                        ],
                        [
                            "T.t(T.t(mask) + lamda)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_238": {
                "variable": {
                    "value": "fact",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T.lgamma(T.arange(0, self.max_box) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_242": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lamda_x * e_lamda / fact",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "logvar2 - logvar1 - 1 + (logvar1.exp() + (mu2 - mu1).pow(2)) / logvar2.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PoissonNLLLoss_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "logvar2 - logvar1 - 1 + (logvar1.exp() + (mu2 - mu1).pow(2)) / logvar2.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_199": {
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc4(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "exp_217": {
                "input": {
                    "value": "logvar / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_235": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lgamma_238": {
                "input": {
                    "value": "T.arange(0, self.max_box) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_238": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_box",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LayoutVAE/Source/utils.py": {
        "torch": {
            "sum_149": {
                "variable": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.pred_countvae()",
                            "Call"
                        ],
                        [
                            "T.sum(pred_cvae, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_cvae / T.sum(pred_cvae)",
                            "BinOp"
                        ],
                        [
                            "pred_cvae.to('cpu').clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "gt_cvae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.class_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "input": {
                    "value": "pred_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.pred_countvae()",
                            "Call"
                        ],
                        [
                            "T.sum(pred_cvae, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_cvae / T.sum(pred_cvae)",
                            "BinOp"
                        ],
                        [
                            "pred_cvae.to('cpu').clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_154": {
                "input": {
                    "value": "gt_cvae",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.sum(model.class_counts, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_cvae / T.sum(gt_cvae)",
                            "BinOp"
                        ],
                        [
                            "gt_cvae.to('cpu').clone().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}