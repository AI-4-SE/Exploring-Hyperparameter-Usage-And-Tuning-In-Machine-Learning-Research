{
    "avalanche/training/supervised/deep_slda.py": {
        "sklearn": {
            "OAS_220": {
                "variable": {
                    "value": "cov_estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "assume_centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_94": {
                "variable": {
                    "value": "self.muK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "self.cK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_96": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "self.Lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.muK.transpose(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cov_estimator.covariance_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_251": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, save_name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "mult",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_minus_mu.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_minus_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - self.muK[y]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pinverse_185": {
                "variable": {
                    "value": "self.Lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - self.shrinkage_param) * self.Sigma + self.shrinkage_param * torch.eye(self.input_size, device=self.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_212": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(feats, self.mb_y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_241": {
                "obj": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(save_path, save_name + '.pth'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, save_name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "M * W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_197": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.Lambda, M)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_188": {
                "n": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dataloaders.py": {
        "sklearn": {
            "make_classification_36": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10 * n_samples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_47": {
                "variable": {
                    "value": "(train_X, test_X, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dataset[1]).long()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_51": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_52": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_101": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_ar1.py": {
        "sklearn": {
            "make_classification_36": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10 * n_samples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "224 * 224 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_47": {
                "variable": {
                    "value": "(train_X, test_X, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dataset[1]).long()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_51": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_52": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_plugins.py": {
        "sklearn": {
            "make_classification_137": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10 * n_samples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_149": {
                "variable": {
                    "value": "(train_X, test_X, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dataset[1]).long()",
                            "Call"
                        ],
                        [
                            "TaskBalancedDataLoader(exp.dataset, oversample_small_groups=True, num_workers=0, batch_size=32, shuffle=False, pin_memory=False)",
                            "Call"
                        ],
                        [
                            "TaskBalancedDataLoader(exp.dataset, oversample_small_groups=True, num_workers=0, batch_size=32, shuffle=False, pin_memory=False)",
                            "Call"
                        ],
                        [
                            "TaskBalancedDataLoader(exp.dataset, oversample_small_groups=True, num_workers=0, batch_size=32, shuffle=False, pin_memory=False)",
                            "Call"
                        ],
                        [
                            "DataLoader(val_exp.dataset, num_workers=0, batch_size=100, pin_memory=False)",
                            "Call"
                        ],
                        [
                            "DataLoader(val_exp.dataset, num_workers=0, batch_size=100, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "SGD_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_153": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_154": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_318": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_319": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=base_lr)",
                            "Call"
                        ],
                        [
                            "optim",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "milestones",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_425": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_536": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_537": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_538": {
                "variable": {
                    "value": "scheduler2",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_560": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_850": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*(nn.Linear(input_size, hidden_size), nn.ReLU(inplace=True))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_864": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_865": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_734": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_393": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_394": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_428": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_469": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_470": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_515": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_516": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_563": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_607": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_608": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_678": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_679": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_345": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict1.items()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dict2[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_856": {
                "*args": {
                    "value": "*(nn.Linear(hidden_size, hidden_size), nn.ReLU(inplace=True))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_477": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_617": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_851": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_851": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_364": {
                "input": {
                    "value": "dataset1_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset1[:][t_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "dataset2_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset2[:][t_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_858": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_859": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_661": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_662": {
                "dataset": {
                    "value": "val_exp.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_644": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_645": {
                "dataset": {
                    "value": "val_exp.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit_tests_utils.py": {
        "sklearn": {
            "make_classification_79": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10 * n_samples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_90": {
                "variable": {
                    "value": "(train_X, test_X, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dataset[1]).long()",
                            "Call"
                        ],
                        [
                            "DataLoader(experience.dataset.train(), batch_size=batch_size, num_workers=num_workers)",
                            "Call"
                        ],
                        [
                            "DataLoader(experience.dataset.eval(), batch_size=batch_size, num_workers=num_workers)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_87": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_94": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_95": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "dataset": {
                    "value": "experience.dataset.train()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "dataset": {
                    "value": "experience.dataset.eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/__init__.py": {
        "torch": {}
    },
    "avalanche/benchmarks/classic/classic_benchmarks_utils.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "dataset.replace_transforms(ToTensor(), None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/classic/clear.py": {
        "torch": {}
    },
    "avalanche/benchmarks/classic/cmnist.py": {
        "torch": {
            "from_numpy_221": {
                "variable": {
                    "value": "idx_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng_permute.permutation(784)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/classic/comniglot.py": {
        "torch": {
            "from_numpy_216": {
                "variable": {
                    "value": "idx_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng_permute.permutation(11025)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/classic/endless_cl_sim.py": {
        "torch": {
            "DataLoader_177": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/classic/ex_model.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "state_d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{base_dir}/model_e{i}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "base_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exml_benchmark.original_benchmark.train_stream[i].dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "base_model.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/classic/stream51.py": {
        "torch": {
            "DataLoader_307": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/clear/clear.py": {
        "torch": {
            "DataLoader_488": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "clear_dataset_test_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_CLEARFeature(root=root, data_name=data_name, download=True, feature_type='moco_b0', split='test', seed=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_370": {
                "variable": {
                    "value": "(tensors, targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filelist_folder_path / str(bucket_index) / filelist_name",
                            "BinOp"
                        ],
                        [
                            "filelist_folder_path / str(bucket_index) / filelist_name",
                            "BinOp"
                        ],
                        [
                            "feature_folder_path / str(bucket_index) / 'all.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/core50/core50.py": {
        "torch": {
            "DataLoader_272": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CORe50Dataset(transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/downloadable_dataset.py": {
        "torch": {}
    },
    "avalanche/benchmarks/datasets/endless_cl_sim/endless_cl_sim.py": {
        "torch": {
            "DataLoader_710": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subsequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.train_sub_sequence_datasets[sub_sequence_index]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_224": {
                "variable": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_715": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(img)",
                            "Call"
                        ],
                        [
                            "transforms.ToPILImage()(img)",
                            "Call"
                        ],
                        [
                            "Image.open(f).convert('RGB').resize((self.patch_size, self.patch_size), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "self._pil_loader(img_path)",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "Image.open(f).convert(convert_identifier).resize((self.patch_size[0], self.patch_size[1]), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "self._pil_loader(img_path, is_target=False)",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_224": {
                "data": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convert_target(self.targets[index])",
                            "Call"
                        ],
                        [
                            "self.target_transform(target)",
                            "Call"
                        ],
                        [
                            "target.copy()",
                            "Call"
                        ],
                        [
                            "self._pil_loader(target_path, is_target=True)",
                            "Call"
                        ],
                        [
                            "self._convert_target(np.asarray(target))",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/inaturalist/inaturalist.py": {
        "torch": {
            "DataLoader_194": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "INATURALIST2018()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/lvis_dataset/lvis_dataset.py": {
        "torch": {
            "DataLoader_291": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LvisDataset(transform=_test_to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_detection_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_detection_collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_176": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(labels, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_182": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(areas, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_objs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_173": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.empty((0, 4), dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_175": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/mini_imagenet/mini_imagenet.py": {
        "torch": {}
    },
    "avalanche/benchmarks/datasets/openloris/openloris.py": {
        "torch": {
            "DataLoader_185": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OpenLORIS(download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/penn_fudan/penn_fudan_dataset.py": {
        "torch": {
            "DataLoader_209": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PennFudanDataset(transform=lambda im, ann: (transforms.ToTensor()(im), ann))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_165": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_objs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask == obj_ids[:, None, None]",
                            "Compare"
                        ],
                        [
                            "torch.as_tensor(masks, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_objs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/stream51/stream51.py": {
        "torch": {
            "DataLoader_279": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Stream51(transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_283": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_list",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/tiny_imagenet/tiny_imagenet.py": {
        "torch": {
            "DataLoader_206": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TinyImagenet(transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_210": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/datasets/torchaudio_wrapper.py": {
        "torch": {
            "pad_sequence_34": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensors + [waveform]",
                            "BinOp"
                        ],
                        [
                            "[item.t() for item in tensors]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(tensors, batch_first=True, padding_value=0.0)",
                            "Call"
                        ],
                        [
                            "tensors.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "targets + [torch.tensor(label)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_40": {
                "variable": {
                    "value": "t_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "t_labels + [torch.tensor(t_label)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(t_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "super().__getitem__(item)",
                            "Call"
                        ],
                        [
                            "self.labels_names.index(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "data": {
                    "value": "t_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/generators/benchmark_generators.py": {
        "torch": {
            "as_tensor_692": {
                "data": {
                    "value": "exp_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_692": {
                "n": {
                    "value": "len(exp_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_694": {
                "data": {
                    "value": "experience.dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_407": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "as_tensor_408": {
                "data": {
                    "value": "dataset_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(class_list_per_exp)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(dataset_order)[torch.randperm(len(dataset_order))].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_409": {
                "n": {
                    "value": "len(dataset_order)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_456": {
                "data": {
                    "value": "exp_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_457": {
                "n": {
                    "value": "len(exp_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_633": {
                "data": {
                    "value": "exp_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ],
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_634": {
                "n": {
                    "value": "len(exp_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/generators/scenario_generators.py": {
        "torch": {
            "manual_seed_797": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "as_tensor_798": {
                "data": {
                    "value": "dataset_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(class_list_per_exp)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(dataset_order)[torch.randperm(len(dataset_order))].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_799": {
                "n": {
                    "value": "len(dataset_order)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/classification_scenario.py": {
        "torch": {}
    },
    "avalanche/benchmarks/scenarios/exmodel_scenario.py": {
        "torch": {}
    },
    "avalanche/benchmarks/scenarios/generic_scenario_creation.py": {
        "torch": {}
    },
    "avalanche/benchmarks/scenarios/new_classes/nc_scenario.py": {
        "torch": {
            "unique_140": {
                "input": {
                    "value": "torch.as_tensor(train_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_141": {
                "data": {
                    "value": "train_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_213": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_214": {
                "data": {
                    "value": "self.classes_order_original_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_216": {
                "n": {
                    "value": "len(self.classes_order_original_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/new_classes/nc_utils.py": {
        "torch": {
            "unique_42": {
                "variable": {
                    "value": "search_elements",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(sequence)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_42": {
                "data": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_as_list(sequence)",
                            "Call"
                        ],
                        [
                            "tensor_as_list(sequence)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/new_instances/ni_scenario.py": {
        "torch": {
            "unique_138": {
                "variable": {
                    "value": "(unique_targets, unique_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(train_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_159": {
                "variable": {
                    "value": "(unique_targets, unique_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(subset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_209": {
                "variable": {
                    "value": "targets_as_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_139": {
                "data": {
                    "value": "train_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_160": {
                "data": {
                    "value": "subset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_206": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_211": {
                "input": {
                    "value": "torch.eq(targets_as_tensor, class_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_375": {
                "variable": {
                    "value": "(cls_ids, cls_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(targets_order[prev_idx:next_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_376": {
                "data": {
                    "value": "targets_order[prev_idx:next_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_277": {
                "n": {
                    "value": "n_experiences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.train_exps_patterns_assignment)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_392": {
                "n": {
                    "value": "n_experiences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.train_exps_patterns_assignment)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_219": {
                "data": {
                    "value": "cls_patterns",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_220": {
                "n": {
                    "value": "len(cls_patterns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_356": {
                "data": {
                    "value": "remaining_patterns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(range(len(train_dataset)))",
                            "Call"
                        ],
                        [
                            "list(remaining_patterns)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_357": {
                "n": {
                    "value": "len(remaining_patterns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_211": {
                "input": {
                    "value": "targets_as_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(train_dataset.targets)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "class_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(unique_targets[unique_idx])",
                            "Call"
                        ],
                        [
                            "class_id in range(self.n_classes)",
                            "Call"
                        ],
                        [
                            "class_id in range(self.n_classes)",
                            "Call"
                        ],
                        [
                            "class_id in range(self.n_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/new_instances/ni_utils.py": {
        "torch": {
            "unique_34": {
                "variable": {
                    "value": "(cls_ids, cls_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(exp_targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_35": {
                "data": {
                    "value": "exp_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(dataset.targets[pattern_idx]) for pattern_idx in assignment[exp_id]]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/online_scenario.py": {
        "torch": {
            "as_tensor_99": {
                "data": {
                    "value": "exp_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(exp_dataset)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exp_indices)[torch.randperm(len(exp_indices))].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_100": {
                "n": {
                    "value": "len(exp_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/scenarios/rl_scenario.py": {
        "torch": {}
    },
    "avalanche/benchmarks/utils/avalanche_dataset.py": {
        "torch": {
            "cumsum_1619": {
                "variable": {
                    "value": "self._datasets_cumulative_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(datasets)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_1872": {
                "variable": {
                    "value": "self._datasets_cumulative_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "flattened_list + self._flatten_subset_concat_branch(dataset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_1186": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets",
                            "variable"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "self._dataset_list",
                            "Attribute"
                        ],
                        [
                            "dataset in enumerate(self._dataset_list)",
                            "Call"
                        ],
                        [
                            "self._dataset_list",
                            "Attribute"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices in range(len(dataset))",
                            "Call"
                        ],
                        [
                            "[dataset.indices[x] for x in indices]",
                            "ListComp"
                        ],
                        [
                            "super().__getitem__(item)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Subset_1382": {
                "variable": {
                    "value": "self._dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "forward_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._original_dataset._original_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_indices",
                            "variable"
                        ],
                        [
                            "[forward_indices[x] for x in self._indices]",
                            "ListComp"
                        ],
                        [
                            "self._indices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Subset_1429": {
                "variable": {
                    "value": "self._dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self._original_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/utils/collate_functions.py": {
        "torch": {
            "cat_48": {
                "tensors": {
                    "value": "values_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/utils/data_loader.py": {
        "torch": {
            "DistributedSampler_540": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.datasets, self.batch_sizes)",
                            "Call"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "memory.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "data_loader_args.pop('shuffle', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "data_loader_args.pop('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_545": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.datasets, self.batch_sizes)",
                            "Call"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "memory.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, shuffle=data_loader_args.pop('shuffle', False), drop_last=data_loader_args.pop('drop_last', False))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "_make_data_loader(data, self.distributed_sampling, self.loader_kwargs, batch_sizes)",
                            "Call"
                        ],
                        [
                            "_make_data_loader(dataset, self.distributed_sampling, self.loader_kwargs, mb_sz)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_550": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.datasets, self.batch_sizes)",
                            "Call"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "memory.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "data.task_set[task_id]",
                            "Subscript"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomSampler_267": {
                "variable": {
                    "value": "infinite_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.datasets",
                            "Attribute"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "10 ** 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.datasets",
                            "Attribute"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "infinite_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(data, replacement=True, num_samples=10 ** 10, generator=generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_257": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2 ** 32 - 1 - _DistributedHelper.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_263": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/utils/dataset_definitions.py": {
        "torch": {}
    },
    "avalanche/benchmarks/utils/dataset_utils.py": {
        "torch": {
            "cumsum_142": {
                "variable": {
                    "value": "self._targets_cumulative_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "targets_list",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/benchmarks/utils/datasets_from_filelists.py": {
        "torch": {}
    },
    "avalanche/benchmarks/utils/utils.py": {
        "torch": {
            "unique_58": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "sort_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_59": {
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_as_list(targets)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/evaluation/metric_results.py": {
        "torch": {}
    },
    "avalanche/evaluation/metric_utils.py": {
        "torch": {}
    },
    "avalanche/evaluation/metrics/accuracy.py": {
        "torch": {
            "as_tensor_64": {
                "variable": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_65": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "torch.eq(predicted_y, true_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_77": {
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_79": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/evaluation/metrics/amca.py": {
        "torch": {
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/checkpoint.py": {
        "torch": {}
    },
    "avalanche/evaluation/metrics/class_accuracy.py": {
        "torch": {
            "as_tensor_139": {
                "variable": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_140": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_145": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_149": {
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/evaluation/metrics/confusion_matrix.py": {
        "torch": {
            "as_tensor_131": {
                "variable": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "true_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_134": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "predicted_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_442": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(self.outputs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.result()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_146": {
                "variable": {
                    "value": "min_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "predicted_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_163": {
                "variable": {
                    "value": "min_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "true_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "self._cm_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_label + 1, max_label + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "numpy_ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.numpy()",
                            "Call"
                        ],
                        [
                            "np.nan_to_num(numpy_ndarray)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "matrix.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_188": {
                "variable": {
                    "value": "self._cm_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._cm_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, size_diff, 0, size_diff)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "matrix_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "(self._num_classes, self._num_classes)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_143": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "predicted_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_160": {
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "true_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_150": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "predicted_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_151": {
                "input": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ],
                        [
                            "predicted_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(predicted_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_168": {
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "true_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_169": {
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ],
                        [
                            "true_y[:, :max_label + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.max(true_y, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/evaluation/metrics/detection.py": {
        "torch": {
            "as_tensor_75": {
                "variable": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "variable": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dct[t_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/detection_evaluators/coco_evaluator.py": {
        "torch": {
            "stack_285": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/detection_evaluators/lvis_evaluator.py": {
        "torch": {
            "stack_223": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/images_samples.py": {
        "torch": {
            "DataLoader_148": {
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.replace_transforms(transform=_MaybeToTensor(), target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(mb_size, self.n_wanted_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.collate_fn if hasattr(data, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/evaluation/metrics/loss.py": {
        "torch": {
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_60": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/mac.py": {
        "torch": {}
    },
    "avalanche/evaluation/metrics/mean_scores.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_63": {
                "start": {
                    "value": "len(true_y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/evaluation/metrics/topk_acc.py": {
        "torch": {
            "as_tensor_74": {
                "variable": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(true_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_75": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(predicted_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/logging/csv_logger.py": {
        "torch": {}
    },
    "avalanche/logging/tensorboard_logger.py": {
        "torch": {
            "SummaryWriter_66": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tb_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(tb_log_dir)",
                            "Call"
                        ],
                        [
                            "_make_path_if_local(tb_log_dir)",
                            "Call"
                        ]
                    ]
                },
                "filename_suffix": {
                    "value": "filename_suffix",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/logging/text_logging.py": {
        "torch": {}
    },
    "avalanche/logging/wandb_logger.py": {
        "torch": {
            "save_195": {
                "obj": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.best_supported_value(Image, Tensor, TensorImage, Figure, float, int, self.wandb.viz.CustomChart)",
                            "Call"
                        ],
                        [
                            "np.histogram(value.view(-1).numpy())",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "dir_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt, name + suffix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/batch_renorm.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "batch_ch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - batch_ch_mean) * r / batch_ch_std + d",
                            "BinOp"
                        ],
                        [
                            "self.gamma * x + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - self.running_avg_mean) / self.running_avg_std",
                            "BinOp"
                        ],
                        [
                            "self.gamma * x + self.beta",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "variable": {
                    "value": "batch_ch_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(x, dim=(0, 2, 3), keepdim=True, unbiased=False) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((1, num_features, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma.view(1, -1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, num_features, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta.view(1, -1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "self.running_avg_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_features, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "self.running_avg_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_features, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "variable": {
                    "value": "self.running_avg_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "running_var.view(1, -1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "(1, num_features, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "(1, num_features, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "var_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - batch_ch_mean) * r / batch_ch_std + d",
                            "BinOp"
                        ],
                        [
                            "self.gamma * x + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - self.running_avg_mean) / self.running_avg_std",
                            "BinOp"
                        ],
                        [
                            "self.gamma * x + self.beta",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_89": {
                "input": {
                    "value": "batch_ch_std / self.running_avg_std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0 / self.r_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.r_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_98": {
                "input": {
                    "value": "(batch_ch_mean - self.running_avg_mean) / self.running_avg_std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.d_max",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.d_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/dynamic_modules.py": {
        "torch": {
            "zeros_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_class_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "initial_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "au_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "initial_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "new_nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(self.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ],
                        [
                            "max(curr_head.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_303": {
                "variable": {
                    "value": "self.classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "au_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "initial_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_152": {
                "variable": {
                    "value": "unique_tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "experience.task_labels",
                            "Attribute"
                        ],
                        [
                            "experience.task_labels",
                            "Attribute"
                        ],
                        [
                            "[task_labels[0]]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "self.active_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(self.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ],
                        [
                            "max(curr_head.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "au_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.starting_out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "variable": {
                    "value": "self._buffers[au_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "self._buffers[au_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(self.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ],
                        [
                            "max(curr_head.classifier.out_features, max(curr_classes) + 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_260": {
                "input": {
                    "value": "self.active_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_392": {
                "input": {
                    "value": "curr_au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._buffers[au_name]",
                            "Subscript"
                        ],
                        [
                            "self._buffers[au_name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/generator.py": {
        "torch": {
            "BCELoss_175": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_176": {
                "variable": {
                    "value": "MSE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_177": {
                "variable": {
                    "value": "CE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numel_60": {
                "variable": {
                    "value": "flattened_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_84": {
                "variable": {
                    "value": "flattened_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP([nhid, 64, 128, 256, flattened_size], last_activation=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_158": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_194": {
                "input": {
                    "value": "-1 - logvar + torch.exp(logvar) + mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "flattened_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(shape).numel()",
                            "Call"
                        ],
                        [
                            "torch.Size(shape).numel()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "num_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_145": {
                "*size": {
                    "value": "(batch_size, self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "(1, self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_logvar(represntations)",
                            "Call"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_194": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_logvar(represntations)",
                            "Call"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/helper_method.py": {
        "torch": {
            "clone_44": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_52": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/icarl_resnet.py": {
        "torch": {
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.direct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(input_num_filters, out_num_filters, stride=first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "first_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(input_dims, output_dims, stride=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "first_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "second_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "third_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "final_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "first_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "variable"
                        ],
                        [
                            "output_dims",
                            "variable"
                        ],
                        [
                            "output_dims",
                            "variable"
                        ],
                        [
                            "output_dims",
                            "variable"
                        ],
                        [
                            "output_dims",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "num_classes",
                            "variable"
                        ]
                    ]
                }
            },
            "Identity_106": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(input_num_filters, out_num_filters, kernel_size=(1, 1), stride=(2, 2), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "IdentityShortcut(lambda x: x[:, :, ::2, ::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "input": {
                    "value": "self.direct(x) + self.shortcut(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "input_num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_num_filters * 2",
                            "BinOp"
                        ],
                        [
                            "input_num_filters",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConstantPad3d_93": {
                "padding": {
                    "value": "(0, 0, 0, 0, out_num_filters // 4, out_num_filters // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/lenet5.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=6, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=120, out_features=84)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=84, out_features=n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.ff(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/mlp_tiny_imagenet.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_channels * 64 * 64, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "num_channels * 64 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/mobilenetv1.py": {
        "torch": {
            "AvgPool2d_60": {
                "variable": {
                    "value": "model.features.final_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.lat_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lat_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.end_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*end_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "lat_acts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(orig_acts, latent_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/ncm_classifier.py": {
        "torch": {
            "cdist_23": {
                "variable": {
                    "value": "sqd",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.class_means[:, :].T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "pred_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.T / torch.norm(x.T, dim=0)).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_22": {
                "input": {
                    "value": "x.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/pnn.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.lat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features * num_prev_modules",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features_per_column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_prev_modules)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features_per_column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features_per_column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.U(self.activation(self.V(x)))",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), self.in_features)",
                            "Call"
                        ],
                        [
                            "[x for _ in range(num_columns)]",
                            "ListComp"
                        ],
                        [
                            "[F.relu(el) for el in lay(x, task_label)]",
                            "ListComp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.itoh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "784",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features_per_column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.columns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[first_col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "784",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features_per_column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ],
                        [
                            "out_features_per_column",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_67": {
                "*size": {
                    "value": "num_prev_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_prev_modules",
                            "Method Argument"
                        ],
                        [
                            "num_prev_modules",
                            "Method Argument"
                        ],
                        [
                            "num_prev_modules",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_280": {
                "input": {
                    "value": "el",
                    "type": "variable",
                    "possible_values": [
                        [
                            "el in enumerate(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/pytorchcv_wrapper.py": {
        "torch": {}
    },
    "avalanche/models/simple_cnn.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_50": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/simple_mlp.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*(nn.Linear(input_size, hidden_size), nn.ReLU(inplace=True), nn.Dropout(p=drop_rate))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*(nn.Linear(hidden_size, hidden_size), nn.ReLU(inplace=True), nn.Dropout(p=drop_rate))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "Method Argument"
                        ],
                        [
                            "28 * 28",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/simple_sequence_classifier.py": {
        "torch": {
            "LSTM_13": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_29": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/models/slda_resnet.py": {
        "torch": {
            "reshape_49": {
                "variable": {
                    "value": "features3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(features.shape[0], feat_size * feat_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/slim_resnet18.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, task_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x.view(bsz, 3, 32, 32)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, task_labels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x.view(bsz, 3, 32, 32)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, task_labels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/models/utils.py": {
        "torch": {
            "Sequential_102": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_100": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/losses.py": {
        "torch": {
            "BCELoss_22": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "targets.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "logits.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "old_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.old_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/agem.py": {
        "torch": {
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "self.reference_gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.reference_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "current_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.grad.view(-1) if p.grad is not None else torch.zeros(p.numel(), device=strategy.device) for (n, p) in strategy.model.named_parameters()]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(current_gradients)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_88": {
                "variable": {
                    "value": "dotg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.grad.view(-1) if p.grad is not None else torch.zeros(p.numel(), device=strategy.device) for (n, p) in strategy.model.named_parameters()]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(current_gradients)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.reference_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "p.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "p.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_90": {
                "input": {
                    "value": "self.reference_gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.reference_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/cope.py": {
        "torch": {
            "unique_157": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_174": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strategy.mb_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_288": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_288": {
                "variable": {
                    "value": "y_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[c for c in self.p_mem.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.p_mem[c.item()] for c in p_y]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Bc.clone(), pc, pk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_327": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([Bc.clone(), pc, pk]).detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Bc.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_328": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "*D.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "union_ck",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Bc.clone(), pc, pk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_350": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union_ck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([Bc.clone(), pc, pk]).detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Bk.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_177": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strategy.mb_y == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_201": {
                "variable": {
                    "value": "incr_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_sum / p_cnt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_206": {
                "variable": {
                    "value": "self.p_mem[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "new_p_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * old_p + (1 - self.alpha) * incr_p",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_259": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(bs, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_304": {
                "variable": {
                    "value": "p_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_y == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_304": {
                "variable": {
                    "value": "p_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_x[:p_idx], p_x[p_idx + 1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clone_306": {
                "variable": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_162": {
                "variable": {
                    "value": "self.p_mem[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty((1, self.p_size)).uniform_(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_232": {
                "*size": {
                    "value": "seen_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.p_mem.keys())",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ns, -1).shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "get_last_fc_layer(strategy.model)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_239": {
                "input": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(seen_c, nd).to(x.device) * float('inf')",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x[s_idx].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_301": {
                "input": {
                    "value": "y == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_301": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_302": {
                "input": {
                    "value": "y != c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_302": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_163": {
                "*size": {
                    "value": "(1, self.p_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/cwr_star.py": {
        "torch": {
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "self.model.saved_weights[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "self.model.saved_weights[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/ewc.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.collate_fn if hasattr(dataset, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/gem.py": {
        "torch": {
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.collate_fn if hasattr(dataset, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.eye(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.grad.flatten() if p.grad is not None else torch.zeros(p.numel(), device=strategy.device) for p in strategy.model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "v_star",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.solve_quadprog(g).to(strategy.device)",
                            "Call"
                        ],
                        [
                            "np.dot(v, memories_np) + gradient_np",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "self.memory_x[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_x[t], x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "self.memory_y[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_y[t], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "self.memory_tid[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_tid[t], tid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "self.memory_x[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_x[t], x[:diff])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "self.memory_y[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_y[t], y[:diff])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "self.memory_tid[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.memory_tid[t], tid[:diff])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[p.grad.flatten() if p.grad is not None else torch.zeros(p.numel(), device=strategy.device) for p in strategy.model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "p.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_88": {
                "input": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([p.grad.flatten() if p.grad is not None else torch.zeros(p.numel(), device=strategy.device) for p in strategy.model.parameters()], dim=0)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "p.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/generative_replay.py": {
        "torch": {
            "cat_144": {
                "variable": {
                    "value": "strategy.mbatch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[strategy.mbatch[0], replay]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "strategy.mbatch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[strategy.mbatch[1], replay_output.to(strategy.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "strategy.mbatch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[strategy.mbatch[-1], torch.ones(replay.shape[0]).to(strategy.device) * strategy.mbatch[-1][0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "replay_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "replay.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "replay.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/gss_greedy.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sum(grad_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "mem_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_mem_subs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.mem_strength, self.ext_mem_list_current_index // gss_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "sum(grad_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_109": {
                "variable": {
                    "value": "shuffeled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.ext_mem_list_current_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "cosine_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_53": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_217": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(buffer_score - torch.min(buffer_score)) / (torch.max(buffer_score) - torch.min(buffer_score) + 0.01)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "strategy.mb_x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_233": {
                "variable": {
                    "value": "outcome",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((scaled_batch_item_sim, buffer_repl_batch_sim), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_241": {
                "variable": {
                    "value": "added_indx",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_item_sim.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "(scaled_batch_item_sim, buffer_repl_batch_sim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "*size": {
                    "value": "updated_mb_x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_212": {
                "input": {
                    "value": "buffer_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer_score[:self.ext_mem_list_current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_213": {
                "input": {
                    "value": "buffer_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer_score[:self.ext_mem_list_current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_213": {
                "input": {
                    "value": "buffer_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer_score[:self.ext_mem_list_current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/training/plugins/lfl.py": {
        "torch": {
            "mse_loss_36": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_features(model, x)",
                            "Call"
                        ],
                        [
                            "model.get_features(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "prev_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_features(model, x)",
                            "Call"
                        ],
                        [
                            "self.prev_model.get_features(x)",
                            "Call"
                        ],
                        [
                            "prev_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/training/plugins/lwf.py": {
        "torch": {
            "log_softmax_46": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, au] / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_out[:, au] / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_48": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(out[:, au] / self.temperature, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(prev_out[:, au] / self.temperature, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/mas.py": {
        "torch": {
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "strategy.experience.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "strategy.train_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strategy.experience.dataset.collate_fn if hasattr(strategy.experience.dataset, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "norm_99": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avalanche_forward(strategy.model, x, t)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "self.importance[name] * (param - self.params[name]).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/plugins/rwalk.py": {
        "torch": {
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_228": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score + loss / (0.5 * imp * (new_p - old_p).pow(2) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/training/plugins/synaptic_intelligence.py": {
        "torch": {
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "param.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_326": {
                "variable": {
                    "value": "ewc_data[1][param_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "syn_data['cum_trajectory'][param_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_334": {
                "variable": {
                    "value": "ewc_data[1][param_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ewc_data[1][param_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_to",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_286": {
                "input": {
                    "value": "param_ewc_data_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ewc_data[1][name].to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(weights - param_ewc_data_0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/storage_policy.py": {
        "torch": {
            "zeros_83": {
                "variable": {
                    "value": "self._buffer_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(new_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "cat_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_weights, self._buffer_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.feature_extractor(x.to(strategy.device)) for (x, *_) in DataLoader(data, collate_fn=collate_fn, batch_size=strategy.eval_mb_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "self.max_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_496": {
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.collate_fn if hasattr(data, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "strategy.eval_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/supervised/ar1.py": {
        "torch": {
            "SGD_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.adapted_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "current_batch_mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.train_mb_size",
                            "Attribute"
                        ],
                        [
                            "train_patterns // ((train_patterns + self.rm_sz) // self.train_mb_size)",
                            "BinOp"
                        ],
                        [
                            "max(1, current_batch_mb_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adapted_dataset.collate_fn if hasattr(self.adapted_dataset, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "rm_add_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[curr_data.targets[idx_cur] for idx_cur in idxs_cur]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_145": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_205": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "lat_task_id",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lat_mb_y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "self.mbatch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.mb_y, lat_mb_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "self.mbatch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.mb_task_id, lat_task_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_335": {
                "n": {
                    "value": "self.cur_acts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "self.cur_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.cur_acts, lat_acts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_346": {
                "n": {
                    "value": "self.rm[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/supervised/cumulative.py": {
        "torch": {}
    },
    "avalanche/training/supervised/icarl.py": {
        "torch": {
            "tensor_241": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "self.class_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.embedding_size, n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_214": {
                "variable": {
                    "value": "div",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "class_samples.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_217": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "div.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_217": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_218": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes2.T",
                            "Attribute"
                        ],
                        [
                            "D2 / torch.norm(D2, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "div.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_260": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "class_patterns.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flip_204": {
                "variable": {
                    "value": "class_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_samples in enumerate(self.x_memory)",
                            "Call"
                        ],
                        [
                            "class_samples.to(strategy.device)",
                            "Call"
                        ],
                        [
                            "torch.flip(class_samples, [3])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_220": {
                "input": {
                    "value": "self.class_means[:, label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_266": {
                "variable": {
                    "value": "tmp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_t.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_267": {
                "variable": {
                    "value": "ind_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(w_t.unsqueeze(0), D)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "self.x_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_201": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_212": {
                "input": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes2.T",
                            "Attribute"
                        ],
                        [
                            "D2 / torch.norm(D2, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_258": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "mapped_prototypes.T",
                            "Attribute"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_244": {
                "condition": {
                    "value": "targets == new_classes[iter_dico]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "dataset": {
                    "value": "cd.eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cd.collate_fn if hasattr(cd, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(cd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_297": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_301": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_278": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_282": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_280": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_299": {
                "condition": {
                    "value": "pick == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/supervised/joint_training.py": {
        "torch": {}
    },
    "avalanche/training/supervised/lamaml.py": {
        "torch": {
            "grad_239": {
                "variable": {
                    "value": "meta_grad_model",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._criterion(logits_meta, self.mb_y)",
                            "Call"
                        ],
                        [
                            "sum(meta_losses) / len(meta_losses)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_model.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_107": {
                "variable": {
                    "value": "self.alpha_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_118": {
                "variable": {
                    "value": "self.optimizer_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.alpha_params.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_138": {
                "variable": {
                    "value": "self.optimizer_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.alpha_params.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__249": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.grad_clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_255": {
                "variable": {
                    "value": "meta_grad_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._criterion(logits_meta, self.mb_y)",
                            "Call"
                        ],
                        [
                            "sum(meta_losses) / len(meta_losses)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.alpha_params.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "alpha_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(p.shape) * self.alpha_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "alpha_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(p.shape) * self.alpha_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_165": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._criterion(logits, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_model.fast_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "self.second_order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "self.second_order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__261": {
                "parameters": {
                    "value": "self.alpha_params.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.grad_clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_176": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.grad_clip_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.grad_clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_275": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.parameters(), self.alpha_params.parameters())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avalanche/training/supervised/naive_object_detection.py": {
        "torch": {
            "DataLoader_176": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.adapted_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.eval_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "detection_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_215": {
                "enabled": {
                    "value": "self.scaler is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "synchronize_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/supervised/strategy_wrappers.py": {
        "torch": {
            "CrossEntropyLoss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_360": {
                "variable": {
                    "value": "optimizer_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, generator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/supervised/strategy_wrappers_online.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/templates/base.py": {
        "torch": {
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/templates/base_online_sgd.py": {
        "torch": {
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/templates/base_sgd.py": {
        "torch": {
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/templates/online_supervised.py": {
        "torch": {
            "DataLoader_256": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.adapted_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.eval_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/templates/supervised.py": {
        "torch": {
            "DataLoader_251": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.adapted_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.eval_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avalanche/training/utils.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(1, len(dataset) // num_workers)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.collate_fn if hasattr(dataset, 'collate_fn') else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "new_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_fc_layer.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "variable"
                        ],
                        [
                            "last_fc_layer.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "unique_307": {
                "variable": {
                    "value": "(unique_classes, examples_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batches_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "batches_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "target_attr.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "target_attr.r_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "r_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "target_attr.d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "d_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_308": {
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_88": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strategy.plugins",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/all_mnist.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_57": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/all_mnist_early_stopping.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ar1.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/clear.py": {
        "torch": {
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HPARAM['start_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 256, 'num_epoch': 100, 'step_scheduler_decay': 30, 'scheduler_step': 0.1, 'start_lr': 0.01, 'weight_decay': 1e-05, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "HPARAM['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 256, 'num_epoch': 100, 'step_scheduler_decay': 30, 'scheduler_step': 0.1, 'start_lr': 0.01, 'weight_decay': 1e-05, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "HPARAM['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 256, 'num_epoch': 100, 'step_scheduler_decay': 30, 'scheduler_step': 0.1, 'start_lr': 0.01, 'weight_decay': 1e-05, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                }
            },
            "StepLR_67": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=HPARAM['start_lr'], weight_decay=HPARAM['weight_decay'], momentum=HPARAM['momentum'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_size",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(MODEL_ROOT / f'model{str(index).zfill(2)}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/clear_linear.py": {
        "torch": {
            "Linear_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NUM_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HPARAM['start_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 512, 'num_epoch': 10, 'step_scheduler_decay': 60, 'scheduler_step': 0.1, 'start_lr': 1, 'weight_decay': 0, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "HPARAM['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 512, 'num_epoch': 10, 'step_scheduler_decay': 60, 'scheduler_step': 0.1, 'start_lr': 1, 'weight_decay': 0, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "HPARAM['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 512, 'num_epoch': 10, 'step_scheduler_decay': 60, 'scheduler_step': 0.1, 'start_lr': 1, 'weight_decay': 0, 'momentum': 0.9}",
                            "Dict"
                        ]
                    ]
                }
            },
            "StepLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=HPARAM['start_lr'], weight_decay=HPARAM['weight_decay'], momentum=HPARAM['momentum'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_size",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(MODEL_ROOT / f'model{str(index).zfill(2)}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/confusion_matrix.py": {
        "torch": {
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/continual_sequence_classification.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/cope.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dataloader.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dataset_inspection.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{cuda}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/deep_slda.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/detection.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LinearLR_133": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "start_factor": {
                    "value": "warmup_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 1000",
                            "BinOp"
                        ]
                    ]
                },
                "total_iters": {
                    "value": "warmup_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(1000, len(benchmark.train_stream[0].dataset) // train_mb_size - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_207": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PennFudanDataset(root=root_path)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[:-test_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_208": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PennFudanDataset(root=root_path)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[-test_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/detection_examples_utils.py": {
        "torch": {
            "as_tensor_65": {
                "data": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(len(train_dataset_avl))]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(train_indices)[torch.randperm(len(train_indices))].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_66": {
                "n": {
                    "value": "len(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/detection_lvis.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LinearLR_107": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "start_factor": {
                    "value": "warmup_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 1000",
                            "BinOp"
                        ]
                    ]
                },
                "total_iters": {
                    "value": "warmup_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(1000, len(benchmark.train_stream[0].dataset) // train_mb_size - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/endless_cl_sim.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/eval_plugin.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_170": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ewc_mnist.py": {
        "torch": {
            "SGD_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ex_model_cl.py": {
        "torch": {
            "DataLoader_38": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exml_benchmark.original_benchmark.train_stream[i].dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/gem_agem_mnist.py": {
        "torch": {
            "SGD_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/generative_replay_MNIST_generator.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/generative_replay_splitMNIST.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/getting_started.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/icarl.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random_cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(img.shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_147": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wght_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_38": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_154": {
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=config.lr_base, weight_decay=config.wght_decay, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0 / config.lr_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/joint_training.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/lamaml_cifar100.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/lfl_mnist.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/lwf_mnist.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/mean_scores.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{cuda}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/multihead.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/online_naive.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/online_replay.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/pytorchcv_models.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_106": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/replay.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/rwalk_mnist.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/simple_ctrl.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_63": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_init.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/standalone_metric.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "real_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "predicted_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/synaptic_intelligence.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/task_incremental.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/task_metrics.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_150": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_62": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_70": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_63": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_71": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tensorboard_logger.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/coco_eval.py": {
        "torch": {
            "stack_165": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/coco_utils.py": {
        "torch": {
            "Subset_142": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, ids)",
                            "Call"
                        ],
                        [
                            "{'images': [], 'categories': [], 'annotations': []}",
                            "Dict"
                        ],
                        [
                            "dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "CocoDetection(img_folder, ann_file, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "_coco_remove_images_without_annotations(dataset)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_38": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "targets['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.permute(0, 2, 1).contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_61": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_75": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets['keypoints']",
                            "Subscript"
                        ],
                        [
                            "keypoints.reshape(keypoints.shape[0], -1).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/engine.py": {
        "torch": {
            "get_num_threads_178": {
                "variable": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "inference_mode_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearLR_39": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "start_factor": {
                    "value": "warmup_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 1000",
                            "BinOp"
                        ]
                    ]
                },
                "total_iters": {
                    "value": "warmup_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(1000, len(data_loader) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_180": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_208": {
                "int": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_num_threads()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_49": {
                "enabled": {
                    "value": "scaler is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "synchronize_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/group_by_aspect_ratio.py": {
        "torch": {
            "DataLoader_112": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetSampler(indices)",
                            "Call"
                        ],
                        [
                            "sampler",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/lvis_eval.py": {
        "torch": {
            "stack_195": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/presets.py": {
        "torch": {}
    },
    "examples/tvdetection/train.py": {
        "torch": {
            "device_262": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_296": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(True, args), args.data_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupedBatchSampler(train_sampler, group_ids, args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(train_sampler, args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(False, args), args.data_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_336": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_276": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(True, args), args.data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_277": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(False, args), args.data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_281": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(True, args), args.data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_282": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(False, args), args.data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_292": {
                "variable": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_330": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.detection.__dict__[args.model](pretrained=args.pretrained, num_classes=num_classes, **kwargs)",
                            "Call"
                        ],
                        [
                            "prototype.models.detection.__dict__[args.model](weights=args.weights, num_classes=num_classes, **kwargs)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiStepLR_347": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_360": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradScaler_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_351": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/transforms.py": {
        "torch": {
            "rand_227": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.fill",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "image.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_304": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.get_image_num_channels(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_34": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_216": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_116": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.options)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_221": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "[[left, top, right, bottom]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_127": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tvdetection/utils.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_297": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inference_mode_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wandb_logger.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() and args.cuda >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_144": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "profiling/online_strategy.py": {
        "torch": {
            "SGD_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "experience_0.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_152": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/benchmarks/scenarios/test_classification_scenario.py": {
        "torch": {
            "rand_21": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_22": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_23": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_29": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_30": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_38": {
                "variable": {
                    "value": "test_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_44": {
                "variable": {
                    "value": "other_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_45": {
                "variable": {
                    "value": "other_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_46": {
                "variable": {
                    "value": "other_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_96": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_97": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_98": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_103": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_104": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_105": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_111": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_112": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_113": {
                "variable": {
                    "value": "test_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "other_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_120": {
                "variable": {
                    "value": "other_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_121": {
                "variable": {
                    "value": "other_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_510": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_511": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_512": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_521": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_522": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_523": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_533": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_534": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_535": {
                "variable": {
                    "value": "test_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_545": {
                "variable": {
                    "value": "other_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_546": {
                "variable": {
                    "value": "other_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_547": {
                "variable": {
                    "value": "other_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/benchmarks/scenarios/test_scenarios_typechecks.py": {
        "torch": {
            "randn_87": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_111": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/evaluation/test_image_samples.py": {
        "torch": {
            "DataLoader_37": {
                "dataset": {
                    "value": "curr_exp.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_avalanche_dataset.py": {
        "torch": {
            "rand_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_328": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_329": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_490": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_491": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_492": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_493": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_495": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_496": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_514": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_516": {
                "variable": {
                    "value": "train_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_517": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_518": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_519": {
                "variable": {
                    "value": "test_z",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_521": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_522": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_542": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_543": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_545": {
                "variable": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_547": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(400))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_548": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(400, 500))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_577": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_578": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_579": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_580": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(300,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_582": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_583": {
                "variable": {
                    "value": "dataset2",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_585": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset1, dataset2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_612": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_613": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_614": {
                "variable": {
                    "value": "tensor_x3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_615": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_616": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(300,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_617": {
                "variable": {
                    "value": "tensor_y3",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_619": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_620": {
                "variable": {
                    "value": "dataset2",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_621": {
                "variable": {
                    "value": "dataset3",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_623": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset1, dataset2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConcatDataset_624": {
                "variable": {
                    "value": "concat_dataset2",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(concat_dataset, dataset3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_657": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_658": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_660": {
                "variable": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_662": {
                "variable": {
                    "value": "subset1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(400, 500))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_663": {
                "variable": {
                    "value": "subset2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(whole_dataset, indices=list(range(400, 500)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[5, 7, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_683": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_684": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_685": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_686": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_688": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_689": {
                "variable": {
                    "value": "dataset2",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_693": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset1, dataset2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_694": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "AvalancheConcatDataset([dataset_sub_eval, dataset_sub])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "rand_717": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_718": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_719": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_720": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_722": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_723": {
                "variable": {
                    "value": "dataset1_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AvalancheDataset(dataset_mnist, transform=ToTensor(), target_transform=lambda target: -1)",
                            "Call"
                        ],
                        [
                            "AvalancheDataset(dataset_mnist, transform=ToTensor(), target_transform=lambda target: -1)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "AvalancheTensorDataset(tensor_x, tensor_y, task_labels=tensor_t)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(199, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_724": {
                "variable": {
                    "value": "dataset2",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_728": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset1_sub, dataset2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_729": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "AvalancheConcatDataset([dataset_sub_eval, dataset_sub])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "rand_753": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_754": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_755": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_756": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_757": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_758": {
                "variable": {
                    "value": "tensor_t2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_763": {
                "variable": {
                    "value": "dataset1_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AvalancheDataset(dataset_mnist, transform=ToTensor(), target_transform=lambda target: -1)",
                            "Call"
                        ],
                        [
                            "AvalancheDataset(dataset_mnist, transform=ToTensor(), target_transform=lambda target: -1)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y)",
                            "Call"
                        ],
                        [
                            "AvalancheTensorDataset(tensor_x, tensor_y, task_labels=tensor_t)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ],
                        [
                            "TensorDataset(tensor_x, tensor_y, tensor_z)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(199, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_770": {
                "variable": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset1_sub, dataset2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_771": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "ConcatDataset((dataset1_sub, dataset2))",
                            "Call"
                        ],
                        [
                            "AvalancheConcatDataset([dataset_sub_eval, dataset_sub])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ],
                        [
                            "[random.randint(0, 299) for _ in range(1000)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "rand_801": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_802": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_803": {
                "variable": {
                    "value": "tensor_z",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(500,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_812": {
                "variable": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_838": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_839": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_840": {
                "variable": {
                    "value": "tensor_z",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_856": {
                "variable": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_874": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_875": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_876": {
                "variable": {
                    "value": "tensor_z",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_878": {
                "variable": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_879": {
                "variable": {
                    "value": "tensor_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_880": {
                "variable": {
                    "value": "tensor_z2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_896": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_962": {
                "variable": {
                    "value": "dataset1",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_981": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dataset1, dataset2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_1060": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[3000, 8, 4, 1010, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_1081": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[3000, 8, 4, 1010, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_1111": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(expanduser('~') + '/.avalanche/data/mnist/', download=True, transform=CenterCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=expanduser('~') + '/.avalanche/data/mnist/', download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True, transform=RandomCrop(16))",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(root=default_dataset_location('mnist'), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[3000, 8, 4, 1010, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_1404": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "25",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1405": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(d_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_1406": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(d_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_1714": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1715": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_1716": {
                "variable": {
                    "value": "tensor_z",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_1732": {
                "variable": {
                    "value": "whole_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_54": {
                "size": {
                    "value": "img_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "out": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_806": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_808": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_809": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_843": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_845": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_846": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_850": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_852": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-2 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_853": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_883": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_885": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_886": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_890": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_892": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-2 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_893": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_1441": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "all_targets + c_dataset.targets",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(all_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1719": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1721": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_1722": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_1726": {
                "variable": {
                    "value": "x_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pat[0] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1728": {
                "variable": {
                    "value": "z_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-2 for _ in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_1729": {
                "variable": {
                    "value": "t_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pat[3] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "equal_92": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_135": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_143": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_144": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_157": {
                "input": {
                    "value": "ToTensor()(x0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_158": {
                "input": {
                    "value": "ToTensor()(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_175": {
                "input": {
                    "value": "ToTensor()(x0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_176": {
                "input": {
                    "value": "ToTensor()(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "torch.eq(x1, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_312": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_337": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_338": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_339": {
                "input": {
                    "value": "t.to(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_404": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_446": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_558": {
                "input": {
                    "value": "tensor_x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_559": {
                "input": {
                    "value": "tensor_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_563": {
                "input": {
                    "value": "torch.as_tensor(train_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_y[:400]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_568": {
                "input": {
                    "value": "tensor_x[400]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_569": {
                "input": {
                    "value": "tensor_y[400]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_573": {
                "input": {
                    "value": "torch.as_tensor(test_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_y[400:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_595": {
                "input": {
                    "value": "tensor_x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_596": {
                "input": {
                    "value": "tensor_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_600": {
                "input": {
                    "value": "tensor_x2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_601": {
                "input": {
                    "value": "tensor_y2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_605": {
                "input": {
                    "value": "torch.as_tensor(av_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cat((tensor_y, tensor_y2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_635": {
                "input": {
                    "value": "tensor_x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_636": {
                "input": {
                    "value": "tensor_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_640": {
                "input": {
                    "value": "tensor_x2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_641": {
                "input": {
                    "value": "tensor_y2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_645": {
                "input": {
                    "value": "tensor_x3[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_646": {
                "input": {
                    "value": "tensor_y3[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_650": {
                "input": {
                    "value": "torch.as_tensor(av_dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cat((tensor_y, tensor_y2, tensor_y3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_671": {
                "input": {
                    "value": "tensor_x[405]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_672": {
                "input": {
                    "value": "tensor_y[405]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_676": {
                "input": {
                    "value": "torch.as_tensor(dataset.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor([tensor_y[405], tensor_y[407], tensor_y[400]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_765": {
                "*tensors": {
                    "value": "tensor_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_817": {
                "input": {
                    "value": "tensor_x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_818": {
                "input": {
                    "value": "tensor_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_823": {
                "input": {
                    "value": "tensor_x[0:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_824": {
                "input": {
                    "value": "tensor_y[0:5] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_825": {
                "input": {
                    "value": "torch.full((5,), -1, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_826": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_832": {
                "input": {
                    "value": "tensor_x[0:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_833": {
                "input": {
                    "value": "tensor_y[0:5] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_834": {
                "input": {
                    "value": "torch.full((5,), -1, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_835": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_862": {
                "input": {
                    "value": "tensor_x[0:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_863": {
                "input": {
                    "value": "tensor_y[0:5] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_864": {
                "input": {
                    "value": "torch.full((5,), -2, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_865": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_906": {
                "input": {
                    "value": "tensor_x2[0:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_907": {
                "input": {
                    "value": "tensor_y2[0:5] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_908": {
                "input": {
                    "value": "torch.full((5,), -1, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_909": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_913": {
                "input": {
                    "value": "tensor_x[0:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_914": {
                "input": {
                    "value": "tensor_y[0:5] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_915": {
                "input": {
                    "value": "torch.full((5,), -2, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_916": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1018": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tensor_x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1019": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tensor_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1020": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1023": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1024": {
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_y2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1025": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1028": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x3[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1029": {
                "input": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_y3[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1030": {
                "input": {
                    "value": "z3",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z3[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1033": {
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x4[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1035": {
                "input": {
                    "value": "z4",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z4[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1038": {
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x5[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1040": {
                "input": {
                    "value": "z5",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z5[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1043": {
                "input": {
                    "value": "x6",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x6[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1045": {
                "input": {
                    "value": "z6",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z6[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1048": {
                "input": {
                    "value": "x7",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_x7[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1050": {
                "input": {
                    "value": "z7",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_z7[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1158": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1160": {
                "input": {
                    "value": "ToTensor()(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1162": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1163": {
                "input": {
                    "value": "ToTensor()(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1475": {
                "input": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(500, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(500, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(500, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(500, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(500, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "gen_random_tensors(200)",
                            "Call"
                        ],
                        [
                            "torch.rand(d_sz, 3, 28, 28)",
                            "Call"
                        ],
                        [
                            "torch.rand(200, 3, 28, 28)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "leaf[d_sz * dataset_hierarchy_depth:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1478": {
                "input": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "gen_random_tensors(200)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 10, (d_sz,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "leaf[d_sz * dataset_hierarchy_depth:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1481": {
                "input": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "gen_random_tensors(200)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 10, (d_sz,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(leaf.targets)[d_sz * dataset_hierarchy_depth:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1487": {
                "input": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 10, (d_sz,))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "leaf[d_sz * dataset_hierarchy_depth:][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1549": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1740": {
                "input": {
                    "value": "tensor_x[5:10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_1741": {
                "input": {
                    "value": "tensor_y[5:10] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_1742": {
                "input": {
                    "value": "torch.full((5,), -2, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1743": {
                "input": {
                    "value": "torch.zeros(5, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_1881": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1938": {
                "input": {
                    "value": "ToTensor()(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_428": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_429": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_436": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_437": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_563": {
                "data": {
                    "value": "train_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_573": {
                "data": {
                    "value": "test_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_606": {
                "data": {
                    "value": "av_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_607": {
                "tensors": {
                    "value": "(tensor_y, tensor_y2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_651": {
                "data": {
                    "value": "av_dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_652": {
                "tensors": {
                    "value": "(tensor_y, tensor_y2, tensor_y3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_677": {
                "data": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_678": {
                "data": {
                    "value": "[tensor_y[405], tensor_y[407], tensor_y[400]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_711": {
                "input": {
                    "value": "expected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_x[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_x2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_712": {
                "input": {
                    "value": "expected_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_y[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_y2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_747": {
                "input": {
                    "value": "expected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_x[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_x2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_748": {
                "input": {
                    "value": "expected_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_y[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_y2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_794": {
                "input": {
                    "value": "expected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_x[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_x2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_795": {
                "input": {
                    "value": "expected_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_y[orig_idx]",
                            "Subscript"
                        ],
                        [
                            "tensor_y2[orig_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(32, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_807": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_825": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_826": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_834": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_835": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_844": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_851": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_864": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_865": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_884": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_891": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_908": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_909": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_915": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_916": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_943": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_944": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_945": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_1452": {
                "input": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (500,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ],
                        [
                            "gen_random_tensors(200)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 10, (d_sz,))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 100, (200,))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_targets[-d_sz:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1460": {
                "input": {
                    "value": "tensor_x[permuted]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "leaf[leaf_range][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1463": {
                "input": {
                    "value": "tensor_y[permuted]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "leaf[leaf_range][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1466": {
                "input": {
                    "value": "tensor_y[permuted]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(leaf.targets)[leaf_range]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1471": {
                "input": {
                    "value": "tensor_t[permuted]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "leaf[leaf_range][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_1494": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1497": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1500": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1503": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1510": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1513": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1516": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_1519": {
                "*tensors": {
                    "value": "torch.randn(20, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1720": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_1727": {
                "data": {
                    "value": "[pat[1] for pat in patterns]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_1742": {
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1743": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_1758": {
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1758": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_1762": {
                "*size": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1762": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(23,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_1785": {
                "input": {
                    "value": "torch.eq(train_exps[exp_id][0], benchmark_train_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_1788": {
                "input": {
                    "value": "torch.eq(train_exps[exp_id][1], benchmark_train_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_1797": {
                "input": {
                    "value": "torch.eq(test_exps[exp_id][0], benchmark_test_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_1800": {
                "input": {
                    "value": "torch.eq(test_exps[exp_id][1], benchmark_test_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_1810": {
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1810": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_1814": {
                "*size": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1814": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(23,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_1837": {
                "input": {
                    "value": "torch.eq(train_exps[exp_id][0], benchmark_train_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_1849": {
                "input": {
                    "value": "torch.eq(test_exps[exp_id][0], benchmark_test_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_430": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_438": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_1449": {
                "input": {
                    "value": "tensor_y[permuted]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "all_targets[leaf_range]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_1483": {
                "data": {
                    "value": "leaf.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_1494": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1494": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1497": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1497": {
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1500": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1500": {
                "low": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1503": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1503": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1510": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1510": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1513": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1513": {
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1516": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1516": {
                "low": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1519": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1519": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eq_1785": {
                "input": {
                    "value": "train_exps[exp_id][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_1788": {
                "input": {
                    "value": "train_exps[exp_id][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_1797": {
                "input": {
                    "value": "test_exps[exp_id][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_1800": {
                "input": {
                    "value": "test_exps[exp_id][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_1837": {
                "input": {
                    "value": "train_exps[exp_id][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.train_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_1849": {
                "input": {
                    "value": "test_exps[exp_id][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "benchmark_test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ],
                        [
                            "load_all_dataset(cl_benchmark.test_stream[exp_id].dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_247": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_1467": {
                "data": {
                    "value": "leaf.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ctrl.py": {
        "torch": {
            "equal_28": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_custom_streams.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_17": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_18": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_25": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(150,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_26": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(150,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "220",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_33": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(220,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_34": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(220,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_115": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_116": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_117": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(200,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_124": {
                "variable": {
                    "value": "tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(150,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_125": {
                "variable": {
                    "value": "tensor_t",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(150,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_78": {
                "input": {
                    "value": "expect_x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_79": {
                "input": {
                    "value": "expect_y",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_90": {
                "input": {
                    "value": "expect_x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_91": {
                "input": {
                    "value": "expect_y",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_102": {
                "input": {
                    "value": "expect_x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_103": {
                "input": {
                    "value": "expect_y",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "got_y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_helper_method.py": {
        "torch": {
            "clone_54": {
                "variable": {
                    "value": "old_classifier_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.classifier.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_55": {
                "variable": {
                    "value": "old_classifier_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.classifier.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_58": {
                "variable": {
                    "value": "new_classifier_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.classifier.classifiers['0'].classifier.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_61": {
                "variable": {
                    "value": "new_classifier_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.classifier.classifiers['0'].classifier.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "task_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_65": {
                "input": {
                    "value": "old_classifier_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(module.classifier.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_classifier_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(module.classifier.classifiers['0'].classifier.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_67": {
                "input": {
                    "value": "old_classifier_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(module.classifier.bias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_classifier_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(module.classifier.classifiers['0'].classifier.bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_85": {
                "input": {
                    "value": "out_single_task",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_singletask(test_input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out_multi_task",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_multitask(test_input, task_labels=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_88": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_114": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_high_level_generators.py": {
        "torch": {
            "zeros_196": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_230": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_292": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_293": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_300": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_377": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_476": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_481": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_484": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_408": {
                "input": {
                    "value": "experience_1_x[:80]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_415": {
                "input": {
                    "value": "experience_2_x[:60]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_422": {
                "input": {
                    "value": "experience_1_y[:80]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_429": {
                "input": {
                    "value": "experience_2_y[:60]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_436": {
                "input": {
                    "value": "experience_1_x[80:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_443": {
                "input": {
                    "value": "experience_2_x[60:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_450": {
                "input": {
                    "value": "experience_1_y[80:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_457": {
                "input": {
                    "value": "experience_2_y[60:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_464": {
                "input": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_468": {
                "input": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_524": {
                "input": {
                    "value": "experience_1_x[:expected_rel_1_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_531": {
                "input": {
                    "value": "experience_2_x[:expected_rel_2_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_538": {
                "input": {
                    "value": "experience_1_y[:expected_rel_1_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_545": {
                "input": {
                    "value": "experience_2_y[:expected_rel_2_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_552": {
                "input": {
                    "value": "experience_1_x[expected_rel_1_train:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_559": {
                "input": {
                    "value": "experience_2_x[expected_rel_2_train:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_566": {
                "input": {
                    "value": "experience_1_y[expected_rel_1_train:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_573": {
                "input": {
                    "value": "experience_2_y[expected_rel_2_train:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_580": {
                "input": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_584": {
                "input": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "experience_1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_596": {
                "variable": {
                    "value": "experience_1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_602": {
                "variable": {
                    "value": "experience_2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_603": {
                "variable": {
                    "value": "experience_2_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_609": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*pattern_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_610": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_283": {
                "input": {
                    "value": "test_x[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_284": {
                "input": {
                    "value": "test_y[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_363": {
                "input": {
                    "value": "test_x[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_364": {
                "input": {
                    "value": "test_y[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_274": {
                "input": {
                    "value": "ref_tensor_x[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_275": {
                "input": {
                    "value": "ref_tensor_y[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_354": {
                "input": {
                    "value": "ref_tensor_x[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_355": {
                "input": {
                    "value": "ref_tensor_y[tensor_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ],
                        [
                            "exp.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_711": {
                "input": {
                    "value": "experience_1_x[:80]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_718": {
                "input": {
                    "value": "experience_2_x[:60]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_725": {
                "input": {
                    "value": "experience_1_y[:80]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_732": {
                "input": {
                    "value": "experience_2_y[:60]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.train_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_739": {
                "input": {
                    "value": "experience_1_x[80:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_746": {
                "input": {
                    "value": "experience_2_x[60:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_753": {
                "input": {
                    "value": "experience_1_y[80:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_760": {
                "input": {
                    "value": "experience_2_y[60:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_benchmark.valid_stream[1].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_767": {
                "input": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, *pattern_shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_773": {
                "input": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(50, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_benchmark.test_stream[0].dataset[:][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_788": {
                "data": {
                    "value": "train_d.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_789": {
                "data": {
                    "value": "valid_d.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_797": {
                "data": {
                    "value": "exp.dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_798": {
                "data": {
                    "value": "valid_d.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_loggers.py": {
        "torch": {
            "SGD_26": {
                "variable": {
                    "value": "cls.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "cls.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_metrics.py": {
        "torch": {
            "randn_40": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_42": {
                "variable": {
                    "value": "self.task_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_tasks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_93": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_94": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_186": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_187": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_251": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_252": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_256": {
                "variable": {
                    "value": "my_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_257": {
                "variable": {
                    "value": "my_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_296": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_297": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_301": {
                "variable": {
                    "value": "my_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_302": {
                "variable": {
                    "value": "my_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_337": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_338": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_342": {
                "variable": {
                    "value": "my_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_343": {
                "variable": {
                    "value": "my_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_415": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_416": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_420": {
                "variable": {
                    "value": "my_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_421": {
                "variable": {
                    "value": "my_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_485": {
                "variable": {
                    "value": "my_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_486": {
                "variable": {
                    "value": "my_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 2, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_490": {
                "variable": {
                    "value": "my_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 0, 2, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_491": {
                "variable": {
                    "value": "my_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_656": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "(my_out, my_out2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_461": {
                "tensors": {
                    "value": "(my_y, my_y2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_462": {
                "data": {
                    "value": "many_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * len(my_out)",
                            "BinOp"
                        ],
                        [
                            "many_ts + [1] * len(my_out2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_579": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_587": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_588": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unique_77": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_87": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models.py": {
        "torch": {
            "SGD_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "p_new",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_129": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_194": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_195": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_237": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_238": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_299": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_300": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_458": {
                "variable": {
                    "value": "class_means",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "variable": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4, 3, 2, 1], [3, 4, 2, 1], [3, 2, 4, 1], [3, 2, 1, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_468": {
                "variable": {
                    "value": "mb_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_226": {
                "input": {
                    "value": "w_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier.weight.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_new[:w_old.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_227": {
                "input": {
                    "value": "b_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier.bias.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b_new[:w_old.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "dataset": {
                    "value": "benchmark.train_stream[0].dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_331": {
                "dataset": {
                    "value": "benchmark.train_stream[4].dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_376": {
                "variable": {
                    "value": "au_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.active_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_473": {
                "input": {
                    "value": "torch.max(pred, 1)[1] == mb_y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_348": {
                "input": {
                    "value": "model.active_units[autot] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_353": {
                "input": {
                    "value": "out[:, autot] != model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_355": {
                "input": {
                    "value": "out_masked == model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_375": {
                "input": {
                    "value": "model.active_units[autot] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_378": {
                "input": {
                    "value": "~au_copy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_383": {
                "input": {
                    "value": "out[:, autot] != model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_385": {
                "input": {
                    "value": "out_masked == model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_404": {
                "input": {
                    "value": "curr_mask[curr_au] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_409": {
                "input": {
                    "value": "out[:, curr_au] != model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_410": {
                "input": {
                    "value": "out[:, :nunits][:, curr_mask == 0] == model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_417": {
                "input": {
                    "value": "curr_mask[curr_au] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_422": {
                "input": {
                    "value": "out[:, curr_au] != model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_423": {
                "input": {
                    "value": "out[:, :nunits][:, curr_mask == 0] == model.mask_value",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_473": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mb_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_486": {
                "dataset": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "benchmark.train_stream[0].dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_488": {
                "dataset": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "benchmark.train_stream[1].dataset",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_nc_sit_scenario.py": {
        "torch": {}
    },
    "tests/test_ni_sit_scenario.py": {
        "torch": {
            "unique_44": {
                "variable": {
                    "value": "(_, unique_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(mnist_train.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "min_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_count // my_ni_benchmark.n_experiences",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_45": {
                "data": {
                    "value": "mnist_train.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_losses.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "mb_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "old_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 1, 0, 0], [1, 2, 0, 0], [2, 1, 0, 0], [1, 2, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 1, 0, 0], [1, 2, 0, 0], [0, 0, 2, 1], [0, 0, 1, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_online_strategies.py": {
        "torch": {
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_replay.py": {
        "torch": {
            "Identity_171": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_181": {
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_81": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "[0, -4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_strategies.py": {
        "torch": {
            "SGD_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "strategy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_229": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_735": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_strategies_accuracy.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_stream_completeness.py": {
        "torch": {
            "SGD_26": {
                "variable": {
                    "value": "cls.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "cls.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "cls.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_supervised_regression.py": {
        "torch": {
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_304": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.adapted_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.eval_mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_573": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_523": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_540": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_559": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_588": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_606": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_535": {
                "params": {
                    "value": "old_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_554": {
                "params": {
                    "value": "new_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_581": {
                "params": {
                    "value": "old_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_599": {
                "params": {
                    "value": "new_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}