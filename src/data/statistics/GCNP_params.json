{
    "GNN/metric.py": {
        "sklearn": {
            "f1_score_12": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y_true, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/utils.py": {
        "sklearn": {
            "StandardScaler_24": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/load_tensorflow_model.py": {
        "tensorflow": {
            "NewCheckpointReader_66": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "args_global.saved_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_56": {
                "ndarray": {
                    "value": "tf_var.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "tf_var.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "tf_var.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "tf_var.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "tf_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_weights'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_bias'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_weights'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_bias'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_offset'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_scale'.format(tf_aggr_index, _order))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "tf_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_weights'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_bias'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_weights'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_bias'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_offset'.format(tf_aggr_index, _order))",
                            "Call"
                        ],
                        [
                            "reader.get_tensor('highorderaggregator_{}_vars/order{}_scale'.format(tf_aggr_index, _order))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GNN/globals.py": {
        "torch": {}
    },
    "GNN/pytorch_version/gpu_profile.py": {
        "torch": {
            "is_tensor_97": {
                "obj": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gc.get_objects()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_99": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/layers.py": {
        "torch": {
            "ReLU_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.f_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_32": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.f_bias + self.offset + self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_152": {
                "variable": {
                    "value": "self.f_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_153": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.f_bias + self.offset + self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_267": {
                "variable": {
                    "value": "from_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_278": {
                "variable": {
                    "value": "feat_neigh_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_neigh_dense",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(feat_neigh_dense, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "from_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_neigh_sparse, feat_neigh_dense]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_40": {
                "input": {
                    "value": "adj_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat[:, masks[o]]",
                            "Subscript"
                        ],
                        [
                            "feat",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_79": {
                "variable": {
                    "value": "__feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(self.f_lin[_id](_feat) + self.f_bias[_id])",
                            "Call"
                        ],
                        [
                            "self.act(self.f_lin[_id](_feat) + self.f_bias[_id])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.f_lin[o].weight.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_partial",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "from_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_161": {
                "input": {
                    "value": "adj_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat[:, masks[o]]",
                            "Subscript"
                        ],
                        [
                            "feat",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_193": {
                "variable": {
                    "value": "feat_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_partial",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_223": {
                "variable": {
                    "value": "__feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat[:, masks[o]]",
                            "Subscript"
                        ],
                        [
                            "feat",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.f_lin[o].weight.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_partial",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "feat_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_partial",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[from_self, from_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[from_self, from_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_260": {
                "tensors": {
                    "value": "[from_self, from_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "[from_self, from_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_283": {
                "tensors": {
                    "value": "[from_self, from_neigh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "data": {
                    "value": "torch.zeros(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "torch.zeros(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.ones(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "dim_in[o]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out[o]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "data": {
                    "value": "torch.zeros(dim_out[o])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "data": {
                    "value": "torch.zeros(dim_out[o])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "data": {
                    "value": "torch.ones(dim_out[o])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "mask_in_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rsqrt_47": {
                "input": {
                    "value": "var",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "feat.var(dim=1, unbiased=False).view(feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "__feat.var(dim=1, unbiased=False).view(__feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "feat.var(dim=1, unbiased=False).view(feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "__feat.var(dim=1, unbiased=False).view(__feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "*size": {
                    "value": "dim_out[o]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "dim_out[o]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "dim_out[o]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rsqrt_168": {
                "input": {
                    "value": "var",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "feat.var(dim=1, unbiased=False).view(feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "__feat.var(dim=1, unbiased=False).view(__feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "feat.var(dim=1, unbiased=False).view(feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "__feat.var(dim=1, unbiased=False).view(__feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_203": {
                "input": {
                    "value": "ref_weight[o][mask_in[o], :][:, mask_out[o]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_207": {
                "input": {
                    "value": "ref_weight[o][mask_in_cat, :][:, mask_out[o]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/minibatch.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "self.norm_loss_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.norm_loss_test.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "self.norm_loss_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.norm_loss_train.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/models.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "self.feat_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat_full.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "self.label_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_full.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.aggregators",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_89": {
                "variable": {
                    "value": "emb_subg_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_subg",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.aggregators",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_294": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_312": {
                "variable": {
                    "value": "emb_subg_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_subg",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "self.label_full_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_full.argmax(axis=1).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "self.label_full_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_full.cpu().numpy().argmax(axis=1).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds / torch.sum(preds, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.classifier.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "self.classifier.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_152": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds / torch.sum(preds, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.classifier.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "self.classifier.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_377": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_567": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_feat[root_nodes.shape[0]:], saved_activation[supports[0]['known_neighbor']])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_696": {
                "variable": {
                    "value": "feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_feat[root_nodes.shape[0]:], saved_activation[supports[0]['known_neighbor']])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_97": {
                "weight": {
                    "value": "norm_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_loss.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "norm_loss.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "synchronize_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_239": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_320": {
                "weight": {
                    "value": "norm_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_loss.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "norm_loss.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_322": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "synchronize_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_460": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_546": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_550": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_611": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_698": {
                "input": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full[supports[support_idx]]",
                            "Subscript"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh, masked=True, deg_inv=deg_inv)",
                            "Call"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "self.feat_full",
                            "Attribute"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.inplace_forward(_feat)",
                            "Call"
                        ],
                        [
                            "layer.sparse_forward(_feat_self, _feat_neigh, subg_adj)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "layer.dense_forward(_feat_self, _feat_neigh)",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[0].mixed_forward(feat_self, feat_neigh_sparse, feat_neigh_dense, supports[0]['adj'])",
                            "Call"
                        ],
                        [
                            "self.aggregators[1].sparse_forward(feat_self, feat_neigh, supports[0]['adj'])",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "deg_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "deg_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(deg_inv)",
                            "Call"
                        ],
                        [
                            "deg_inv.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "_feat_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "supports[support_idx].shape[0] - supports[support_idx + 1].shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "_feat_self.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/prune.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_10": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_12": {
                "variable": {
                    "value": "self.weight_norm_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ParameterList_13": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[self.beta, self.weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "self.beta_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.beta]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "beta_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "self.weight_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.weight]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "weight_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_44": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "mask_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.beta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "mask_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.beta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_83": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(beta_self)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_85": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(beta_neigh)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_10": {
                "*size": {
                    "value": "weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_24": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight * self.beta.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_33": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "torch.mean(self.beta[mask_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "beta_self",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.beta[:int(self.beta.shape[0] / 2)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_85": {
                "input": {
                    "value": "beta_neigh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.beta[int(self.beta.shape[0] / 2):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_90": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "torch.mean(self.beta[mask_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_106": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "self.beta[mask_out]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_90": {
                "input": {
                    "value": "self.beta[mask_out]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/train.py": {
        "torch": {
            "device_354": {
                "variable": {
                    "value": "prune_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_357": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model_full.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "synchronize_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_356": {
                "variable": {
                    "value": "prune_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_378": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(model_full.num_classes, dtype=bool)",
                            "Call"
                        ],
                        [
                            "[mask]",
                            "List"
                        ],
                        [
                            "torch.split(mask, split_size_or_sections=int(mask.shape[0] / (layer.order + 1)))",
                            "Call"
                        ],
                        [
                            "mask_out",
                            "Name"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(mask.shape[0] / (layer.order + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_456": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "activation.detach().to(prune_device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(minibatch.adj_val_norm.to(prune_device), feat)",
                            "Call"
                        ],
                        [
                            "torch.cat(_feat, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(layer.f_lin[o].weight, 0, 1).to(prune_device)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "layer.f_lin[o].weight.T[:, mask_out[o * dim:(o + 1) * dim]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(weight, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_194": {
                "f": {
                    "value": "path_saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/pytorch_models/saved_model_{}.pkl'.format(args_global.dir_log, timestamp)",
                            "Call"
                        ],
                        [
                            "'pytorch_models/' + hashlib.md5(text.encode('utf-8')).hexdigest() + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_196": {
                "f": {
                    "value": "path_saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/pytorch_models/saved_model_{}.pkl'.format(args_global.dir_log, timestamp)",
                            "Call"
                        ],
                        [
                            "'pytorch_models/' + hashlib.md5(text.encode('utf-8')).hexdigest() + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "profile_219": {
                "use_cuda": {
                    "value": "model_full.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_288": {
                "f": {
                    "value": "path_saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/pytorch_models/saved_model_{}.pkl'.format(args_global.dir_log, timestamp)",
                            "Call"
                        ],
                        [
                            "'pytorch_models/' + hashlib.md5(text.encode('utf-8')).hexdigest() + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_290": {
                "f": {
                    "value": "path_saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/pytorch_models/saved_model_{}.pkl'.format(args_global.dir_log, timestamp)",
                            "Call"
                        ],
                        [
                            "'pytorch_models/' + hashlib.md5(text.encode('utf-8')).hexdigest() + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "transpose_440": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.f_lin[o].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_feat",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[activation.detach().to(prune_device)]",
                            "List"
                        ],
                        [
                            "feat[batch]",
                            "Subscript"
                        ],
                        [
                            "_feat.cuda()",
                            "Call"
                        ],
                        [
                            "feat[batch]",
                            "Subscript"
                        ],
                        [
                            "_feat.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(layer.f_lin[o].weight, 0, 1).to(prune_device)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "layer.f_lin[o].weight.T[:, mask_out[o * dim:(o + 1) * dim]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(weight, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_609": {
                "*size": {
                    "value": "model_full.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/pytorch_models/saved_model_{}.pkl'.format(args_global.dir_log, timestamp)",
                            "Call"
                        ],
                        [
                            "'pytorch_models/' + hashlib.md5(text.encode('utf-8')).hexdigest() + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "profile_240": {
                "use_cuda": {
                    "value": "model_mini.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "profile_307": {
                "use_cuda": {
                    "value": "model_full.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "profile_323": {
                "use_cuda": {
                    "value": "model_mini.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_439": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minibatch.adj_val_norm.to(prune_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "activation.detach().to(prune_device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(minibatch.adj_val_norm.to(prune_device), feat)",
                            "Call"
                        ],
                        [
                            "torch.cat(_feat, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_162": {
                "f": {
                    "value": "tmp.pkl",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "profile_258": {
                "use_cuda": {
                    "value": "model_mini.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_402": {
                "variable": {
                    "value": "sv_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.svd(weight, compute_uv=False)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_447": {
                "input": {
                    "value": "minibatch.adj_val_norm.to(prune_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "_feat[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_453": {
                "input": {
                    "value": "layer.f_lin[p].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_534": {
                "input": {
                    "value": "lassos[-1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_558": {
                "condition": {
                    "value": "lassos[0].mask_out == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_603": {
                "condition": {
                    "value": "lassos[-1 - o].mask_out == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "transpose_538": {
                "input": {
                    "value": "lassos[-1].weight[:, weight_split[p]:weight_split[p + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_386": {
                "condition": {
                    "value": "lassos[-1].mask_out == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "svd_401": {
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(layer.f_lin[o].weight, 0, 1).to(prune_device)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "layer.f_lin[o].weight.T[:, mask_out[o * dim:(o + 1) * dim]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(weight, 1)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_572": {
                "condition": {
                    "value": "lassos[lasso_idx].mask_out == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_578": {
                "condition": {
                    "value": "mask_in[-1] == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_595": {
                "condition": {
                    "value": "mask_in[-1] == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_405": {
                "input": {
                    "value": "sv[:ratio]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_390": {
                "condition": {
                    "value": "lassos[-1].mask_out[o * dim:(o + 1) * dim] == True",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "GNN/pytorch_version/utils.py": {
        "torch": {
            "is_tensor_17": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}