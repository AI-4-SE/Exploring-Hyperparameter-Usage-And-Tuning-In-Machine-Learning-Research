{
    "datasets.py": {
        "sklearn": {
            "TfidfVectorizer_118": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_133": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "models/graphsaint.py": {
        "sklearn": {
            "f1_score_132": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "max_indices.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_cache_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "(__max_vals, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_83": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[subg_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.y[subg_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if use_norm else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.x, batch.edge_index, edge_weight=batch.edge_norm)",
                            "Call"
                        ],
                        [
                            "model(batch.x, batch.edge_index)",
                            "Call"
                        ],
                        [
                            "model(feats, g)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "batch.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if use_norm else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "empty_cache_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.x, batch.edge_index, edge_weight=batch.edge_norm)",
                            "Call"
                        ],
                        [
                            "model(batch.x, batch.edge_index)",
                            "Call"
                        ],
                        [
                            "model(feats, g)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "run_experiment.py": {
        "sklearn": {
            "f1_score_117": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "max_indices.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_55": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_319": {
                "variable": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "torch.LongTensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_428": {
                "variable": {
                    "value": "remaining_years",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "years[years > args.pretrain_until]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_115": {
                "variable": {
                    "value": "(__max_vals, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_278": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_290": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "train_nids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_nid, test_nid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-exponential_decay * delta_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if weights is not None else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "torch.LongTensor(labels)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if weights is not None else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_109": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "torch.LongTensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_206": {
                "start": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_285": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseAdam_336": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_441": {
                "variable": {
                    "value": "globals_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseAdam_528": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_531": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * args.rescale_lr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay * args.rescale_wd",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run_experiment_new.py": {
        "sklearn": {
            "f1_score_115": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "max_indices.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_53": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_374": {
                "variable": {
                    "value": "taskloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LifelongNodeClassificationDataset(effective_dataset_path, inductive=args.inductive)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_tasks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_113": {
                "variable": {
                    "value": "(__max_vals, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseAdam_205": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * args.rescale_lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * args.rescale_lr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay * args.rescale_wd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_277": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_293": {
                "variable": {
                    "value": "globals_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_317": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "-exponential_decay * delta_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if weights is not None else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if weights is not None else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_107": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "model(*inputs)",
                            "Call"
                        ],
                        [
                            "logits[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_284": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lifelong_learning.py": {
        "torch": {
            "as_tensor_199": {
                "variable": {
                    "value": "task_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(task_ids, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_26": {
                "variable": {
                    "value": "self.task_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_27": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_28": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_61": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_62": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_69": {
                "variable": {
                    "value": "self.task_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "task_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(task_ids, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_70": {
                "variable": {
                    "value": "self.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subg_task_ids < current",
                            "Compare"
                        ],
                        [
                            "subg_task_ids < current",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_71": {
                "variable": {
                    "value": "self.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "test_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subg_task_ids == current",
                            "Compare"
                        ],
                        [
                            "subg_task_ids == current",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "self.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "self.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "dgl_graph.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/gat.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.gat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/geometric.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(x=h, edge_index=edge_index, edge_weight=edge_norm)",
                            "Call"
                        ],
                        [
                            "layer(x=h, edge_index=edge_index)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(x=h, edge_index=edge_index, edge_weight=edge_norm)",
                            "Call"
                        ],
                        [
                            "layer(x=h, edge_index=edge_index)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphsage.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/jumping_knowledge.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_layers * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "ModuleList_9": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/node2vec.py": {
        "torch": {
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess_dataset.py": {
        "torch": {
            "as_tensor_25": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(features, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_26": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_27": {
                "variable": {
                    "value": "years",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "years",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(years, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}